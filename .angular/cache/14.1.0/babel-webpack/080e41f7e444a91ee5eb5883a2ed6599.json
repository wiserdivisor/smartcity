{"ast":null,"code":"/**\n * @module ol/geom/flat/intersectsextent\n */\nimport { containsExtent, createEmpty, extendFlatCoordinates, intersects, intersectsSegment } from '../../extent.js';\nimport { forEach as forEachSegment } from './segments.js';\nimport { linearRingContainsExtent, linearRingContainsXY } from './contains.js';\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\n\nexport function intersectsLineString(flatCoordinates, offset, end, stride, extent) {\n  var coordinatesExtent = extendFlatCoordinates(createEmpty(), flatCoordinates, offset, end, stride);\n\n  if (!intersects(extent, coordinatesExtent)) {\n    return false;\n  }\n\n  if (containsExtent(extent, coordinatesExtent)) {\n    return true;\n  }\n\n  if (coordinatesExtent[0] >= extent[0] && coordinatesExtent[2] <= extent[2]) {\n    return true;\n  }\n\n  if (coordinatesExtent[1] >= extent[1] && coordinatesExtent[3] <= extent[3]) {\n    return true;\n  }\n\n  return forEachSegment(flatCoordinates, offset, end, stride,\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} point1 Start point.\n   * @param {import(\"../../coordinate.js\").Coordinate} point2 End point.\n   * @return {boolean} `true` if the segment and the extent intersect,\n   *     `false` otherwise.\n   */\n  function (point1, point2) {\n    return intersectsSegment(extent, point1, point2);\n  });\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\n\nexport function intersectsLineStringArray(flatCoordinates, offset, ends, stride, extent) {\n  for (var i = 0, ii = ends.length; i < ii; ++i) {\n    if (intersectsLineString(flatCoordinates, offset, ends[i], stride, extent)) {\n      return true;\n    }\n\n    offset = ends[i];\n  }\n\n  return false;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\n\nexport function intersectsLinearRing(flatCoordinates, offset, end, stride, extent) {\n  if (intersectsLineString(flatCoordinates, offset, end, stride, extent)) {\n    return true;\n  }\n\n  if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[0], extent[1])) {\n    return true;\n  }\n\n  if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[0], extent[3])) {\n    return true;\n  }\n\n  if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[2], extent[1])) {\n    return true;\n  }\n\n  if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[2], extent[3])) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\n\nexport function intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent) {\n  if (!intersectsLinearRing(flatCoordinates, offset, ends[0], stride, extent)) {\n    return false;\n  }\n\n  if (ends.length === 1) {\n    return true;\n  }\n\n  for (var i = 1, ii = ends.length; i < ii; ++i) {\n    if (linearRingContainsExtent(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {\n      if (!intersectsLineString(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\n\nexport function intersectsLinearRingMultiArray(flatCoordinates, offset, endss, stride, extent) {\n  for (var i = 0, ii = endss.length; i < ii; ++i) {\n    var ends = endss[i];\n\n    if (intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent)) {\n      return true;\n    }\n\n    offset = ends[ends.length - 1];\n  }\n\n  return false;\n}","map":{"version":3,"names":["containsExtent","createEmpty","extendFlatCoordinates","intersects","intersectsSegment","forEach","forEachSegment","linearRingContainsExtent","linearRingContainsXY","intersectsLineString","flatCoordinates","offset","end","stride","extent","coordinatesExtent","point1","point2","intersectsLineStringArray","ends","i","ii","length","intersectsLinearRing","intersectsLinearRingArray","intersectsLinearRingMultiArray","endss"],"sources":["/home/asura/github/smartcity/node_modules/ol/geom/flat/intersectsextent.js"],"sourcesContent":["/**\n * @module ol/geom/flat/intersectsextent\n */\nimport { containsExtent, createEmpty, extendFlatCoordinates, intersects, intersectsSegment, } from '../../extent.js';\nimport { forEach as forEachSegment } from './segments.js';\nimport { linearRingContainsExtent, linearRingContainsXY } from './contains.js';\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLineString(flatCoordinates, offset, end, stride, extent) {\n    var coordinatesExtent = extendFlatCoordinates(createEmpty(), flatCoordinates, offset, end, stride);\n    if (!intersects(extent, coordinatesExtent)) {\n        return false;\n    }\n    if (containsExtent(extent, coordinatesExtent)) {\n        return true;\n    }\n    if (coordinatesExtent[0] >= extent[0] && coordinatesExtent[2] <= extent[2]) {\n        return true;\n    }\n    if (coordinatesExtent[1] >= extent[1] && coordinatesExtent[3] <= extent[3]) {\n        return true;\n    }\n    return forEachSegment(flatCoordinates, offset, end, stride, \n    /**\n     * @param {import(\"../../coordinate.js\").Coordinate} point1 Start point.\n     * @param {import(\"../../coordinate.js\").Coordinate} point2 End point.\n     * @return {boolean} `true` if the segment and the extent intersect,\n     *     `false` otherwise.\n     */\n    function (point1, point2) {\n        return intersectsSegment(extent, point1, point2);\n    });\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLineStringArray(flatCoordinates, offset, ends, stride, extent) {\n    for (var i = 0, ii = ends.length; i < ii; ++i) {\n        if (intersectsLineString(flatCoordinates, offset, ends[i], stride, extent)) {\n            return true;\n        }\n        offset = ends[i];\n    }\n    return false;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRing(flatCoordinates, offset, end, stride, extent) {\n    if (intersectsLineString(flatCoordinates, offset, end, stride, extent)) {\n        return true;\n    }\n    if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[0], extent[1])) {\n        return true;\n    }\n    if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[0], extent[3])) {\n        return true;\n    }\n    if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[2], extent[1])) {\n        return true;\n    }\n    if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[2], extent[3])) {\n        return true;\n    }\n    return false;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent) {\n    if (!intersectsLinearRing(flatCoordinates, offset, ends[0], stride, extent)) {\n        return false;\n    }\n    if (ends.length === 1) {\n        return true;\n    }\n    for (var i = 1, ii = ends.length; i < ii; ++i) {\n        if (linearRingContainsExtent(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {\n            if (!intersectsLineString(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRingMultiArray(flatCoordinates, offset, endss, stride, extent) {\n    for (var i = 0, ii = endss.length; i < ii; ++i) {\n        var ends = endss[i];\n        if (intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent)) {\n            return true;\n        }\n        offset = ends[ends.length - 1];\n    }\n    return false;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}