{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/source/TileImage\n */\n\n\nimport EventType from '../events/EventType.js';\nimport ImageTile from '../ImageTile.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport UrlTile from './UrlTile.js';\nimport { ENABLE_RASTER_REPROJECTION } from '../reproj/common.js';\nimport { equivalent, get as getProjection } from '../proj.js';\nimport { getKey, getKeyZXY } from '../tilecoord.js';\nimport { getForProjection as getTileGridForProjection } from '../tilegrid.js';\nimport { getUid } from '../util.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [imageSmoothing=true] Deprecated.  Use the `interpolate` option instead.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"./Source.js\").State} [state] Source state.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile\n * service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {Array<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to\n * request out-of-bounds tiles from the server. When set to `false`, only one\n * world will be rendered. When set to `true`, tiles will be requested for one\n * world only, but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [key] Optional tile key for proper cache fetching\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Base class for sources providing images divided into a tile grid.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\n\nvar TileImage =\n/** @class */\nfunction (_super) {\n  __extends(TileImage, _super);\n  /**\n   * @param {!Options} options Image tile options.\n   */\n\n\n  function TileImage(options) {\n    var _this = this;\n\n    var interpolate = options.imageSmoothing !== undefined ? options.imageSmoothing : true;\n\n    if (options.interpolate !== undefined) {\n      interpolate = options.interpolate;\n    }\n\n    _this = _super.call(this, {\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction ? options.tileLoadFunction : defaultTileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate: interpolate,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection\n    }) || this;\n    /**\n     * @protected\n     * @type {?string}\n     */\n\n    _this.crossOrigin = options.crossOrigin !== undefined ? options.crossOrigin : null;\n    /**\n     * @protected\n     * @type {typeof ImageTile}\n     */\n\n    _this.tileClass = options.tileClass !== undefined ? options.tileClass : ImageTile;\n    /**\n     * @protected\n     * @type {!Object<string, TileCache>}\n     */\n\n    _this.tileCacheForProjection = {};\n    /**\n     * @protected\n     * @type {!Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n     */\n\n    _this.tileGridForProjection = {};\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    _this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.renderReprojectionEdges_ = false;\n    return _this;\n  }\n  /**\n   * @return {boolean} Can expire cache.\n   */\n\n\n  TileImage.prototype.canExpireCache = function () {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      return _super.prototype.canExpireCache.call(this);\n    }\n\n    if (this.tileCache.canExpireCache()) {\n      return true;\n    } else {\n      for (var key in this.tileCacheForProjection) {\n        if (this.tileCacheForProjection[key].canExpireCache()) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\n   */\n\n\n  TileImage.prototype.expireCache = function (projection, usedTiles) {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      _super.prototype.expireCache.call(this, projection, usedTiles);\n\n      return;\n    }\n\n    var usedTileCache = this.getTileCacheForProjection(projection);\n    this.tileCache.expireCache(this.tileCache == usedTileCache ? usedTiles : {});\n\n    for (var id in this.tileCacheForProjection) {\n      var tileCache = this.tileCacheForProjection[id];\n      tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});\n    }\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   */\n\n\n  TileImage.prototype.getGutterForProjection = function (projection) {\n    if (ENABLE_RASTER_REPROJECTION && this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {\n      return 0;\n    } else {\n      return this.getGutter();\n    }\n  };\n  /**\n   * @return {number} Gutter.\n   */\n\n\n  TileImage.prototype.getGutter = function () {\n    return 0;\n  };\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   */\n\n\n  TileImage.prototype.getKey = function () {\n    var key = _super.prototype.getKey.call(this);\n\n    if (!this.getInterpolate()) {\n      key += ':disable-interpolation';\n    }\n\n    return key;\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {boolean} Opaque.\n   */\n\n\n  TileImage.prototype.getOpaque = function (projection) {\n    if (ENABLE_RASTER_REPROJECTION && this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {\n      return false;\n    } else {\n      return _super.prototype.getOpaque.call(this, projection);\n    }\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   */\n\n\n  TileImage.prototype.getTileGridForProjection = function (projection) {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      return _super.prototype.getTileGridForProjection.call(this, projection);\n    }\n\n    var thisProj = this.getProjection();\n\n    if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\n      return this.tileGrid;\n    } else {\n      var projKey = getUid(projection);\n\n      if (!(projKey in this.tileGridForProjection)) {\n        this.tileGridForProjection[projKey] = getTileGridForProjection(projection);\n      }\n\n      return this.tileGridForProjection[projKey];\n    }\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../TileCache.js\").default} Tile cache.\n   */\n\n\n  TileImage.prototype.getTileCacheForProjection = function (projection) {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      return _super.prototype.getTileCacheForProjection.call(this, projection);\n    }\n\n    var thisProj = this.getProjection();\n\n    if (!thisProj || equivalent(thisProj, projection)) {\n      return this.tileCache;\n    } else {\n      var projKey = getUid(projection);\n\n      if (!(projKey in this.tileCacheForProjection)) {\n        this.tileCacheForProjection[projKey] = new TileCache(this.tileCache.highWaterMark);\n      }\n\n      return this.tileCacheForProjection[projKey];\n    }\n  };\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {string} key The key set on the tile.\n   * @return {!ImageTile} Tile.\n   * @private\n   */\n\n\n  TileImage.prototype.createTile_ = function (z, x, y, pixelRatio, projection, key) {\n    var tileCoord = [z, x, y];\n    var urlTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n    var tileUrl = urlTileCoord ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection) : undefined;\n    var tile = new this.tileClass(tileCoord, tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY, tileUrl !== undefined ? tileUrl : '', this.crossOrigin, this.tileLoadFunction, this.tileOptions);\n    tile.key = key;\n    tile.addEventListener(EventType.CHANGE, this.handleTileChange.bind(this));\n    return tile;\n  };\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!(ImageTile|ReprojTile)} Tile.\n   */\n\n\n  TileImage.prototype.getTile = function (z, x, y, pixelRatio, projection) {\n    var sourceProjection = this.getProjection();\n\n    if (!ENABLE_RASTER_REPROJECTION || !sourceProjection || !projection || equivalent(sourceProjection, projection)) {\n      return this.getTileInternal(z, x, y, pixelRatio, sourceProjection || projection);\n    } else {\n      var cache = this.getTileCacheForProjection(projection);\n      var tileCoord = [z, x, y];\n      var tile = void 0;\n      var tileCoordKey = getKey(tileCoord);\n\n      if (cache.containsKey(tileCoordKey)) {\n        tile = cache.get(tileCoordKey);\n      }\n\n      var key = this.getKey();\n\n      if (tile && tile.key == key) {\n        return tile;\n      } else {\n        var sourceTileGrid = this.getTileGridForProjection(sourceProjection);\n        var targetTileGrid = this.getTileGridForProjection(projection);\n        var wrappedTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n        var newTile = new ReprojTile(sourceProjection, sourceTileGrid, projection, targetTileGrid, tileCoord, wrappedTileCoord, this.getTilePixelRatio(pixelRatio), this.getGutter(), function (z, x, y, pixelRatio) {\n          return this.getTileInternal(z, x, y, pixelRatio, sourceProjection);\n        }.bind(this), this.reprojectionErrorThreshold_, this.renderReprojectionEdges_, this.getInterpolate());\n        newTile.key = key;\n\n        if (tile) {\n          newTile.interimTile = tile;\n          newTile.refreshInterimChain();\n          cache.replace(tileCoordKey, newTile);\n        } else {\n          cache.set(tileCoordKey, newTile);\n        }\n\n        return newTile;\n      }\n    }\n  };\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {!import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!(ImageTile|ReprojTile)} Tile.\n   * @protected\n   */\n\n\n  TileImage.prototype.getTileInternal = function (z, x, y, pixelRatio, projection) {\n    var tile = null;\n    var tileCoordKey = getKeyZXY(z, x, y);\n    var key = this.getKey();\n\n    if (!this.tileCache.containsKey(tileCoordKey)) {\n      tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n      this.tileCache.set(tileCoordKey, tile);\n    } else {\n      tile = this.tileCache.get(tileCoordKey);\n\n      if (tile.key != key) {\n        // The source's params changed. If the tile has an interim tile and if we\n        // can use it then we use it. Otherwise we create a new tile.  In both\n        // cases we attempt to assign an interim tile to the new tile.\n        var interimTile = tile;\n        tile = this.createTile_(z, x, y, pixelRatio, projection, key); //make the new tile the head of the list,\n\n        if (interimTile.getState() == TileState.IDLE) {\n          //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it\n          tile.interimTile = interimTile.interimTile;\n        } else {\n          tile.interimTile = interimTile;\n        }\n\n        tile.refreshInterimChain();\n        this.tileCache.replace(tileCoordKey, tile);\n      }\n    }\n\n    return tile;\n  };\n  /**\n   * Sets whether to render reprojection edges or not (usually for debugging).\n   * @param {boolean} render Render the edges.\n   * @api\n   */\n\n\n  TileImage.prototype.setRenderReprojectionEdges = function (render) {\n    if (!ENABLE_RASTER_REPROJECTION || this.renderReprojectionEdges_ == render) {\n      return;\n    }\n\n    this.renderReprojectionEdges_ = render;\n\n    for (var id in this.tileCacheForProjection) {\n      this.tileCacheForProjection[id].clear();\n    }\n\n    this.changed();\n  };\n  /**\n   * Sets the tile grid to use when reprojecting the tiles to the given\n   * projection instead of the default tile grid for the projection.\n   *\n   * This can be useful when the default tile grid cannot be created\n   * (e.g. projection has no extent defined) or\n   * for optimization reasons (custom tile size, resolutions, ...).\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tilegrid Tile grid to use for the projection.\n   * @api\n   */\n\n\n  TileImage.prototype.setTileGridForProjection = function (projection, tilegrid) {\n    if (ENABLE_RASTER_REPROJECTION) {\n      var proj = getProjection(projection);\n\n      if (proj) {\n        var projKey = getUid(proj);\n\n        if (!(projKey in this.tileGridForProjection)) {\n          this.tileGridForProjection[projKey] = tilegrid;\n        }\n      }\n    }\n  };\n\n  return TileImage;\n}(UrlTile);\n/**\n * @param {ImageTile} imageTile Image tile.\n * @param {string} src Source.\n */\n\n\nfunction defaultTileLoadFunction(imageTile, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */\n  imageTile.getImage().src = src;\n}\n\nexport default TileImage;","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","EventType","ImageTile","ReprojTile","TileCache","TileState","UrlTile","ENABLE_RASTER_REPROJECTION","equivalent","get","getProjection","getKey","getKeyZXY","getForProjection","getTileGridForProjection","getUid","TileImage","_super","options","_this","interpolate","imageSmoothing","undefined","attributions","cacheSize","opaque","projection","state","tileGrid","tileLoadFunction","defaultTileLoadFunction","tilePixelRatio","tileUrlFunction","url","urls","wrapX","transition","key","attributionsCollapsible","zDirection","crossOrigin","tileClass","tileCacheForProjection","tileGridForProjection","reprojectionErrorThreshold_","reprojectionErrorThreshold","renderReprojectionEdges_","canExpireCache","tileCache","expireCache","usedTiles","usedTileCache","getTileCacheForProjection","id","getGutterForProjection","getGutter","getInterpolate","getOpaque","thisProj","projKey","highWaterMark","createTile_","z","x","y","pixelRatio","tileCoord","urlTileCoord","getTileCoordForTileUrlFunction","tileUrl","tile","IDLE","EMPTY","tileOptions","addEventListener","CHANGE","handleTileChange","bind","getTile","sourceProjection","getTileInternal","cache","tileCoordKey","containsKey","sourceTileGrid","targetTileGrid","wrappedTileCoord","newTile","getTilePixelRatio","interimTile","refreshInterimChain","replace","set","getState","setRenderReprojectionEdges","render","clear","changed","setTileGridForProjection","tilegrid","proj","imageTile","src","getImage"],"sources":["/home/asura/github/smartcity/node_modules/ol/source/TileImage.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/source/TileImage\n */\nimport EventType from '../events/EventType.js';\nimport ImageTile from '../ImageTile.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport UrlTile from './UrlTile.js';\nimport { ENABLE_RASTER_REPROJECTION } from '../reproj/common.js';\nimport { equivalent, get as getProjection } from '../proj.js';\nimport { getKey, getKeyZXY } from '../tilecoord.js';\nimport { getForProjection as getTileGridForProjection } from '../tilegrid.js';\nimport { getUid } from '../util.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [imageSmoothing=true] Deprecated.  Use the `interpolate` option instead.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"./Source.js\").State} [state] Source state.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile\n * service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {Array<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to\n * request out-of-bounds tiles from the server. When set to `false`, only one\n * world will be rendered. When set to `true`, tiles will be requested for one\n * world only, but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [key] Optional tile key for proper cache fetching\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n/**\n * @classdesc\n * Base class for sources providing images divided into a tile grid.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\nvar TileImage = /** @class */ (function (_super) {\n    __extends(TileImage, _super);\n    /**\n     * @param {!Options} options Image tile options.\n     */\n    function TileImage(options) {\n        var _this = this;\n        var interpolate = options.imageSmoothing !== undefined ? options.imageSmoothing : true;\n        if (options.interpolate !== undefined) {\n            interpolate = options.interpolate;\n        }\n        _this = _super.call(this, {\n            attributions: options.attributions,\n            cacheSize: options.cacheSize,\n            opaque: options.opaque,\n            projection: options.projection,\n            state: options.state,\n            tileGrid: options.tileGrid,\n            tileLoadFunction: options.tileLoadFunction\n                ? options.tileLoadFunction\n                : defaultTileLoadFunction,\n            tilePixelRatio: options.tilePixelRatio,\n            tileUrlFunction: options.tileUrlFunction,\n            url: options.url,\n            urls: options.urls,\n            wrapX: options.wrapX,\n            transition: options.transition,\n            interpolate: interpolate,\n            key: options.key,\n            attributionsCollapsible: options.attributionsCollapsible,\n            zDirection: options.zDirection,\n        }) || this;\n        /**\n         * @protected\n         * @type {?string}\n         */\n        _this.crossOrigin =\n            options.crossOrigin !== undefined ? options.crossOrigin : null;\n        /**\n         * @protected\n         * @type {typeof ImageTile}\n         */\n        _this.tileClass =\n            options.tileClass !== undefined ? options.tileClass : ImageTile;\n        /**\n         * @protected\n         * @type {!Object<string, TileCache>}\n         */\n        _this.tileCacheForProjection = {};\n        /**\n         * @protected\n         * @type {!Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n         */\n        _this.tileGridForProjection = {};\n        /**\n         * @private\n         * @type {number|undefined}\n         */\n        _this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.renderReprojectionEdges_ = false;\n        return _this;\n    }\n    /**\n     * @return {boolean} Can expire cache.\n     */\n    TileImage.prototype.canExpireCache = function () {\n        if (!ENABLE_RASTER_REPROJECTION) {\n            return _super.prototype.canExpireCache.call(this);\n        }\n        if (this.tileCache.canExpireCache()) {\n            return true;\n        }\n        else {\n            for (var key in this.tileCacheForProjection) {\n                if (this.tileCacheForProjection[key].canExpireCache()) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @param {!Object<string, boolean>} usedTiles Used tiles.\n     */\n    TileImage.prototype.expireCache = function (projection, usedTiles) {\n        if (!ENABLE_RASTER_REPROJECTION) {\n            _super.prototype.expireCache.call(this, projection, usedTiles);\n            return;\n        }\n        var usedTileCache = this.getTileCacheForProjection(projection);\n        this.tileCache.expireCache(this.tileCache == usedTileCache ? usedTiles : {});\n        for (var id in this.tileCacheForProjection) {\n            var tileCache = this.tileCacheForProjection[id];\n            tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});\n        }\n    };\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {number} Gutter.\n     */\n    TileImage.prototype.getGutterForProjection = function (projection) {\n        if (ENABLE_RASTER_REPROJECTION &&\n            this.getProjection() &&\n            projection &&\n            !equivalent(this.getProjection(), projection)) {\n            return 0;\n        }\n        else {\n            return this.getGutter();\n        }\n    };\n    /**\n     * @return {number} Gutter.\n     */\n    TileImage.prototype.getGutter = function () {\n        return 0;\n    };\n    /**\n     * Return the key to be used for all tiles in the source.\n     * @return {string} The key for all tiles.\n     */\n    TileImage.prototype.getKey = function () {\n        var key = _super.prototype.getKey.call(this);\n        if (!this.getInterpolate()) {\n            key += ':disable-interpolation';\n        }\n        return key;\n    };\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {boolean} Opaque.\n     */\n    TileImage.prototype.getOpaque = function (projection) {\n        if (ENABLE_RASTER_REPROJECTION &&\n            this.getProjection() &&\n            projection &&\n            !equivalent(this.getProjection(), projection)) {\n            return false;\n        }\n        else {\n            return _super.prototype.getOpaque.call(this, projection);\n        }\n    };\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n     */\n    TileImage.prototype.getTileGridForProjection = function (projection) {\n        if (!ENABLE_RASTER_REPROJECTION) {\n            return _super.prototype.getTileGridForProjection.call(this, projection);\n        }\n        var thisProj = this.getProjection();\n        if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\n            return this.tileGrid;\n        }\n        else {\n            var projKey = getUid(projection);\n            if (!(projKey in this.tileGridForProjection)) {\n                this.tileGridForProjection[projKey] =\n                    getTileGridForProjection(projection);\n            }\n            return this.tileGridForProjection[projKey];\n        }\n    };\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {import(\"../TileCache.js\").default} Tile cache.\n     */\n    TileImage.prototype.getTileCacheForProjection = function (projection) {\n        if (!ENABLE_RASTER_REPROJECTION) {\n            return _super.prototype.getTileCacheForProjection.call(this, projection);\n        }\n        var thisProj = this.getProjection();\n        if (!thisProj || equivalent(thisProj, projection)) {\n            return this.tileCache;\n        }\n        else {\n            var projKey = getUid(projection);\n            if (!(projKey in this.tileCacheForProjection)) {\n                this.tileCacheForProjection[projKey] = new TileCache(this.tileCache.highWaterMark);\n            }\n            return this.tileCacheForProjection[projKey];\n        }\n    };\n    /**\n     * @param {number} z Tile coordinate z.\n     * @param {number} x Tile coordinate x.\n     * @param {number} y Tile coordinate y.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @param {string} key The key set on the tile.\n     * @return {!ImageTile} Tile.\n     * @private\n     */\n    TileImage.prototype.createTile_ = function (z, x, y, pixelRatio, projection, key) {\n        var tileCoord = [z, x, y];\n        var urlTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n        var tileUrl = urlTileCoord\n            ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection)\n            : undefined;\n        var tile = new this.tileClass(tileCoord, tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY, tileUrl !== undefined ? tileUrl : '', this.crossOrigin, this.tileLoadFunction, this.tileOptions);\n        tile.key = key;\n        tile.addEventListener(EventType.CHANGE, this.handleTileChange.bind(this));\n        return tile;\n    };\n    /**\n     * @param {number} z Tile coordinate z.\n     * @param {number} x Tile coordinate x.\n     * @param {number} y Tile coordinate y.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {!(ImageTile|ReprojTile)} Tile.\n     */\n    TileImage.prototype.getTile = function (z, x, y, pixelRatio, projection) {\n        var sourceProjection = this.getProjection();\n        if (!ENABLE_RASTER_REPROJECTION ||\n            !sourceProjection ||\n            !projection ||\n            equivalent(sourceProjection, projection)) {\n            return this.getTileInternal(z, x, y, pixelRatio, sourceProjection || projection);\n        }\n        else {\n            var cache = this.getTileCacheForProjection(projection);\n            var tileCoord = [z, x, y];\n            var tile = void 0;\n            var tileCoordKey = getKey(tileCoord);\n            if (cache.containsKey(tileCoordKey)) {\n                tile = cache.get(tileCoordKey);\n            }\n            var key = this.getKey();\n            if (tile && tile.key == key) {\n                return tile;\n            }\n            else {\n                var sourceTileGrid = this.getTileGridForProjection(sourceProjection);\n                var targetTileGrid = this.getTileGridForProjection(projection);\n                var wrappedTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n                var newTile = new ReprojTile(sourceProjection, sourceTileGrid, projection, targetTileGrid, tileCoord, wrappedTileCoord, this.getTilePixelRatio(pixelRatio), this.getGutter(), function (z, x, y, pixelRatio) {\n                    return this.getTileInternal(z, x, y, pixelRatio, sourceProjection);\n                }.bind(this), this.reprojectionErrorThreshold_, this.renderReprojectionEdges_, this.getInterpolate());\n                newTile.key = key;\n                if (tile) {\n                    newTile.interimTile = tile;\n                    newTile.refreshInterimChain();\n                    cache.replace(tileCoordKey, newTile);\n                }\n                else {\n                    cache.set(tileCoordKey, newTile);\n                }\n                return newTile;\n            }\n        }\n    };\n    /**\n     * @param {number} z Tile coordinate z.\n     * @param {number} x Tile coordinate x.\n     * @param {number} y Tile coordinate y.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {!import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {!(ImageTile|ReprojTile)} Tile.\n     * @protected\n     */\n    TileImage.prototype.getTileInternal = function (z, x, y, pixelRatio, projection) {\n        var tile = null;\n        var tileCoordKey = getKeyZXY(z, x, y);\n        var key = this.getKey();\n        if (!this.tileCache.containsKey(tileCoordKey)) {\n            tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n            this.tileCache.set(tileCoordKey, tile);\n        }\n        else {\n            tile = this.tileCache.get(tileCoordKey);\n            if (tile.key != key) {\n                // The source's params changed. If the tile has an interim tile and if we\n                // can use it then we use it. Otherwise we create a new tile.  In both\n                // cases we attempt to assign an interim tile to the new tile.\n                var interimTile = tile;\n                tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n                //make the new tile the head of the list,\n                if (interimTile.getState() == TileState.IDLE) {\n                    //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it\n                    tile.interimTile = interimTile.interimTile;\n                }\n                else {\n                    tile.interimTile = interimTile;\n                }\n                tile.refreshInterimChain();\n                this.tileCache.replace(tileCoordKey, tile);\n            }\n        }\n        return tile;\n    };\n    /**\n     * Sets whether to render reprojection edges or not (usually for debugging).\n     * @param {boolean} render Render the edges.\n     * @api\n     */\n    TileImage.prototype.setRenderReprojectionEdges = function (render) {\n        if (!ENABLE_RASTER_REPROJECTION ||\n            this.renderReprojectionEdges_ == render) {\n            return;\n        }\n        this.renderReprojectionEdges_ = render;\n        for (var id in this.tileCacheForProjection) {\n            this.tileCacheForProjection[id].clear();\n        }\n        this.changed();\n    };\n    /**\n     * Sets the tile grid to use when reprojecting the tiles to the given\n     * projection instead of the default tile grid for the projection.\n     *\n     * This can be useful when the default tile grid cannot be created\n     * (e.g. projection has no extent defined) or\n     * for optimization reasons (custom tile size, resolutions, ...).\n     *\n     * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n     * @param {import(\"../tilegrid/TileGrid.js\").default} tilegrid Tile grid to use for the projection.\n     * @api\n     */\n    TileImage.prototype.setTileGridForProjection = function (projection, tilegrid) {\n        if (ENABLE_RASTER_REPROJECTION) {\n            var proj = getProjection(projection);\n            if (proj) {\n                var projKey = getUid(proj);\n                if (!(projKey in this.tileGridForProjection)) {\n                    this.tileGridForProjection[projKey] = tilegrid;\n                }\n            }\n        }\n    };\n    return TileImage;\n}(UrlTile));\n/**\n * @param {ImageTile} imageTile Image tile.\n * @param {string} src Source.\n */\nfunction defaultTileLoadFunction(imageTile, src) {\n    /** @type {HTMLImageElement|HTMLVideoElement} */ (imageTile.getImage()).src =\n        src;\n}\nexport default TileImage;\n"],"mappings":"AAAA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA6B,YAAY;EACrD,IAAIC,aAAa,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;IAChCF,aAAa,GAAGG,MAAM,CAACC,cAAP,IACX;MAAEC,SAAS,EAAE;IAAb,aAA6BC,KAA7B,IAAsC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;MAAED,CAAC,CAACI,SAAF,GAAcH,CAAd;IAAkB,CAD/D,IAEZ,UAAUD,CAAV,EAAaC,CAAb,EAAgB;MAAE,KAAK,IAAIK,CAAT,IAAcL,CAAd,EAAiB,IAAIC,MAAM,CAACK,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EAAgDN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;IAAc,CAFrG;;IAGA,OAAOP,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAApB;EACH,CALD;;EAMA,OAAO,UAAUD,CAAV,EAAaC,CAAb,EAAgB;IACnB,IAAI,OAAOA,CAAP,KAAa,UAAb,IAA2BA,CAAC,KAAK,IAArC,EACI,MAAM,IAAIS,SAAJ,CAAc,yBAAyBC,MAAM,CAACV,CAAD,CAA/B,GAAqC,+BAAnD,CAAN;IACJF,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAAb;;IACA,SAASW,EAAT,GAAc;MAAE,KAAKC,WAAL,GAAmBb,CAAnB;IAAuB;;IACvCA,CAAC,CAACO,SAAF,GAAcN,CAAC,KAAK,IAAN,GAAaC,MAAM,CAACY,MAAP,CAAcb,CAAd,CAAb,IAAiCW,EAAE,CAACL,SAAH,GAAeN,CAAC,CAACM,SAAjB,EAA4B,IAAIK,EAAJ,EAA7D,CAAd;EACH,CAND;AAOH,CAd2C,EAA5C;AAeA;AACA;AACA;;;AACA,OAAOG,SAAP,MAAsB,wBAAtB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,SAASC,0BAAT,QAA2C,qBAA3C;AACA,SAASC,UAAT,EAAqBC,GAAG,IAAIC,aAA5B,QAAiD,YAAjD;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,iBAAlC;AACA,SAASC,gBAAgB,IAAIC,wBAA7B,QAA6D,gBAA7D;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,SAAS;AAAG;AAAe,UAAUC,MAAV,EAAkB;EAC7CjC,SAAS,CAACgC,SAAD,EAAYC,MAAZ,CAAT;EACA;AACJ;AACA;;;EACI,SAASD,SAAT,CAAmBE,OAAnB,EAA4B;IACxB,IAAIC,KAAK,GAAG,IAAZ;;IACA,IAAIC,WAAW,GAAGF,OAAO,CAACG,cAAR,KAA2BC,SAA3B,GAAuCJ,OAAO,CAACG,cAA/C,GAAgE,IAAlF;;IACA,IAAIH,OAAO,CAACE,WAAR,KAAwBE,SAA5B,EAAuC;MACnCF,WAAW,GAAGF,OAAO,CAACE,WAAtB;IACH;;IACDD,KAAK,GAAGF,MAAM,CAACtB,IAAP,CAAY,IAAZ,EAAkB;MACtB4B,YAAY,EAAEL,OAAO,CAACK,YADA;MAEtBC,SAAS,EAAEN,OAAO,CAACM,SAFG;MAGtBC,MAAM,EAAEP,OAAO,CAACO,MAHM;MAItBC,UAAU,EAAER,OAAO,CAACQ,UAJE;MAKtBC,KAAK,EAAET,OAAO,CAACS,KALO;MAMtBC,QAAQ,EAAEV,OAAO,CAACU,QANI;MAOtBC,gBAAgB,EAAEX,OAAO,CAACW,gBAAR,GACZX,OAAO,CAACW,gBADI,GAEZC,uBATgB;MAUtBC,cAAc,EAAEb,OAAO,CAACa,cAVF;MAWtBC,eAAe,EAAEd,OAAO,CAACc,eAXH;MAYtBC,GAAG,EAAEf,OAAO,CAACe,GAZS;MAatBC,IAAI,EAAEhB,OAAO,CAACgB,IAbQ;MActBC,KAAK,EAAEjB,OAAO,CAACiB,KAdO;MAetBC,UAAU,EAAElB,OAAO,CAACkB,UAfE;MAgBtBhB,WAAW,EAAEA,WAhBS;MAiBtBiB,GAAG,EAAEnB,OAAO,CAACmB,GAjBS;MAkBtBC,uBAAuB,EAAEpB,OAAO,CAACoB,uBAlBX;MAmBtBC,UAAU,EAAErB,OAAO,CAACqB;IAnBE,CAAlB,KAoBF,IApBN;IAqBA;AACR;AACA;AACA;;IACQpB,KAAK,CAACqB,WAAN,GACItB,OAAO,CAACsB,WAAR,KAAwBlB,SAAxB,GAAoCJ,OAAO,CAACsB,WAA5C,GAA0D,IAD9D;IAEA;AACR;AACA;AACA;;IACQrB,KAAK,CAACsB,SAAN,GACIvB,OAAO,CAACuB,SAAR,KAAsBnB,SAAtB,GAAkCJ,OAAO,CAACuB,SAA1C,GAAsDvC,SAD1D;IAEA;AACR;AACA;AACA;;IACQiB,KAAK,CAACuB,sBAAN,GAA+B,EAA/B;IACA;AACR;AACA;AACA;;IACQvB,KAAK,CAACwB,qBAAN,GAA8B,EAA9B;IACA;AACR;AACA;AACA;;IACQxB,KAAK,CAACyB,2BAAN,GAAoC1B,OAAO,CAAC2B,0BAA5C;IACA;AACR;AACA;AACA;;IACQ1B,KAAK,CAAC2B,wBAAN,GAAiC,KAAjC;IACA,OAAO3B,KAAP;EACH;EACD;AACJ;AACA;;;EACIH,SAAS,CAACvB,SAAV,CAAoBsD,cAApB,GAAqC,YAAY;IAC7C,IAAI,CAACxC,0BAAL,EAAiC;MAC7B,OAAOU,MAAM,CAACxB,SAAP,CAAiBsD,cAAjB,CAAgCpD,IAAhC,CAAqC,IAArC,CAAP;IACH;;IACD,IAAI,KAAKqD,SAAL,CAAeD,cAAf,EAAJ,EAAqC;MACjC,OAAO,IAAP;IACH,CAFD,MAGK;MACD,KAAK,IAAIV,GAAT,IAAgB,KAAKK,sBAArB,EAA6C;QACzC,IAAI,KAAKA,sBAAL,CAA4BL,GAA5B,EAAiCU,cAAjC,EAAJ,EAAuD;UACnD,OAAO,IAAP;QACH;MACJ;IACJ;;IACD,OAAO,KAAP;EACH,CAfD;EAgBA;AACJ;AACA;AACA;;;EACI/B,SAAS,CAACvB,SAAV,CAAoBwD,WAApB,GAAkC,UAAUvB,UAAV,EAAsBwB,SAAtB,EAAiC;IAC/D,IAAI,CAAC3C,0BAAL,EAAiC;MAC7BU,MAAM,CAACxB,SAAP,CAAiBwD,WAAjB,CAA6BtD,IAA7B,CAAkC,IAAlC,EAAwC+B,UAAxC,EAAoDwB,SAApD;;MACA;IACH;;IACD,IAAIC,aAAa,GAAG,KAAKC,yBAAL,CAA+B1B,UAA/B,CAApB;IACA,KAAKsB,SAAL,CAAeC,WAAf,CAA2B,KAAKD,SAAL,IAAkBG,aAAlB,GAAkCD,SAAlC,GAA8C,EAAzE;;IACA,KAAK,IAAIG,EAAT,IAAe,KAAKX,sBAApB,EAA4C;MACxC,IAAIM,SAAS,GAAG,KAAKN,sBAAL,CAA4BW,EAA5B,CAAhB;MACAL,SAAS,CAACC,WAAV,CAAsBD,SAAS,IAAIG,aAAb,GAA6BD,SAA7B,GAAyC,EAA/D;IACH;EACJ,CAXD;EAYA;AACJ;AACA;AACA;;;EACIlC,SAAS,CAACvB,SAAV,CAAoB6D,sBAApB,GAA6C,UAAU5B,UAAV,EAAsB;IAC/D,IAAInB,0BAA0B,IAC1B,KAAKG,aAAL,EADA,IAEAgB,UAFA,IAGA,CAAClB,UAAU,CAAC,KAAKE,aAAL,EAAD,EAAuBgB,UAAvB,CAHf,EAGmD;MAC/C,OAAO,CAAP;IACH,CALD,MAMK;MACD,OAAO,KAAK6B,SAAL,EAAP;IACH;EACJ,CAVD;EAWA;AACJ;AACA;;;EACIvC,SAAS,CAACvB,SAAV,CAAoB8D,SAApB,GAAgC,YAAY;IACxC,OAAO,CAAP;EACH,CAFD;EAGA;AACJ;AACA;AACA;;;EACIvC,SAAS,CAACvB,SAAV,CAAoBkB,MAApB,GAA6B,YAAY;IACrC,IAAI0B,GAAG,GAAGpB,MAAM,CAACxB,SAAP,CAAiBkB,MAAjB,CAAwBhB,IAAxB,CAA6B,IAA7B,CAAV;;IACA,IAAI,CAAC,KAAK6D,cAAL,EAAL,EAA4B;MACxBnB,GAAG,IAAI,wBAAP;IACH;;IACD,OAAOA,GAAP;EACH,CAND;EAOA;AACJ;AACA;AACA;;;EACIrB,SAAS,CAACvB,SAAV,CAAoBgE,SAApB,GAAgC,UAAU/B,UAAV,EAAsB;IAClD,IAAInB,0BAA0B,IAC1B,KAAKG,aAAL,EADA,IAEAgB,UAFA,IAGA,CAAClB,UAAU,CAAC,KAAKE,aAAL,EAAD,EAAuBgB,UAAvB,CAHf,EAGmD;MAC/C,OAAO,KAAP;IACH,CALD,MAMK;MACD,OAAOT,MAAM,CAACxB,SAAP,CAAiBgE,SAAjB,CAA2B9D,IAA3B,CAAgC,IAAhC,EAAsC+B,UAAtC,CAAP;IACH;EACJ,CAVD;EAWA;AACJ;AACA;AACA;;;EACIV,SAAS,CAACvB,SAAV,CAAoBqB,wBAApB,GAA+C,UAAUY,UAAV,EAAsB;IACjE,IAAI,CAACnB,0BAAL,EAAiC;MAC7B,OAAOU,MAAM,CAACxB,SAAP,CAAiBqB,wBAAjB,CAA0CnB,IAA1C,CAA+C,IAA/C,EAAqD+B,UAArD,CAAP;IACH;;IACD,IAAIgC,QAAQ,GAAG,KAAKhD,aAAL,EAAf;;IACA,IAAI,KAAKkB,QAAL,KAAkB,CAAC8B,QAAD,IAAalD,UAAU,CAACkD,QAAD,EAAWhC,UAAX,CAAzC,CAAJ,EAAsE;MAClE,OAAO,KAAKE,QAAZ;IACH,CAFD,MAGK;MACD,IAAI+B,OAAO,GAAG5C,MAAM,CAACW,UAAD,CAApB;;MACA,IAAI,EAAEiC,OAAO,IAAI,KAAKhB,qBAAlB,CAAJ,EAA8C;QAC1C,KAAKA,qBAAL,CAA2BgB,OAA3B,IACI7C,wBAAwB,CAACY,UAAD,CAD5B;MAEH;;MACD,OAAO,KAAKiB,qBAAL,CAA2BgB,OAA3B,CAAP;IACH;EACJ,CAhBD;EAiBA;AACJ;AACA;AACA;;;EACI3C,SAAS,CAACvB,SAAV,CAAoB2D,yBAApB,GAAgD,UAAU1B,UAAV,EAAsB;IAClE,IAAI,CAACnB,0BAAL,EAAiC;MAC7B,OAAOU,MAAM,CAACxB,SAAP,CAAiB2D,yBAAjB,CAA2CzD,IAA3C,CAAgD,IAAhD,EAAsD+B,UAAtD,CAAP;IACH;;IACD,IAAIgC,QAAQ,GAAG,KAAKhD,aAAL,EAAf;;IACA,IAAI,CAACgD,QAAD,IAAalD,UAAU,CAACkD,QAAD,EAAWhC,UAAX,CAA3B,EAAmD;MAC/C,OAAO,KAAKsB,SAAZ;IACH,CAFD,MAGK;MACD,IAAIW,OAAO,GAAG5C,MAAM,CAACW,UAAD,CAApB;;MACA,IAAI,EAAEiC,OAAO,IAAI,KAAKjB,sBAAlB,CAAJ,EAA+C;QAC3C,KAAKA,sBAAL,CAA4BiB,OAA5B,IAAuC,IAAIvD,SAAJ,CAAc,KAAK4C,SAAL,CAAeY,aAA7B,CAAvC;MACH;;MACD,OAAO,KAAKlB,sBAAL,CAA4BiB,OAA5B,CAAP;IACH;EACJ,CAfD;EAgBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI3C,SAAS,CAACvB,SAAV,CAAoBoE,WAApB,GAAkC,UAAUC,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,EAAmBC,UAAnB,EAA+BvC,UAA/B,EAA2CW,GAA3C,EAAgD;IAC9E,IAAI6B,SAAS,GAAG,CAACJ,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAhB;IACA,IAAIG,YAAY,GAAG,KAAKC,8BAAL,CAAoCF,SAApC,EAA+CxC,UAA/C,CAAnB;IACA,IAAI2C,OAAO,GAAGF,YAAY,GACpB,KAAKnC,eAAL,CAAqBmC,YAArB,EAAmCF,UAAnC,EAA+CvC,UAA/C,CADoB,GAEpBJ,SAFN;IAGA,IAAIgD,IAAI,GAAG,IAAI,KAAK7B,SAAT,CAAmByB,SAAnB,EAA8BG,OAAO,KAAK/C,SAAZ,GAAwBjB,SAAS,CAACkE,IAAlC,GAAyClE,SAAS,CAACmE,KAAjF,EAAwFH,OAAO,KAAK/C,SAAZ,GAAwB+C,OAAxB,GAAkC,EAA1H,EAA8H,KAAK7B,WAAnI,EAAgJ,KAAKX,gBAArJ,EAAuK,KAAK4C,WAA5K,CAAX;IACAH,IAAI,CAACjC,GAAL,GAAWA,GAAX;IACAiC,IAAI,CAACI,gBAAL,CAAsBzE,SAAS,CAAC0E,MAAhC,EAAwC,KAAKC,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAxC;IACA,OAAOP,IAAP;EACH,CAVD;EAWA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACItD,SAAS,CAACvB,SAAV,CAAoBqF,OAApB,GAA8B,UAAUhB,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,EAAmBC,UAAnB,EAA+BvC,UAA/B,EAA2C;IACrE,IAAIqD,gBAAgB,GAAG,KAAKrE,aAAL,EAAvB;;IACA,IAAI,CAACH,0BAAD,IACA,CAACwE,gBADD,IAEA,CAACrD,UAFD,IAGAlB,UAAU,CAACuE,gBAAD,EAAmBrD,UAAnB,CAHd,EAG8C;MAC1C,OAAO,KAAKsD,eAAL,CAAqBlB,CAArB,EAAwBC,CAAxB,EAA2BC,CAA3B,EAA8BC,UAA9B,EAA0Cc,gBAAgB,IAAIrD,UAA9D,CAAP;IACH,CALD,MAMK;MACD,IAAIuD,KAAK,GAAG,KAAK7B,yBAAL,CAA+B1B,UAA/B,CAAZ;MACA,IAAIwC,SAAS,GAAG,CAACJ,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAhB;MACA,IAAIM,IAAI,GAAG,KAAK,CAAhB;MACA,IAAIY,YAAY,GAAGvE,MAAM,CAACuD,SAAD,CAAzB;;MACA,IAAIe,KAAK,CAACE,WAAN,CAAkBD,YAAlB,CAAJ,EAAqC;QACjCZ,IAAI,GAAGW,KAAK,CAACxE,GAAN,CAAUyE,YAAV,CAAP;MACH;;MACD,IAAI7C,GAAG,GAAG,KAAK1B,MAAL,EAAV;;MACA,IAAI2D,IAAI,IAAIA,IAAI,CAACjC,GAAL,IAAYA,GAAxB,EAA6B;QACzB,OAAOiC,IAAP;MACH,CAFD,MAGK;QACD,IAAIc,cAAc,GAAG,KAAKtE,wBAAL,CAA8BiE,gBAA9B,CAArB;QACA,IAAIM,cAAc,GAAG,KAAKvE,wBAAL,CAA8BY,UAA9B,CAArB;QACA,IAAI4D,gBAAgB,GAAG,KAAKlB,8BAAL,CAAoCF,SAApC,EAA+CxC,UAA/C,CAAvB;QACA,IAAI6D,OAAO,GAAG,IAAIpF,UAAJ,CAAe4E,gBAAf,EAAiCK,cAAjC,EAAiD1D,UAAjD,EAA6D2D,cAA7D,EAA6EnB,SAA7E,EAAwFoB,gBAAxF,EAA0G,KAAKE,iBAAL,CAAuBvB,UAAvB,CAA1G,EAA8I,KAAKV,SAAL,EAA9I,EAAgK,UAAUO,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,EAAmBC,UAAnB,EAA+B;UACzM,OAAO,KAAKe,eAAL,CAAqBlB,CAArB,EAAwBC,CAAxB,EAA2BC,CAA3B,EAA8BC,UAA9B,EAA0Cc,gBAA1C,CAAP;QACH,CAF6K,CAE5KF,IAF4K,CAEvK,IAFuK,CAAhK,EAEA,KAAKjC,2BAFL,EAEkC,KAAKE,wBAFvC,EAEiE,KAAKU,cAAL,EAFjE,CAAd;QAGA+B,OAAO,CAAClD,GAAR,GAAcA,GAAd;;QACA,IAAIiC,IAAJ,EAAU;UACNiB,OAAO,CAACE,WAAR,GAAsBnB,IAAtB;UACAiB,OAAO,CAACG,mBAAR;UACAT,KAAK,CAACU,OAAN,CAAcT,YAAd,EAA4BK,OAA5B;QACH,CAJD,MAKK;UACDN,KAAK,CAACW,GAAN,CAAUV,YAAV,EAAwBK,OAAxB;QACH;;QACD,OAAOA,OAAP;MACH;IACJ;EACJ,CAvCD;EAwCA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIvE,SAAS,CAACvB,SAAV,CAAoBuF,eAApB,GAAsC,UAAUlB,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,EAAmBC,UAAnB,EAA+BvC,UAA/B,EAA2C;IAC7E,IAAI4C,IAAI,GAAG,IAAX;IACA,IAAIY,YAAY,GAAGtE,SAAS,CAACkD,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAA5B;IACA,IAAI3B,GAAG,GAAG,KAAK1B,MAAL,EAAV;;IACA,IAAI,CAAC,KAAKqC,SAAL,CAAemC,WAAf,CAA2BD,YAA3B,CAAL,EAA+C;MAC3CZ,IAAI,GAAG,KAAKT,WAAL,CAAiBC,CAAjB,EAAoBC,CAApB,EAAuBC,CAAvB,EAA0BC,UAA1B,EAAsCvC,UAAtC,EAAkDW,GAAlD,CAAP;MACA,KAAKW,SAAL,CAAe4C,GAAf,CAAmBV,YAAnB,EAAiCZ,IAAjC;IACH,CAHD,MAIK;MACDA,IAAI,GAAG,KAAKtB,SAAL,CAAevC,GAAf,CAAmByE,YAAnB,CAAP;;MACA,IAAIZ,IAAI,CAACjC,GAAL,IAAYA,GAAhB,EAAqB;QACjB;QACA;QACA;QACA,IAAIoD,WAAW,GAAGnB,IAAlB;QACAA,IAAI,GAAG,KAAKT,WAAL,CAAiBC,CAAjB,EAAoBC,CAApB,EAAuBC,CAAvB,EAA0BC,UAA1B,EAAsCvC,UAAtC,EAAkDW,GAAlD,CAAP,CALiB,CAMjB;;QACA,IAAIoD,WAAW,CAACI,QAAZ,MAA0BxF,SAAS,CAACkE,IAAxC,EAA8C;UAC1C;UACAD,IAAI,CAACmB,WAAL,GAAmBA,WAAW,CAACA,WAA/B;QACH,CAHD,MAIK;UACDnB,IAAI,CAACmB,WAAL,GAAmBA,WAAnB;QACH;;QACDnB,IAAI,CAACoB,mBAAL;QACA,KAAK1C,SAAL,CAAe2C,OAAf,CAAuBT,YAAvB,EAAqCZ,IAArC;MACH;IACJ;;IACD,OAAOA,IAAP;EACH,CA7BD;EA8BA;AACJ;AACA;AACA;AACA;;;EACItD,SAAS,CAACvB,SAAV,CAAoBqG,0BAApB,GAAiD,UAAUC,MAAV,EAAkB;IAC/D,IAAI,CAACxF,0BAAD,IACA,KAAKuC,wBAAL,IAAiCiD,MADrC,EAC6C;MACzC;IACH;;IACD,KAAKjD,wBAAL,GAAgCiD,MAAhC;;IACA,KAAK,IAAI1C,EAAT,IAAe,KAAKX,sBAApB,EAA4C;MACxC,KAAKA,sBAAL,CAA4BW,EAA5B,EAAgC2C,KAAhC;IACH;;IACD,KAAKC,OAAL;EACH,CAVD;EAWA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIjF,SAAS,CAACvB,SAAV,CAAoByG,wBAApB,GAA+C,UAAUxE,UAAV,EAAsByE,QAAtB,EAAgC;IAC3E,IAAI5F,0BAAJ,EAAgC;MAC5B,IAAI6F,IAAI,GAAG1F,aAAa,CAACgB,UAAD,CAAxB;;MACA,IAAI0E,IAAJ,EAAU;QACN,IAAIzC,OAAO,GAAG5C,MAAM,CAACqF,IAAD,CAApB;;QACA,IAAI,EAAEzC,OAAO,IAAI,KAAKhB,qBAAlB,CAAJ,EAA8C;UAC1C,KAAKA,qBAAL,CAA2BgB,OAA3B,IAAsCwC,QAAtC;QACH;MACJ;IACJ;EACJ,CAVD;;EAWA,OAAOnF,SAAP;AACH,CAjV8B,CAiV7BV,OAjV6B,CAA/B;AAkVA;AACA;AACA;AACA;;;AACA,SAASwB,uBAAT,CAAiCuE,SAAjC,EAA4CC,GAA5C,EAAiD;EAC7C;EAAkDD,SAAS,CAACE,QAAV,EAAD,CAAuBD,GAAvB,GAC7CA,GAD6C;AAEpD;;AACD,eAAetF,SAAf"},"metadata":{},"sourceType":"module"}