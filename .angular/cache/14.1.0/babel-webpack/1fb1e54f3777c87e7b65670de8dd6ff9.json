{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/control/FullScreen\n */\n\n\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport MapProperty from '../MapProperty.js';\nimport { CLASS_CONTROL, CLASS_UNSELECTABLE, CLASS_UNSUPPORTED } from '../css.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport { replaceNode } from '../dom.js';\nvar events = ['fullscreenchange', 'webkitfullscreenchange', 'MSFullscreenChange'];\n/**\n * @enum {string}\n */\n\nvar FullScreenEventType = {\n  /**\n   * Triggered after the map entered fullscreen.\n   * @event FullScreenEventType#enterfullscreen\n   * @api\n   */\n  ENTERFULLSCREEN: 'enterfullscreen',\n\n  /**\n   * Triggered after the map leave fullscreen.\n   * @event FullScreenEventType#leavefullscreen\n   * @api\n   */\n  LEAVEFULLSCREEN: 'leavefullscreen'\n};\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen', import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen'|import(\"../ObjectEventType\").Types, Return>} FullScreenOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-full-screen'] CSS class name.\n * @property {string|Text|HTMLElement} [label='\\u2922'] Text label to use for the button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string|Text|HTMLElement} [labelActive='\\u00d7'] Text label to use for the\n * button when full-screen is active.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [activeClassName=className + '-true'] CSS class name for the button\n * when full-screen is active.\n * @property {string} [inactiveClassName=className + '-false'] CSS class name for the button\n * when full-screen is inactive.\n * @property {string} [tipLabel='Toggle full-screen'] Text label to use for the button tip.\n * @property {boolean} [keys=false] Full keyboard access.\n * @property {HTMLElement|string} [target] Specify a target if you want the\n * control to be rendered outside of the map's viewport.\n * @property {HTMLElement|string} [source] The element to be displayed\n * fullscreen. When not provided, the element containing the map viewport will\n * be displayed fullscreen.\n */\n\n/**\n * @classdesc\n * Provides a button that when clicked fills up the full screen with the map.\n * The full screen source element is by default the element containing the map viewport unless\n * overridden by providing the `source` option. In which case, the dom\n * element introduced using this parameter will be displayed in full screen.\n *\n * When in full screen mode, a close button is shown to exit full screen mode.\n * The [Fullscreen API](https://www.w3.org/TR/fullscreen/) is used to\n * toggle the map in full screen mode.\n *\n * @fires FullScreenEventType#enterfullscreen\n * @fires FullScreenEventType#leavefullscreen\n * @api\n */\n\nvar FullScreen =\n/** @class */\nfunction (_super) {\n  __extends(FullScreen, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n\n\n  function FullScreen(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      element: document.createElement('div'),\n      target: options.target\n    }) || this;\n    /***\n     * @type {FullScreenOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    _this.on;\n    /***\n     * @type {FullScreenOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    _this.once;\n    /***\n     * @type {FullScreenOnSignature<void>}\n     */\n\n    _this.un;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.keys_ = options.keys !== undefined ? options.keys : false;\n    /**\n     * @private\n     * @type {HTMLElement|string|undefined}\n     */\n\n    _this.source_ = options.source;\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    _this.isInFullscreen_ = false;\n    /**\n     * @private\n     */\n\n    _this.boundHandleMapTargetChange_ = _this.handleMapTargetChange_.bind(_this);\n    /**\n     * @private\n     * @type {string}\n     */\n\n    _this.cssClassName_ = options.className !== undefined ? options.className : 'ol-full-screen';\n    /**\n     * @private\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n\n    _this.documentListeners_ = [];\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n\n    _this.activeClassName_ = options.activeClassName !== undefined ? options.activeClassName.split(' ') : [_this.cssClassName_ + '-true'];\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n\n    _this.inactiveClassName_ = options.inactiveClassName !== undefined ? options.inactiveClassName.split(' ') : [_this.cssClassName_ + '-false'];\n    var label = options.label !== undefined ? options.label : '\\u2922';\n    /**\n     * @private\n     * @type {Text|HTMLElement}\n     */\n\n    _this.labelNode_ = typeof label === 'string' ? document.createTextNode(label) : label;\n    var labelActive = options.labelActive !== undefined ? options.labelActive : '\\u00d7';\n    /**\n     * @private\n     * @type {Text|HTMLElement}\n     */\n\n    _this.labelActiveNode_ = typeof labelActive === 'string' ? document.createTextNode(labelActive) : labelActive;\n    var tipLabel = options.tipLabel ? options.tipLabel : 'Toggle full-screen';\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n\n    _this.button_ = document.createElement('button');\n    _this.button_.title = tipLabel;\n\n    _this.button_.setAttribute('type', 'button');\n\n    _this.button_.appendChild(_this.labelNode_);\n\n    _this.button_.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this), false);\n\n    _this.setClassName_(_this.button_, _this.isInFullscreen_);\n\n    _this.element.className = \"\".concat(_this.cssClassName_, \" \").concat(CLASS_UNSELECTABLE, \" \").concat(CLASS_CONTROL);\n\n    _this.element.appendChild(_this.button_);\n\n    return _this;\n  }\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n\n\n  FullScreen.prototype.handleClick_ = function (event) {\n    event.preventDefault();\n    this.handleFullScreen_();\n  };\n  /**\n   * @private\n   */\n\n\n  FullScreen.prototype.handleFullScreen_ = function () {\n    var map = this.getMap();\n\n    if (!map) {\n      return;\n    }\n\n    var doc = map.getOwnerDocument();\n\n    if (!isFullScreenSupported(doc)) {\n      return;\n    }\n\n    if (isFullScreen(doc)) {\n      exitFullScreen(doc);\n    } else {\n      var element = void 0;\n\n      if (this.source_) {\n        element = typeof this.source_ === 'string' ? doc.getElementById(this.source_) : this.source_;\n      } else {\n        element = map.getTargetElement();\n      }\n\n      if (this.keys_) {\n        requestFullScreenWithKeys(element);\n      } else {\n        requestFullScreen(element);\n      }\n    }\n  };\n  /**\n   * @private\n   */\n\n\n  FullScreen.prototype.handleFullScreenChange_ = function () {\n    var map = this.getMap();\n\n    if (!map) {\n      return;\n    }\n\n    var wasInFullscreen = this.isInFullscreen_;\n    this.isInFullscreen_ = isFullScreen(map.getOwnerDocument());\n\n    if (wasInFullscreen !== this.isInFullscreen_) {\n      this.setClassName_(this.button_, this.isInFullscreen_);\n\n      if (this.isInFullscreen_) {\n        replaceNode(this.labelActiveNode_, this.labelNode_);\n        this.dispatchEvent(FullScreenEventType.ENTERFULLSCREEN);\n      } else {\n        replaceNode(this.labelNode_, this.labelActiveNode_);\n        this.dispatchEvent(FullScreenEventType.LEAVEFULLSCREEN);\n      }\n\n      map.updateSize();\n    }\n  };\n  /**\n   * @param {HTMLElement} element Target element\n   * @param {boolean} fullscreen True if fullscreen class name should be active\n   * @private\n   */\n\n\n  FullScreen.prototype.setClassName_ = function (element, fullscreen) {\n    var _a, _b, _c, _d;\n\n    if (fullscreen) {\n      (_a = element.classList).remove.apply(_a, this.inactiveClassName_);\n\n      (_b = element.classList).add.apply(_b, this.activeClassName_);\n    } else {\n      (_c = element.classList).remove.apply(_c, this.activeClassName_);\n\n      (_d = element.classList).add.apply(_d, this.inactiveClassName_);\n    }\n  };\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default|null} map Map.\n   * @api\n   */\n\n\n  FullScreen.prototype.setMap = function (map) {\n    var oldMap = this.getMap();\n\n    if (oldMap) {\n      oldMap.removeChangeListener(MapProperty.TARGET, this.boundHandleMapTargetChange_);\n    }\n\n    _super.prototype.setMap.call(this, map);\n\n    this.handleMapTargetChange_();\n\n    if (map) {\n      map.addChangeListener(MapProperty.TARGET, this.boundHandleMapTargetChange_);\n    }\n  };\n  /**\n   * @private\n   */\n\n\n  FullScreen.prototype.handleMapTargetChange_ = function () {\n    var listeners = this.documentListeners_;\n\n    for (var i = 0, ii = listeners.length; i < ii; ++i) {\n      unlistenByKey(listeners[i]);\n    }\n\n    listeners.length = 0;\n    var map = this.getMap();\n\n    if (map) {\n      var doc = map.getOwnerDocument();\n\n      if (isFullScreenSupported(doc)) {\n        this.element.classList.remove(CLASS_UNSUPPORTED);\n      } else {\n        this.element.classList.add(CLASS_UNSUPPORTED);\n      }\n\n      for (var i = 0, ii = events.length; i < ii; ++i) {\n        listeners.push(listen(doc, events[i], this.handleFullScreenChange_, this));\n      }\n\n      this.handleFullScreenChange_();\n    }\n  };\n\n  return FullScreen;\n}(Control);\n/**\n * @param {Document} doc The root document to check.\n * @return {boolean} Fullscreen is supported by the current platform.\n */\n\n\nfunction isFullScreenSupported(doc) {\n  var body = doc.body;\n  return !!(body['webkitRequestFullscreen'] || body['msRequestFullscreen'] && doc['msFullscreenEnabled'] || body.requestFullscreen && doc.fullscreenEnabled);\n}\n/**\n * @param {Document} doc The root document to check.\n * @return {boolean} Element is currently in fullscreen.\n */\n\n\nfunction isFullScreen(doc) {\n  return !!(doc['webkitIsFullScreen'] || doc['msFullscreenElement'] || doc.fullscreenElement);\n}\n/**\n * Request to fullscreen an element.\n * @param {HTMLElement} element Element to request fullscreen\n */\n\n\nfunction requestFullScreen(element) {\n  if (element.requestFullscreen) {\n    element.requestFullscreen();\n  } else if (element['msRequestFullscreen']) {\n    element['msRequestFullscreen']();\n  } else if (element['webkitRequestFullscreen']) {\n    element['webkitRequestFullscreen']();\n  }\n}\n/**\n * Request to fullscreen an element with keyboard input.\n * @param {HTMLElement} element Element to request fullscreen\n */\n\n\nfunction requestFullScreenWithKeys(element) {\n  if (element['webkitRequestFullscreen']) {\n    element['webkitRequestFullscreen']();\n  } else {\n    requestFullScreen(element);\n  }\n}\n/**\n * Exit fullscreen.\n * @param {Document} doc The document to exit fullscren from\n */\n\n\nfunction exitFullScreen(doc) {\n  if (doc.exitFullscreen) {\n    doc.exitFullscreen();\n  } else if (doc['msExitFullscreen']) {\n    doc['msExitFullscreen']();\n  } else if (doc['webkitExitFullscreen']) {\n    doc['webkitExitFullscreen']();\n  }\n}\n\nexport default FullScreen;","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","Control","EventType","MapProperty","CLASS_CONTROL","CLASS_UNSELECTABLE","CLASS_UNSUPPORTED","listen","unlistenByKey","replaceNode","events","FullScreenEventType","ENTERFULLSCREEN","LEAVEFULLSCREEN","FullScreen","_super","opt_options","_this","options","element","document","createElement","target","on","once","un","keys_","keys","undefined","source_","source","isInFullscreen_","boundHandleMapTargetChange_","handleMapTargetChange_","bind","cssClassName_","className","documentListeners_","activeClassName_","activeClassName","split","inactiveClassName_","inactiveClassName","label","labelNode_","createTextNode","labelActive","labelActiveNode_","tipLabel","button_","title","setAttribute","appendChild","addEventListener","CLICK","handleClick_","setClassName_","concat","event","preventDefault","handleFullScreen_","map","getMap","doc","getOwnerDocument","isFullScreenSupported","isFullScreen","exitFullScreen","getElementById","getTargetElement","requestFullScreenWithKeys","requestFullScreen","handleFullScreenChange_","wasInFullscreen","dispatchEvent","updateSize","fullscreen","_a","_b","_c","_d","classList","remove","apply","add","setMap","oldMap","removeChangeListener","TARGET","addChangeListener","listeners","i","ii","length","push","body","requestFullscreen","fullscreenEnabled","fullscreenElement","exitFullscreen"],"sources":["/home/asura/github/smartcity/node_modules/ol/control/FullScreen.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/control/FullScreen\n */\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport MapProperty from '../MapProperty.js';\nimport { CLASS_CONTROL, CLASS_UNSELECTABLE, CLASS_UNSUPPORTED } from '../css.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport { replaceNode } from '../dom.js';\nvar events = [\n    'fullscreenchange',\n    'webkitfullscreenchange',\n    'MSFullscreenChange',\n];\n/**\n * @enum {string}\n */\nvar FullScreenEventType = {\n    /**\n     * Triggered after the map entered fullscreen.\n     * @event FullScreenEventType#enterfullscreen\n     * @api\n     */\n    ENTERFULLSCREEN: 'enterfullscreen',\n    /**\n     * Triggered after the map leave fullscreen.\n     * @event FullScreenEventType#leavefullscreen\n     * @api\n     */\n    LEAVEFULLSCREEN: 'leavefullscreen',\n};\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen', import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen'|import(\"../ObjectEventType\").Types, Return>} FullScreenOnSignature\n */\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-full-screen'] CSS class name.\n * @property {string|Text|HTMLElement} [label='\\u2922'] Text label to use for the button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string|Text|HTMLElement} [labelActive='\\u00d7'] Text label to use for the\n * button when full-screen is active.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [activeClassName=className + '-true'] CSS class name for the button\n * when full-screen is active.\n * @property {string} [inactiveClassName=className + '-false'] CSS class name for the button\n * when full-screen is inactive.\n * @property {string} [tipLabel='Toggle full-screen'] Text label to use for the button tip.\n * @property {boolean} [keys=false] Full keyboard access.\n * @property {HTMLElement|string} [target] Specify a target if you want the\n * control to be rendered outside of the map's viewport.\n * @property {HTMLElement|string} [source] The element to be displayed\n * fullscreen. When not provided, the element containing the map viewport will\n * be displayed fullscreen.\n */\n/**\n * @classdesc\n * Provides a button that when clicked fills up the full screen with the map.\n * The full screen source element is by default the element containing the map viewport unless\n * overridden by providing the `source` option. In which case, the dom\n * element introduced using this parameter will be displayed in full screen.\n *\n * When in full screen mode, a close button is shown to exit full screen mode.\n * The [Fullscreen API](https://www.w3.org/TR/fullscreen/) is used to\n * toggle the map in full screen mode.\n *\n * @fires FullScreenEventType#enterfullscreen\n * @fires FullScreenEventType#leavefullscreen\n * @api\n */\nvar FullScreen = /** @class */ (function (_super) {\n    __extends(FullScreen, _super);\n    /**\n     * @param {Options} [opt_options] Options.\n     */\n    function FullScreen(opt_options) {\n        var _this = this;\n        var options = opt_options ? opt_options : {};\n        _this = _super.call(this, {\n            element: document.createElement('div'),\n            target: options.target,\n        }) || this;\n        /***\n         * @type {FullScreenOnSignature<import(\"../events\").EventsKey>}\n         */\n        _this.on;\n        /***\n         * @type {FullScreenOnSignature<import(\"../events\").EventsKey>}\n         */\n        _this.once;\n        /***\n         * @type {FullScreenOnSignature<void>}\n         */\n        _this.un;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.keys_ = options.keys !== undefined ? options.keys : false;\n        /**\n         * @private\n         * @type {HTMLElement|string|undefined}\n         */\n        _this.source_ = options.source;\n        /**\n         * @type {boolean}\n         * @private\n         */\n        _this.isInFullscreen_ = false;\n        /**\n         * @private\n         */\n        _this.boundHandleMapTargetChange_ = _this.handleMapTargetChange_.bind(_this);\n        /**\n         * @private\n         * @type {string}\n         */\n        _this.cssClassName_ =\n            options.className !== undefined ? options.className : 'ol-full-screen';\n        /**\n         * @private\n         * @type {Array<import(\"../events.js\").EventsKey>}\n         */\n        _this.documentListeners_ = [];\n        /**\n         * @private\n         * @type {Array<string>}\n         */\n        _this.activeClassName_ =\n            options.activeClassName !== undefined\n                ? options.activeClassName.split(' ')\n                : [_this.cssClassName_ + '-true'];\n        /**\n         * @private\n         * @type {Array<string>}\n         */\n        _this.inactiveClassName_ =\n            options.inactiveClassName !== undefined\n                ? options.inactiveClassName.split(' ')\n                : [_this.cssClassName_ + '-false'];\n        var label = options.label !== undefined ? options.label : '\\u2922';\n        /**\n         * @private\n         * @type {Text|HTMLElement}\n         */\n        _this.labelNode_ =\n            typeof label === 'string' ? document.createTextNode(label) : label;\n        var labelActive = options.labelActive !== undefined ? options.labelActive : '\\u00d7';\n        /**\n         * @private\n         * @type {Text|HTMLElement}\n         */\n        _this.labelActiveNode_ =\n            typeof labelActive === 'string'\n                ? document.createTextNode(labelActive)\n                : labelActive;\n        var tipLabel = options.tipLabel ? options.tipLabel : 'Toggle full-screen';\n        /**\n         * @private\n         * @type {HTMLElement}\n         */\n        _this.button_ = document.createElement('button');\n        _this.button_.title = tipLabel;\n        _this.button_.setAttribute('type', 'button');\n        _this.button_.appendChild(_this.labelNode_);\n        _this.button_.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this), false);\n        _this.setClassName_(_this.button_, _this.isInFullscreen_);\n        _this.element.className = \"\".concat(_this.cssClassName_, \" \").concat(CLASS_UNSELECTABLE, \" \").concat(CLASS_CONTROL);\n        _this.element.appendChild(_this.button_);\n        return _this;\n    }\n    /**\n     * @param {MouseEvent} event The event to handle\n     * @private\n     */\n    FullScreen.prototype.handleClick_ = function (event) {\n        event.preventDefault();\n        this.handleFullScreen_();\n    };\n    /**\n     * @private\n     */\n    FullScreen.prototype.handleFullScreen_ = function () {\n        var map = this.getMap();\n        if (!map) {\n            return;\n        }\n        var doc = map.getOwnerDocument();\n        if (!isFullScreenSupported(doc)) {\n            return;\n        }\n        if (isFullScreen(doc)) {\n            exitFullScreen(doc);\n        }\n        else {\n            var element = void 0;\n            if (this.source_) {\n                element =\n                    typeof this.source_ === 'string'\n                        ? doc.getElementById(this.source_)\n                        : this.source_;\n            }\n            else {\n                element = map.getTargetElement();\n            }\n            if (this.keys_) {\n                requestFullScreenWithKeys(element);\n            }\n            else {\n                requestFullScreen(element);\n            }\n        }\n    };\n    /**\n     * @private\n     */\n    FullScreen.prototype.handleFullScreenChange_ = function () {\n        var map = this.getMap();\n        if (!map) {\n            return;\n        }\n        var wasInFullscreen = this.isInFullscreen_;\n        this.isInFullscreen_ = isFullScreen(map.getOwnerDocument());\n        if (wasInFullscreen !== this.isInFullscreen_) {\n            this.setClassName_(this.button_, this.isInFullscreen_);\n            if (this.isInFullscreen_) {\n                replaceNode(this.labelActiveNode_, this.labelNode_);\n                this.dispatchEvent(FullScreenEventType.ENTERFULLSCREEN);\n            }\n            else {\n                replaceNode(this.labelNode_, this.labelActiveNode_);\n                this.dispatchEvent(FullScreenEventType.LEAVEFULLSCREEN);\n            }\n            map.updateSize();\n        }\n    };\n    /**\n     * @param {HTMLElement} element Target element\n     * @param {boolean} fullscreen True if fullscreen class name should be active\n     * @private\n     */\n    FullScreen.prototype.setClassName_ = function (element, fullscreen) {\n        var _a, _b, _c, _d;\n        if (fullscreen) {\n            (_a = element.classList).remove.apply(_a, this.inactiveClassName_);\n            (_b = element.classList).add.apply(_b, this.activeClassName_);\n        }\n        else {\n            (_c = element.classList).remove.apply(_c, this.activeClassName_);\n            (_d = element.classList).add.apply(_d, this.inactiveClassName_);\n        }\n    };\n    /**\n     * Remove the control from its current map and attach it to the new map.\n     * Pass `null` to just remove the control from the current map.\n     * Subclasses may set up event handlers to get notified about changes to\n     * the map here.\n     * @param {import(\"../PluggableMap.js\").default|null} map Map.\n     * @api\n     */\n    FullScreen.prototype.setMap = function (map) {\n        var oldMap = this.getMap();\n        if (oldMap) {\n            oldMap.removeChangeListener(MapProperty.TARGET, this.boundHandleMapTargetChange_);\n        }\n        _super.prototype.setMap.call(this, map);\n        this.handleMapTargetChange_();\n        if (map) {\n            map.addChangeListener(MapProperty.TARGET, this.boundHandleMapTargetChange_);\n        }\n    };\n    /**\n     * @private\n     */\n    FullScreen.prototype.handleMapTargetChange_ = function () {\n        var listeners = this.documentListeners_;\n        for (var i = 0, ii = listeners.length; i < ii; ++i) {\n            unlistenByKey(listeners[i]);\n        }\n        listeners.length = 0;\n        var map = this.getMap();\n        if (map) {\n            var doc = map.getOwnerDocument();\n            if (isFullScreenSupported(doc)) {\n                this.element.classList.remove(CLASS_UNSUPPORTED);\n            }\n            else {\n                this.element.classList.add(CLASS_UNSUPPORTED);\n            }\n            for (var i = 0, ii = events.length; i < ii; ++i) {\n                listeners.push(listen(doc, events[i], this.handleFullScreenChange_, this));\n            }\n            this.handleFullScreenChange_();\n        }\n    };\n    return FullScreen;\n}(Control));\n/**\n * @param {Document} doc The root document to check.\n * @return {boolean} Fullscreen is supported by the current platform.\n */\nfunction isFullScreenSupported(doc) {\n    var body = doc.body;\n    return !!(body['webkitRequestFullscreen'] ||\n        (body['msRequestFullscreen'] && doc['msFullscreenEnabled']) ||\n        (body.requestFullscreen && doc.fullscreenEnabled));\n}\n/**\n * @param {Document} doc The root document to check.\n * @return {boolean} Element is currently in fullscreen.\n */\nfunction isFullScreen(doc) {\n    return !!(doc['webkitIsFullScreen'] ||\n        doc['msFullscreenElement'] ||\n        doc.fullscreenElement);\n}\n/**\n * Request to fullscreen an element.\n * @param {HTMLElement} element Element to request fullscreen\n */\nfunction requestFullScreen(element) {\n    if (element.requestFullscreen) {\n        element.requestFullscreen();\n    }\n    else if (element['msRequestFullscreen']) {\n        element['msRequestFullscreen']();\n    }\n    else if (element['webkitRequestFullscreen']) {\n        element['webkitRequestFullscreen']();\n    }\n}\n/**\n * Request to fullscreen an element with keyboard input.\n * @param {HTMLElement} element Element to request fullscreen\n */\nfunction requestFullScreenWithKeys(element) {\n    if (element['webkitRequestFullscreen']) {\n        element['webkitRequestFullscreen']();\n    }\n    else {\n        requestFullScreen(element);\n    }\n}\n/**\n * Exit fullscreen.\n * @param {Document} doc The document to exit fullscren from\n */\nfunction exitFullScreen(doc) {\n    if (doc.exitFullscreen) {\n        doc.exitFullscreen();\n    }\n    else if (doc['msExitFullscreen']) {\n        doc['msExitFullscreen']();\n    }\n    else if (doc['webkitExitFullscreen']) {\n        doc['webkitExitFullscreen']();\n    }\n}\nexport default FullScreen;\n"],"mappings":"AAAA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA6B,YAAY;EACrD,IAAIC,aAAa,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;IAChCF,aAAa,GAAGG,MAAM,CAACC,cAAP,IACX;MAAEC,SAAS,EAAE;IAAb,aAA6BC,KAA7B,IAAsC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;MAAED,CAAC,CAACI,SAAF,GAAcH,CAAd;IAAkB,CAD/D,IAEZ,UAAUD,CAAV,EAAaC,CAAb,EAAgB;MAAE,KAAK,IAAIK,CAAT,IAAcL,CAAd,EAAiB,IAAIC,MAAM,CAACK,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EAAgDN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;IAAc,CAFrG;;IAGA,OAAOP,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAApB;EACH,CALD;;EAMA,OAAO,UAAUD,CAAV,EAAaC,CAAb,EAAgB;IACnB,IAAI,OAAOA,CAAP,KAAa,UAAb,IAA2BA,CAAC,KAAK,IAArC,EACI,MAAM,IAAIS,SAAJ,CAAc,yBAAyBC,MAAM,CAACV,CAAD,CAA/B,GAAqC,+BAAnD,CAAN;IACJF,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAAb;;IACA,SAASW,EAAT,GAAc;MAAE,KAAKC,WAAL,GAAmBb,CAAnB;IAAuB;;IACvCA,CAAC,CAACO,SAAF,GAAcN,CAAC,KAAK,IAAN,GAAaC,MAAM,CAACY,MAAP,CAAcb,CAAd,CAAb,IAAiCW,EAAE,CAACL,SAAH,GAAeN,CAAC,CAACM,SAAjB,EAA4B,IAAIK,EAAJ,EAA7D,CAAd;EACH,CAND;AAOH,CAd2C,EAA5C;AAeA;AACA;AACA;;;AACA,OAAOG,OAAP,MAAoB,cAApB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,SAASC,aAAT,EAAwBC,kBAAxB,EAA4CC,iBAA5C,QAAqE,WAArE;AACA,SAASC,MAAT,EAAiBC,aAAjB,QAAsC,cAAtC;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,IAAIC,MAAM,GAAG,CACT,kBADS,EAET,wBAFS,EAGT,oBAHS,CAAb;AAKA;AACA;AACA;;AACA,IAAIC,mBAAmB,GAAG;EACtB;AACJ;AACA;AACA;AACA;EACIC,eAAe,EAAE,iBANK;;EAOtB;AACJ;AACA;AACA;AACA;EACIC,eAAe,EAAE;AAZK,CAA1B;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,UAAU;AAAG;AAAe,UAAUC,MAAV,EAAkB;EAC9C/B,SAAS,CAAC8B,UAAD,EAAaC,MAAb,CAAT;EACA;AACJ;AACA;;;EACI,SAASD,UAAT,CAAoBE,WAApB,EAAiC;IAC7B,IAAIC,KAAK,GAAG,IAAZ;;IACA,IAAIC,OAAO,GAAGF,WAAW,GAAGA,WAAH,GAAiB,EAA1C;IACAC,KAAK,GAAGF,MAAM,CAACpB,IAAP,CAAY,IAAZ,EAAkB;MACtBwB,OAAO,EAAEC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CADa;MAEtBC,MAAM,EAAEJ,OAAO,CAACI;IAFM,CAAlB,KAGF,IAHN;IAIA;AACR;AACA;;IACQL,KAAK,CAACM,EAAN;IACA;AACR;AACA;;IACQN,KAAK,CAACO,IAAN;IACA;AACR;AACA;;IACQP,KAAK,CAACQ,EAAN;IACA;AACR;AACA;AACA;;IACQR,KAAK,CAACS,KAAN,GAAcR,OAAO,CAACS,IAAR,KAAiBC,SAAjB,GAA6BV,OAAO,CAACS,IAArC,GAA4C,KAA1D;IACA;AACR;AACA;AACA;;IACQV,KAAK,CAACY,OAAN,GAAgBX,OAAO,CAACY,MAAxB;IACA;AACR;AACA;AACA;;IACQb,KAAK,CAACc,eAAN,GAAwB,KAAxB;IACA;AACR;AACA;;IACQd,KAAK,CAACe,2BAAN,GAAoCf,KAAK,CAACgB,sBAAN,CAA6BC,IAA7B,CAAkCjB,KAAlC,CAApC;IACA;AACR;AACA;AACA;;IACQA,KAAK,CAACkB,aAAN,GACIjB,OAAO,CAACkB,SAAR,KAAsBR,SAAtB,GAAkCV,OAAO,CAACkB,SAA1C,GAAsD,gBAD1D;IAEA;AACR;AACA;AACA;;IACQnB,KAAK,CAACoB,kBAAN,GAA2B,EAA3B;IACA;AACR;AACA;AACA;;IACQpB,KAAK,CAACqB,gBAAN,GACIpB,OAAO,CAACqB,eAAR,KAA4BX,SAA5B,GACMV,OAAO,CAACqB,eAAR,CAAwBC,KAAxB,CAA8B,GAA9B,CADN,GAEM,CAACvB,KAAK,CAACkB,aAAN,GAAsB,OAAvB,CAHV;IAIA;AACR;AACA;AACA;;IACQlB,KAAK,CAACwB,kBAAN,GACIvB,OAAO,CAACwB,iBAAR,KAA8Bd,SAA9B,GACMV,OAAO,CAACwB,iBAAR,CAA0BF,KAA1B,CAAgC,GAAhC,CADN,GAEM,CAACvB,KAAK,CAACkB,aAAN,GAAsB,QAAvB,CAHV;IAIA,IAAIQ,KAAK,GAAGzB,OAAO,CAACyB,KAAR,KAAkBf,SAAlB,GAA8BV,OAAO,CAACyB,KAAtC,GAA8C,QAA1D;IACA;AACR;AACA;AACA;;IACQ1B,KAAK,CAAC2B,UAAN,GACI,OAAOD,KAAP,KAAiB,QAAjB,GAA4BvB,QAAQ,CAACyB,cAAT,CAAwBF,KAAxB,CAA5B,GAA6DA,KADjE;IAEA,IAAIG,WAAW,GAAG5B,OAAO,CAAC4B,WAAR,KAAwBlB,SAAxB,GAAoCV,OAAO,CAAC4B,WAA5C,GAA0D,QAA5E;IACA;AACR;AACA;AACA;;IACQ7B,KAAK,CAAC8B,gBAAN,GACI,OAAOD,WAAP,KAAuB,QAAvB,GACM1B,QAAQ,CAACyB,cAAT,CAAwBC,WAAxB,CADN,GAEMA,WAHV;IAIA,IAAIE,QAAQ,GAAG9B,OAAO,CAAC8B,QAAR,GAAmB9B,OAAO,CAAC8B,QAA3B,GAAsC,oBAArD;IACA;AACR;AACA;AACA;;IACQ/B,KAAK,CAACgC,OAAN,GAAgB7B,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAhB;IACAJ,KAAK,CAACgC,OAAN,CAAcC,KAAd,GAAsBF,QAAtB;;IACA/B,KAAK,CAACgC,OAAN,CAAcE,YAAd,CAA2B,MAA3B,EAAmC,QAAnC;;IACAlC,KAAK,CAACgC,OAAN,CAAcG,WAAd,CAA0BnC,KAAK,CAAC2B,UAAhC;;IACA3B,KAAK,CAACgC,OAAN,CAAcI,gBAAd,CAA+BnD,SAAS,CAACoD,KAAzC,EAAgDrC,KAAK,CAACsC,YAAN,CAAmBrB,IAAnB,CAAwBjB,KAAxB,CAAhD,EAAgF,KAAhF;;IACAA,KAAK,CAACuC,aAAN,CAAoBvC,KAAK,CAACgC,OAA1B,EAAmChC,KAAK,CAACc,eAAzC;;IACAd,KAAK,CAACE,OAAN,CAAciB,SAAd,GAA0B,GAAGqB,MAAH,CAAUxC,KAAK,CAACkB,aAAhB,EAA+B,GAA/B,EAAoCsB,MAApC,CAA2CpD,kBAA3C,EAA+D,GAA/D,EAAoEoD,MAApE,CAA2ErD,aAA3E,CAA1B;;IACAa,KAAK,CAACE,OAAN,CAAciC,WAAd,CAA0BnC,KAAK,CAACgC,OAAhC;;IACA,OAAOhC,KAAP;EACH;EACD;AACJ;AACA;AACA;;;EACIH,UAAU,CAACrB,SAAX,CAAqB8D,YAArB,GAAoC,UAAUG,KAAV,EAAiB;IACjDA,KAAK,CAACC,cAAN;IACA,KAAKC,iBAAL;EACH,CAHD;EAIA;AACJ;AACA;;;EACI9C,UAAU,CAACrB,SAAX,CAAqBmE,iBAArB,GAAyC,YAAY;IACjD,IAAIC,GAAG,GAAG,KAAKC,MAAL,EAAV;;IACA,IAAI,CAACD,GAAL,EAAU;MACN;IACH;;IACD,IAAIE,GAAG,GAAGF,GAAG,CAACG,gBAAJ,EAAV;;IACA,IAAI,CAACC,qBAAqB,CAACF,GAAD,CAA1B,EAAiC;MAC7B;IACH;;IACD,IAAIG,YAAY,CAACH,GAAD,CAAhB,EAAuB;MACnBI,cAAc,CAACJ,GAAD,CAAd;IACH,CAFD,MAGK;MACD,IAAI5C,OAAO,GAAG,KAAK,CAAnB;;MACA,IAAI,KAAKU,OAAT,EAAkB;QACdV,OAAO,GACH,OAAO,KAAKU,OAAZ,KAAwB,QAAxB,GACMkC,GAAG,CAACK,cAAJ,CAAmB,KAAKvC,OAAxB,CADN,GAEM,KAAKA,OAHf;MAIH,CALD,MAMK;QACDV,OAAO,GAAG0C,GAAG,CAACQ,gBAAJ,EAAV;MACH;;MACD,IAAI,KAAK3C,KAAT,EAAgB;QACZ4C,yBAAyB,CAACnD,OAAD,CAAzB;MACH,CAFD,MAGK;QACDoD,iBAAiB,CAACpD,OAAD,CAAjB;MACH;IACJ;EACJ,CA9BD;EA+BA;AACJ;AACA;;;EACIL,UAAU,CAACrB,SAAX,CAAqB+E,uBAArB,GAA+C,YAAY;IACvD,IAAIX,GAAG,GAAG,KAAKC,MAAL,EAAV;;IACA,IAAI,CAACD,GAAL,EAAU;MACN;IACH;;IACD,IAAIY,eAAe,GAAG,KAAK1C,eAA3B;IACA,KAAKA,eAAL,GAAuBmC,YAAY,CAACL,GAAG,CAACG,gBAAJ,EAAD,CAAnC;;IACA,IAAIS,eAAe,KAAK,KAAK1C,eAA7B,EAA8C;MAC1C,KAAKyB,aAAL,CAAmB,KAAKP,OAAxB,EAAiC,KAAKlB,eAAtC;;MACA,IAAI,KAAKA,eAAT,EAA0B;QACtBtB,WAAW,CAAC,KAAKsC,gBAAN,EAAwB,KAAKH,UAA7B,CAAX;QACA,KAAK8B,aAAL,CAAmB/D,mBAAmB,CAACC,eAAvC;MACH,CAHD,MAIK;QACDH,WAAW,CAAC,KAAKmC,UAAN,EAAkB,KAAKG,gBAAvB,CAAX;QACA,KAAK2B,aAAL,CAAmB/D,mBAAmB,CAACE,eAAvC;MACH;;MACDgD,GAAG,CAACc,UAAJ;IACH;EACJ,CAnBD;EAoBA;AACJ;AACA;AACA;AACA;;;EACI7D,UAAU,CAACrB,SAAX,CAAqB+D,aAArB,GAAqC,UAAUrC,OAAV,EAAmByD,UAAnB,EAA+B;IAChE,IAAIC,EAAJ,EAAQC,EAAR,EAAYC,EAAZ,EAAgBC,EAAhB;;IACA,IAAIJ,UAAJ,EAAgB;MACZ,CAACC,EAAE,GAAG1D,OAAO,CAAC8D,SAAd,EAAyBC,MAAzB,CAAgCC,KAAhC,CAAsCN,EAAtC,EAA0C,KAAKpC,kBAA/C;;MACA,CAACqC,EAAE,GAAG3D,OAAO,CAAC8D,SAAd,EAAyBG,GAAzB,CAA6BD,KAA7B,CAAmCL,EAAnC,EAAuC,KAAKxC,gBAA5C;IACH,CAHD,MAIK;MACD,CAACyC,EAAE,GAAG5D,OAAO,CAAC8D,SAAd,EAAyBC,MAAzB,CAAgCC,KAAhC,CAAsCJ,EAAtC,EAA0C,KAAKzC,gBAA/C;;MACA,CAAC0C,EAAE,GAAG7D,OAAO,CAAC8D,SAAd,EAAyBG,GAAzB,CAA6BD,KAA7B,CAAmCH,EAAnC,EAAuC,KAAKvC,kBAA5C;IACH;EACJ,CAVD;EAWA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI3B,UAAU,CAACrB,SAAX,CAAqB4F,MAArB,GAA8B,UAAUxB,GAAV,EAAe;IACzC,IAAIyB,MAAM,GAAG,KAAKxB,MAAL,EAAb;;IACA,IAAIwB,MAAJ,EAAY;MACRA,MAAM,CAACC,oBAAP,CAA4BpF,WAAW,CAACqF,MAAxC,EAAgD,KAAKxD,2BAArD;IACH;;IACDjB,MAAM,CAACtB,SAAP,CAAiB4F,MAAjB,CAAwB1F,IAAxB,CAA6B,IAA7B,EAAmCkE,GAAnC;;IACA,KAAK5B,sBAAL;;IACA,IAAI4B,GAAJ,EAAS;MACLA,GAAG,CAAC4B,iBAAJ,CAAsBtF,WAAW,CAACqF,MAAlC,EAA0C,KAAKxD,2BAA/C;IACH;EACJ,CAVD;EAWA;AACJ;AACA;;;EACIlB,UAAU,CAACrB,SAAX,CAAqBwC,sBAArB,GAA8C,YAAY;IACtD,IAAIyD,SAAS,GAAG,KAAKrD,kBAArB;;IACA,KAAK,IAAIsD,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGF,SAAS,CAACG,MAA/B,EAAuCF,CAAC,GAAGC,EAA3C,EAA+C,EAAED,CAAjD,EAAoD;MAChDnF,aAAa,CAACkF,SAAS,CAACC,CAAD,CAAV,CAAb;IACH;;IACDD,SAAS,CAACG,MAAV,GAAmB,CAAnB;IACA,IAAIhC,GAAG,GAAG,KAAKC,MAAL,EAAV;;IACA,IAAID,GAAJ,EAAS;MACL,IAAIE,GAAG,GAAGF,GAAG,CAACG,gBAAJ,EAAV;;MACA,IAAIC,qBAAqB,CAACF,GAAD,CAAzB,EAAgC;QAC5B,KAAK5C,OAAL,CAAa8D,SAAb,CAAuBC,MAAvB,CAA8B5E,iBAA9B;MACH,CAFD,MAGK;QACD,KAAKa,OAAL,CAAa8D,SAAb,CAAuBG,GAAvB,CAA2B9E,iBAA3B;MACH;;MACD,KAAK,IAAIqF,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGlF,MAAM,CAACmF,MAA5B,EAAoCF,CAAC,GAAGC,EAAxC,EAA4C,EAAED,CAA9C,EAAiD;QAC7CD,SAAS,CAACI,IAAV,CAAevF,MAAM,CAACwD,GAAD,EAAMrD,MAAM,CAACiF,CAAD,CAAZ,EAAiB,KAAKnB,uBAAtB,EAA+C,IAA/C,CAArB;MACH;;MACD,KAAKA,uBAAL;IACH;EACJ,CApBD;;EAqBA,OAAO1D,UAAP;AACH,CAlO+B,CAkO9Bb,OAlO8B,CAAhC;AAmOA;AACA;AACA;AACA;;;AACA,SAASgE,qBAAT,CAA+BF,GAA/B,EAAoC;EAChC,IAAIgC,IAAI,GAAGhC,GAAG,CAACgC,IAAf;EACA,OAAO,CAAC,EAAEA,IAAI,CAAC,yBAAD,CAAJ,IACLA,IAAI,CAAC,qBAAD,CAAJ,IAA+BhC,GAAG,CAAC,qBAAD,CAD7B,IAELgC,IAAI,CAACC,iBAAL,IAA0BjC,GAAG,CAACkC,iBAF3B,CAAR;AAGH;AACD;AACA;AACA;AACA;;;AACA,SAAS/B,YAAT,CAAsBH,GAAtB,EAA2B;EACvB,OAAO,CAAC,EAAEA,GAAG,CAAC,oBAAD,CAAH,IACNA,GAAG,CAAC,qBAAD,CADG,IAENA,GAAG,CAACmC,iBAFA,CAAR;AAGH;AACD;AACA;AACA;AACA;;;AACA,SAAS3B,iBAAT,CAA2BpD,OAA3B,EAAoC;EAChC,IAAIA,OAAO,CAAC6E,iBAAZ,EAA+B;IAC3B7E,OAAO,CAAC6E,iBAAR;EACH,CAFD,MAGK,IAAI7E,OAAO,CAAC,qBAAD,CAAX,EAAoC;IACrCA,OAAO,CAAC,qBAAD,CAAP;EACH,CAFI,MAGA,IAAIA,OAAO,CAAC,yBAAD,CAAX,EAAwC;IACzCA,OAAO,CAAC,yBAAD,CAAP;EACH;AACJ;AACD;AACA;AACA;AACA;;;AACA,SAASmD,yBAAT,CAAmCnD,OAAnC,EAA4C;EACxC,IAAIA,OAAO,CAAC,yBAAD,CAAX,EAAwC;IACpCA,OAAO,CAAC,yBAAD,CAAP;EACH,CAFD,MAGK;IACDoD,iBAAiB,CAACpD,OAAD,CAAjB;EACH;AACJ;AACD;AACA;AACA;AACA;;;AACA,SAASgD,cAAT,CAAwBJ,GAAxB,EAA6B;EACzB,IAAIA,GAAG,CAACoC,cAAR,EAAwB;IACpBpC,GAAG,CAACoC,cAAJ;EACH,CAFD,MAGK,IAAIpC,GAAG,CAAC,kBAAD,CAAP,EAA6B;IAC9BA,GAAG,CAAC,kBAAD,CAAH;EACH,CAFI,MAGA,IAAIA,GAAG,CAAC,sBAAD,CAAP,EAAiC;IAClCA,GAAG,CAAC,sBAAD,CAAH;EACH;AACJ;;AACD,eAAejD,UAAf"},"metadata":{},"sourceType":"module"}