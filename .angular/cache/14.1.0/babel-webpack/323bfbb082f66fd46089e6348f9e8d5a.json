{"ast":null,"code":"/**\n * @module ol/format/GeoJSON\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport Feature from '../Feature.js';\nimport GeometryCollection from '../geom/GeometryCollection.js';\nimport JSONFeature from './JSONFeature.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport { assert } from '../asserts.js';\nimport { assign, isEmpty } from '../obj.js';\nimport { get as getProjection } from '../proj.js';\nimport { transformGeometryWithOptions } from './Feature.js';\n/**\n * @typedef {import(\"geojson\").GeoJSON} GeoJSONObject\n * @typedef {import(\"geojson\").Feature} GeoJSONFeature\n * @typedef {import(\"geojson\").FeatureCollection} GeoJSONFeatureCollection\n * @typedef {import(\"geojson\").Geometry} GeoJSONGeometry\n * @typedef {import(\"geojson\").Point} GeoJSONPoint\n * @typedef {import(\"geojson\").LineString} GeoJSONLineString\n * @typedef {import(\"geojson\").Polygon} GeoJSONPolygon\n * @typedef {import(\"geojson\").MultiPoint} GeoJSONMultiPoint\n * @typedef {import(\"geojson\").MultiLineString} GeoJSONMultiLineString\n * @typedef {import(\"geojson\").MultiPolygon} GeoJSONMultiPolygon\n * @typedef {import(\"geojson\").GeometryCollection} GeoJSONGeometryCollection\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection for features read or\n * written by the format.  Options passed to read or write methods will take precedence.\n * @property {string} [geometryName] Geometry name to use when creating features.\n * @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include\n * the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader\n * will look for that field to set the geometry name. If both this field is set to `true`\n * and a `geometryName` is provided, the `geometryName` will take precedence.\n */\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GeoJSON format.\n *\n * @api\n */\n\nvar GeoJSON =\n/** @class */\nfunction (_super) {\n  __extends(GeoJSON, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n\n\n  function GeoJSON(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this) || this;\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n\n    _this.dataProjection = getProjection(options.dataProjection ? options.dataProjection : 'EPSG:4326');\n\n    if (options.featureProjection) {\n      /**\n       * @type {import(\"../proj/Projection.js\").default}\n       */\n      _this.defaultFeatureProjection = getProjection(options.featureProjection);\n    }\n    /**\n     * Name of the geometry attribute for features.\n     * @type {string|undefined}\n     * @private\n     */\n\n\n    _this.geometryName_ = options.geometryName;\n    /**\n     * Look for the geometry name in the feature GeoJSON\n     * @type {boolean|undefined}\n     * @private\n     */\n\n    _this.extractGeometryName_ = options.extractGeometryName;\n    _this.supportedMediaTypes = ['application/geo+json', 'application/vnd.geo+json'];\n    return _this;\n  }\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @protected\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n\n\n  GeoJSON.prototype.readFeatureFromObject = function (object, opt_options) {\n    /**\n     * @type {GeoJSONFeature}\n     */\n    var geoJSONFeature = null;\n\n    if (object['type'] === 'Feature') {\n      geoJSONFeature =\n      /** @type {GeoJSONFeature} */\n      object;\n    } else {\n      geoJSONFeature = {\n        'type': 'Feature',\n        'geometry':\n        /** @type {GeoJSONGeometry} */\n        object,\n        'properties': null\n      };\n    }\n\n    var geometry = readGeometry(geoJSONFeature['geometry'], opt_options);\n    var feature = new Feature();\n\n    if (this.geometryName_) {\n      feature.setGeometryName(this.geometryName_);\n    } else if (this.extractGeometryName_ && 'geometry_name' in geoJSONFeature !== undefined) {\n      feature.setGeometryName(geoJSONFeature['geometry_name']);\n    }\n\n    feature.setGeometry(geometry);\n\n    if ('id' in geoJSONFeature) {\n      feature.setId(geoJSONFeature['id']);\n    }\n\n    if (geoJSONFeature['properties']) {\n      feature.setProperties(geoJSONFeature['properties'], true);\n    }\n\n    return feature;\n  };\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @protected\n   * @return {Array<Feature>} Features.\n   */\n\n\n  GeoJSON.prototype.readFeaturesFromObject = function (object, opt_options) {\n    var geoJSONObject =\n    /** @type {GeoJSONObject} */\n    object;\n    /** @type {Array<import(\"../Feature.js\").default>} */\n\n    var features = null;\n\n    if (geoJSONObject['type'] === 'FeatureCollection') {\n      var geoJSONFeatureCollection =\n      /** @type {GeoJSONFeatureCollection} */\n      object;\n      features = [];\n      var geoJSONFeatures = geoJSONFeatureCollection['features'];\n\n      for (var i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {\n        features.push(this.readFeatureFromObject(geoJSONFeatures[i], opt_options));\n      }\n    } else {\n      features = [this.readFeatureFromObject(object, opt_options)];\n    }\n\n    return features;\n  };\n  /**\n   * @param {GeoJSONGeometry} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n\n\n  GeoJSON.prototype.readGeometryFromObject = function (object, opt_options) {\n    return readGeometry(object, opt_options);\n  };\n  /**\n   * @param {Object} object Object.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n\n\n  GeoJSON.prototype.readProjectionFromObject = function (object) {\n    var crs = object['crs'];\n    var projection;\n\n    if (crs) {\n      if (crs['type'] == 'name') {\n        projection = getProjection(crs['properties']['name']);\n      } else if (crs['type'] === 'EPSG') {\n        projection = getProjection('EPSG:' + crs['properties']['code']);\n      } else {\n        assert(false, 36); // Unknown SRS type\n      }\n    } else {\n      projection = this.dataProjection;\n    }\n\n    return (\n      /** @type {import(\"../proj/Projection.js\").default} */\n      projection\n    );\n  };\n  /**\n   * Encode a feature as a GeoJSON Feature object.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {GeoJSONFeature} Object.\n   * @api\n   */\n\n\n  GeoJSON.prototype.writeFeatureObject = function (feature, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n    /** @type {GeoJSONFeature} */\n\n    var object = {\n      'type': 'Feature',\n      geometry: null,\n      properties: null\n    };\n    var id = feature.getId();\n\n    if (id !== undefined) {\n      object.id = id;\n    }\n\n    if (!feature.hasProperties()) {\n      return object;\n    }\n\n    var properties = feature.getProperties();\n    var geometry = feature.getGeometry();\n\n    if (geometry) {\n      object.geometry = writeGeometry(geometry, opt_options);\n      delete properties[feature.getGeometryName()];\n    }\n\n    if (!isEmpty(properties)) {\n      object.properties = properties;\n    }\n\n    return object;\n  };\n  /**\n   * Encode an array of features as a GeoJSON object.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {GeoJSONFeatureCollection} GeoJSON Object.\n   * @api\n   */\n\n\n  GeoJSON.prototype.writeFeaturesObject = function (features, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n    var objects = [];\n\n    for (var i = 0, ii = features.length; i < ii; ++i) {\n      objects.push(this.writeFeatureObject(features[i], opt_options));\n    }\n\n    return {\n      type: 'FeatureCollection',\n      features: objects\n    };\n  };\n  /**\n   * Encode a geometry as a GeoJSON object.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.\n   * @api\n   */\n\n\n  GeoJSON.prototype.writeGeometryObject = function (geometry, opt_options) {\n    return writeGeometry(geometry, this.adaptOptions(opt_options));\n  };\n\n  return GeoJSON;\n}(JSONFeature);\n/**\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\n */\n\n\nfunction readGeometry(object, opt_options) {\n  if (!object) {\n    return null;\n  }\n  /**\n   * @type {import(\"../geom/Geometry.js\").default}\n   */\n\n\n  var geometry;\n\n  switch (object['type']) {\n    case 'Point':\n      {\n        geometry = readPointGeometry(\n        /** @type {GeoJSONPoint} */\n        object);\n        break;\n      }\n\n    case 'LineString':\n      {\n        geometry = readLineStringGeometry(\n        /** @type {GeoJSONLineString} */\n        object);\n        break;\n      }\n\n    case 'Polygon':\n      {\n        geometry = readPolygonGeometry(\n        /** @type {GeoJSONPolygon} */\n        object);\n        break;\n      }\n\n    case 'MultiPoint':\n      {\n        geometry = readMultiPointGeometry(\n        /** @type {GeoJSONMultiPoint} */\n        object);\n        break;\n      }\n\n    case 'MultiLineString':\n      {\n        geometry = readMultiLineStringGeometry(\n        /** @type {GeoJSONMultiLineString} */\n        object);\n        break;\n      }\n\n    case 'MultiPolygon':\n      {\n        geometry = readMultiPolygonGeometry(\n        /** @type {GeoJSONMultiPolygon} */\n        object);\n        break;\n      }\n\n    case 'GeometryCollection':\n      {\n        geometry = readGeometryCollectionGeometry(\n        /** @type {GeoJSONGeometryCollection} */\n        object);\n        break;\n      }\n\n    default:\n      {\n        throw new Error('Unsupported GeoJSON type: ' + object['type']);\n      }\n  }\n\n  return transformGeometryWithOptions(geometry, false, opt_options);\n}\n/**\n * @param {GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n * @return {GeometryCollection} Geometry collection.\n */\n\n\nfunction readGeometryCollectionGeometry(object, opt_options) {\n  var geometries = object['geometries'].map(\n  /**\n   * @param {GeoJSONGeometry} geometry Geometry.\n   * @return {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   */\n  function (geometry) {\n    return readGeometry(geometry, opt_options);\n  });\n  return new GeometryCollection(geometries);\n}\n/**\n * @param {GeoJSONPoint} object Object.\n * @return {Point} Point.\n */\n\n\nfunction readPointGeometry(object) {\n  return new Point(object['coordinates']);\n}\n/**\n * @param {GeoJSONLineString} object Object.\n * @return {LineString} LineString.\n */\n\n\nfunction readLineStringGeometry(object) {\n  return new LineString(object['coordinates']);\n}\n/**\n * @param {GeoJSONMultiLineString} object Object.\n * @return {MultiLineString} MultiLineString.\n */\n\n\nfunction readMultiLineStringGeometry(object) {\n  return new MultiLineString(object['coordinates']);\n}\n/**\n * @param {GeoJSONMultiPoint} object Object.\n * @return {MultiPoint} MultiPoint.\n */\n\n\nfunction readMultiPointGeometry(object) {\n  return new MultiPoint(object['coordinates']);\n}\n/**\n * @param {GeoJSONMultiPolygon} object Object.\n * @return {MultiPolygon} MultiPolygon.\n */\n\n\nfunction readMultiPolygonGeometry(object) {\n  return new MultiPolygon(object['coordinates']);\n}\n/**\n * @param {GeoJSONPolygon} object Object.\n * @return {Polygon} Polygon.\n */\n\n\nfunction readPolygonGeometry(object) {\n  return new Polygon(object['coordinates']);\n}\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writeGeometry(geometry, opt_options) {\n  geometry = transformGeometryWithOptions(geometry, true, opt_options);\n  var type = geometry.getType();\n  /** @type {GeoJSONGeometry} */\n\n  var geoJSON;\n\n  switch (type) {\n    case 'Point':\n      {\n        geoJSON = writePointGeometry(\n        /** @type {Point} */\n        geometry, opt_options);\n        break;\n      }\n\n    case 'LineString':\n      {\n        geoJSON = writeLineStringGeometry(\n        /** @type {LineString} */\n        geometry, opt_options);\n        break;\n      }\n\n    case 'Polygon':\n      {\n        geoJSON = writePolygonGeometry(\n        /** @type {Polygon} */\n        geometry, opt_options);\n        break;\n      }\n\n    case 'MultiPoint':\n      {\n        geoJSON = writeMultiPointGeometry(\n        /** @type {MultiPoint} */\n        geometry, opt_options);\n        break;\n      }\n\n    case 'MultiLineString':\n      {\n        geoJSON = writeMultiLineStringGeometry(\n        /** @type {MultiLineString} */\n        geometry, opt_options);\n        break;\n      }\n\n    case 'MultiPolygon':\n      {\n        geoJSON = writeMultiPolygonGeometry(\n        /** @type {MultiPolygon} */\n        geometry, opt_options);\n        break;\n      }\n\n    case 'GeometryCollection':\n      {\n        geoJSON = writeGeometryCollectionGeometry(\n        /** @type {GeometryCollection} */\n        geometry, opt_options);\n        break;\n      }\n\n    case 'Circle':\n      {\n        geoJSON = {\n          type: 'GeometryCollection',\n          geometries: []\n        };\n        break;\n      }\n\n    default:\n      {\n        throw new Error('Unsupported geometry type: ' + type);\n      }\n  }\n\n  return geoJSON;\n}\n/**\n * @param {GeometryCollection} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.\n */\n\n\nfunction writeGeometryCollectionGeometry(geometry, opt_options) {\n  var geometries = geometry.getGeometriesArray().map(function (geometry) {\n    var options = assign({}, opt_options);\n    delete options.featureProjection;\n    return writeGeometry(geometry, options);\n  });\n  return {\n    type: 'GeometryCollection',\n    geometries: geometries\n  };\n}\n/**\n * @param {LineString} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writeLineStringGeometry(geometry, opt_options) {\n  return {\n    type: 'LineString',\n    coordinates: geometry.getCoordinates()\n  };\n}\n/**\n * @param {MultiLineString} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writeMultiLineStringGeometry(geometry, opt_options) {\n  return {\n    type: 'MultiLineString',\n    coordinates: geometry.getCoordinates()\n  };\n}\n/**\n * @param {MultiPoint} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writeMultiPointGeometry(geometry, opt_options) {\n  return {\n    type: 'MultiPoint',\n    coordinates: geometry.getCoordinates()\n  };\n}\n/**\n * @param {MultiPolygon} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writeMultiPolygonGeometry(geometry, opt_options) {\n  var right;\n\n  if (opt_options) {\n    right = opt_options.rightHanded;\n  }\n\n  return {\n    type: 'MultiPolygon',\n    coordinates: geometry.getCoordinates(right)\n  };\n}\n/**\n * @param {Point} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writePointGeometry(geometry, opt_options) {\n  return {\n    type: 'Point',\n    coordinates: geometry.getCoordinates()\n  };\n}\n/**\n * @param {Polygon} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writePolygonGeometry(geometry, opt_options) {\n  var right;\n\n  if (opt_options) {\n    right = opt_options.rightHanded;\n  }\n\n  return {\n    type: 'Polygon',\n    coordinates: geometry.getCoordinates(right)\n  };\n}\n\nexport default GeoJSON;","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","Feature","GeometryCollection","JSONFeature","LineString","MultiLineString","MultiPoint","MultiPolygon","Point","Polygon","assert","assign","isEmpty","get","getProjection","transformGeometryWithOptions","GeoJSON","_super","opt_options","_this","options","dataProjection","featureProjection","defaultFeatureProjection","geometryName_","geometryName","extractGeometryName_","extractGeometryName","supportedMediaTypes","readFeatureFromObject","object","geoJSONFeature","geometry","readGeometry","feature","setGeometryName","undefined","setGeometry","setId","setProperties","readFeaturesFromObject","geoJSONObject","features","geoJSONFeatureCollection","geoJSONFeatures","i","ii","length","push","readGeometryFromObject","readProjectionFromObject","crs","projection","writeFeatureObject","adaptOptions","properties","id","getId","hasProperties","getProperties","getGeometry","writeGeometry","getGeometryName","writeFeaturesObject","objects","type","writeGeometryObject","readPointGeometry","readLineStringGeometry","readPolygonGeometry","readMultiPointGeometry","readMultiLineStringGeometry","readMultiPolygonGeometry","readGeometryCollectionGeometry","Error","geometries","map","getType","geoJSON","writePointGeometry","writeLineStringGeometry","writePolygonGeometry","writeMultiPointGeometry","writeMultiLineStringGeometry","writeMultiPolygonGeometry","writeGeometryCollectionGeometry","getGeometriesArray","coordinates","getCoordinates","right","rightHanded"],"sources":["/home/asura/github/smartcity/node_modules/ol/format/GeoJSON.js"],"sourcesContent":["/**\n * @module ol/format/GeoJSON\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport Feature from '../Feature.js';\nimport GeometryCollection from '../geom/GeometryCollection.js';\nimport JSONFeature from './JSONFeature.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport { assert } from '../asserts.js';\nimport { assign, isEmpty } from '../obj.js';\nimport { get as getProjection } from '../proj.js';\nimport { transformGeometryWithOptions } from './Feature.js';\n/**\n * @typedef {import(\"geojson\").GeoJSON} GeoJSONObject\n * @typedef {import(\"geojson\").Feature} GeoJSONFeature\n * @typedef {import(\"geojson\").FeatureCollection} GeoJSONFeatureCollection\n * @typedef {import(\"geojson\").Geometry} GeoJSONGeometry\n * @typedef {import(\"geojson\").Point} GeoJSONPoint\n * @typedef {import(\"geojson\").LineString} GeoJSONLineString\n * @typedef {import(\"geojson\").Polygon} GeoJSONPolygon\n * @typedef {import(\"geojson\").MultiPoint} GeoJSONMultiPoint\n * @typedef {import(\"geojson\").MultiLineString} GeoJSONMultiLineString\n * @typedef {import(\"geojson\").MultiPolygon} GeoJSONMultiPolygon\n * @typedef {import(\"geojson\").GeometryCollection} GeoJSONGeometryCollection\n */\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection for features read or\n * written by the format.  Options passed to read or write methods will take precedence.\n * @property {string} [geometryName] Geometry name to use when creating features.\n * @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include\n * the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader\n * will look for that field to set the geometry name. If both this field is set to `true`\n * and a `geometryName` is provided, the `geometryName` will take precedence.\n */\n/**\n * @classdesc\n * Feature format for reading and writing data in the GeoJSON format.\n *\n * @api\n */\nvar GeoJSON = /** @class */ (function (_super) {\n    __extends(GeoJSON, _super);\n    /**\n     * @param {Options} [opt_options] Options.\n     */\n    function GeoJSON(opt_options) {\n        var _this = this;\n        var options = opt_options ? opt_options : {};\n        _this = _super.call(this) || this;\n        /**\n         * @type {import(\"../proj/Projection.js\").default}\n         */\n        _this.dataProjection = getProjection(options.dataProjection ? options.dataProjection : 'EPSG:4326');\n        if (options.featureProjection) {\n            /**\n             * @type {import(\"../proj/Projection.js\").default}\n             */\n            _this.defaultFeatureProjection = getProjection(options.featureProjection);\n        }\n        /**\n         * Name of the geometry attribute for features.\n         * @type {string|undefined}\n         * @private\n         */\n        _this.geometryName_ = options.geometryName;\n        /**\n         * Look for the geometry name in the feature GeoJSON\n         * @type {boolean|undefined}\n         * @private\n         */\n        _this.extractGeometryName_ = options.extractGeometryName;\n        _this.supportedMediaTypes = [\n            'application/geo+json',\n            'application/vnd.geo+json',\n        ];\n        return _this;\n    }\n    /**\n     * @param {Object} object Object.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n     * @protected\n     * @return {import(\"../Feature.js\").default} Feature.\n     */\n    GeoJSON.prototype.readFeatureFromObject = function (object, opt_options) {\n        /**\n         * @type {GeoJSONFeature}\n         */\n        var geoJSONFeature = null;\n        if (object['type'] === 'Feature') {\n            geoJSONFeature = /** @type {GeoJSONFeature} */ (object);\n        }\n        else {\n            geoJSONFeature = {\n                'type': 'Feature',\n                'geometry': /** @type {GeoJSONGeometry} */ (object),\n                'properties': null,\n            };\n        }\n        var geometry = readGeometry(geoJSONFeature['geometry'], opt_options);\n        var feature = new Feature();\n        if (this.geometryName_) {\n            feature.setGeometryName(this.geometryName_);\n        }\n        else if (this.extractGeometryName_ &&\n            'geometry_name' in geoJSONFeature !== undefined) {\n            feature.setGeometryName(geoJSONFeature['geometry_name']);\n        }\n        feature.setGeometry(geometry);\n        if ('id' in geoJSONFeature) {\n            feature.setId(geoJSONFeature['id']);\n        }\n        if (geoJSONFeature['properties']) {\n            feature.setProperties(geoJSONFeature['properties'], true);\n        }\n        return feature;\n    };\n    /**\n     * @param {Object} object Object.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n     * @protected\n     * @return {Array<Feature>} Features.\n     */\n    GeoJSON.prototype.readFeaturesFromObject = function (object, opt_options) {\n        var geoJSONObject = /** @type {GeoJSONObject} */ (object);\n        /** @type {Array<import(\"../Feature.js\").default>} */\n        var features = null;\n        if (geoJSONObject['type'] === 'FeatureCollection') {\n            var geoJSONFeatureCollection = /** @type {GeoJSONFeatureCollection} */ (object);\n            features = [];\n            var geoJSONFeatures = geoJSONFeatureCollection['features'];\n            for (var i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {\n                features.push(this.readFeatureFromObject(geoJSONFeatures[i], opt_options));\n            }\n        }\n        else {\n            features = [this.readFeatureFromObject(object, opt_options)];\n        }\n        return features;\n    };\n    /**\n     * @param {GeoJSONGeometry} object Object.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n     * @protected\n     * @return {import(\"../geom/Geometry.js\").default} Geometry.\n     */\n    GeoJSON.prototype.readGeometryFromObject = function (object, opt_options) {\n        return readGeometry(object, opt_options);\n    };\n    /**\n     * @param {Object} object Object.\n     * @protected\n     * @return {import(\"../proj/Projection.js\").default} Projection.\n     */\n    GeoJSON.prototype.readProjectionFromObject = function (object) {\n        var crs = object['crs'];\n        var projection;\n        if (crs) {\n            if (crs['type'] == 'name') {\n                projection = getProjection(crs['properties']['name']);\n            }\n            else if (crs['type'] === 'EPSG') {\n                projection = getProjection('EPSG:' + crs['properties']['code']);\n            }\n            else {\n                assert(false, 36); // Unknown SRS type\n            }\n        }\n        else {\n            projection = this.dataProjection;\n        }\n        return /** @type {import(\"../proj/Projection.js\").default} */ (projection);\n    };\n    /**\n     * Encode a feature as a GeoJSON Feature object.\n     *\n     * @param {import(\"../Feature.js\").default} feature Feature.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n     * @return {GeoJSONFeature} Object.\n     * @api\n     */\n    GeoJSON.prototype.writeFeatureObject = function (feature, opt_options) {\n        opt_options = this.adaptOptions(opt_options);\n        /** @type {GeoJSONFeature} */\n        var object = {\n            'type': 'Feature',\n            geometry: null,\n            properties: null,\n        };\n        var id = feature.getId();\n        if (id !== undefined) {\n            object.id = id;\n        }\n        if (!feature.hasProperties()) {\n            return object;\n        }\n        var properties = feature.getProperties();\n        var geometry = feature.getGeometry();\n        if (geometry) {\n            object.geometry = writeGeometry(geometry, opt_options);\n            delete properties[feature.getGeometryName()];\n        }\n        if (!isEmpty(properties)) {\n            object.properties = properties;\n        }\n        return object;\n    };\n    /**\n     * Encode an array of features as a GeoJSON object.\n     *\n     * @param {Array<import(\"../Feature.js\").default>} features Features.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n     * @return {GeoJSONFeatureCollection} GeoJSON Object.\n     * @api\n     */\n    GeoJSON.prototype.writeFeaturesObject = function (features, opt_options) {\n        opt_options = this.adaptOptions(opt_options);\n        var objects = [];\n        for (var i = 0, ii = features.length; i < ii; ++i) {\n            objects.push(this.writeFeatureObject(features[i], opt_options));\n        }\n        return {\n            type: 'FeatureCollection',\n            features: objects,\n        };\n    };\n    /**\n     * Encode a geometry as a GeoJSON object.\n     *\n     * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n     * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.\n     * @api\n     */\n    GeoJSON.prototype.writeGeometryObject = function (geometry, opt_options) {\n        return writeGeometry(geometry, this.adaptOptions(opt_options));\n    };\n    return GeoJSON;\n}(JSONFeature));\n/**\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\n */\nfunction readGeometry(object, opt_options) {\n    if (!object) {\n        return null;\n    }\n    /**\n     * @type {import(\"../geom/Geometry.js\").default}\n     */\n    var geometry;\n    switch (object['type']) {\n        case 'Point': {\n            geometry = readPointGeometry(/** @type {GeoJSONPoint} */ (object));\n            break;\n        }\n        case 'LineString': {\n            geometry = readLineStringGeometry(\n            /** @type {GeoJSONLineString} */ (object));\n            break;\n        }\n        case 'Polygon': {\n            geometry = readPolygonGeometry(/** @type {GeoJSONPolygon} */ (object));\n            break;\n        }\n        case 'MultiPoint': {\n            geometry = readMultiPointGeometry(\n            /** @type {GeoJSONMultiPoint} */ (object));\n            break;\n        }\n        case 'MultiLineString': {\n            geometry = readMultiLineStringGeometry(\n            /** @type {GeoJSONMultiLineString} */ (object));\n            break;\n        }\n        case 'MultiPolygon': {\n            geometry = readMultiPolygonGeometry(\n            /** @type {GeoJSONMultiPolygon} */ (object));\n            break;\n        }\n        case 'GeometryCollection': {\n            geometry = readGeometryCollectionGeometry(\n            /** @type {GeoJSONGeometryCollection} */ (object));\n            break;\n        }\n        default: {\n            throw new Error('Unsupported GeoJSON type: ' + object['type']);\n        }\n    }\n    return transformGeometryWithOptions(geometry, false, opt_options);\n}\n/**\n * @param {GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n * @return {GeometryCollection} Geometry collection.\n */\nfunction readGeometryCollectionGeometry(object, opt_options) {\n    var geometries = object['geometries'].map(\n    /**\n     * @param {GeoJSONGeometry} geometry Geometry.\n     * @return {import(\"../geom/Geometry.js\").default} geometry Geometry.\n     */\n    function (geometry) {\n        return readGeometry(geometry, opt_options);\n    });\n    return new GeometryCollection(geometries);\n}\n/**\n * @param {GeoJSONPoint} object Object.\n * @return {Point} Point.\n */\nfunction readPointGeometry(object) {\n    return new Point(object['coordinates']);\n}\n/**\n * @param {GeoJSONLineString} object Object.\n * @return {LineString} LineString.\n */\nfunction readLineStringGeometry(object) {\n    return new LineString(object['coordinates']);\n}\n/**\n * @param {GeoJSONMultiLineString} object Object.\n * @return {MultiLineString} MultiLineString.\n */\nfunction readMultiLineStringGeometry(object) {\n    return new MultiLineString(object['coordinates']);\n}\n/**\n * @param {GeoJSONMultiPoint} object Object.\n * @return {MultiPoint} MultiPoint.\n */\nfunction readMultiPointGeometry(object) {\n    return new MultiPoint(object['coordinates']);\n}\n/**\n * @param {GeoJSONMultiPolygon} object Object.\n * @return {MultiPolygon} MultiPolygon.\n */\nfunction readMultiPolygonGeometry(object) {\n    return new MultiPolygon(object['coordinates']);\n}\n/**\n * @param {GeoJSONPolygon} object Object.\n * @return {Polygon} Polygon.\n */\nfunction readPolygonGeometry(object) {\n    return new Polygon(object['coordinates']);\n}\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeGeometry(geometry, opt_options) {\n    geometry = transformGeometryWithOptions(geometry, true, opt_options);\n    var type = geometry.getType();\n    /** @type {GeoJSONGeometry} */\n    var geoJSON;\n    switch (type) {\n        case 'Point': {\n            geoJSON = writePointGeometry(\n            /** @type {Point} */ (geometry), opt_options);\n            break;\n        }\n        case 'LineString': {\n            geoJSON = writeLineStringGeometry(\n            /** @type {LineString} */ (geometry), opt_options);\n            break;\n        }\n        case 'Polygon': {\n            geoJSON = writePolygonGeometry(\n            /** @type {Polygon} */ (geometry), opt_options);\n            break;\n        }\n        case 'MultiPoint': {\n            geoJSON = writeMultiPointGeometry(\n            /** @type {MultiPoint} */ (geometry), opt_options);\n            break;\n        }\n        case 'MultiLineString': {\n            geoJSON = writeMultiLineStringGeometry(\n            /** @type {MultiLineString} */ (geometry), opt_options);\n            break;\n        }\n        case 'MultiPolygon': {\n            geoJSON = writeMultiPolygonGeometry(\n            /** @type {MultiPolygon} */ (geometry), opt_options);\n            break;\n        }\n        case 'GeometryCollection': {\n            geoJSON = writeGeometryCollectionGeometry(\n            /** @type {GeometryCollection} */ (geometry), opt_options);\n            break;\n        }\n        case 'Circle': {\n            geoJSON = {\n                type: 'GeometryCollection',\n                geometries: [],\n            };\n            break;\n        }\n        default: {\n            throw new Error('Unsupported geometry type: ' + type);\n        }\n    }\n    return geoJSON;\n}\n/**\n * @param {GeometryCollection} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.\n */\nfunction writeGeometryCollectionGeometry(geometry, opt_options) {\n    var geometries = geometry.getGeometriesArray().map(function (geometry) {\n        var options = assign({}, opt_options);\n        delete options.featureProjection;\n        return writeGeometry(geometry, options);\n    });\n    return {\n        type: 'GeometryCollection',\n        geometries: geometries,\n    };\n}\n/**\n * @param {LineString} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeLineStringGeometry(geometry, opt_options) {\n    return {\n        type: 'LineString',\n        coordinates: geometry.getCoordinates(),\n    };\n}\n/**\n * @param {MultiLineString} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiLineStringGeometry(geometry, opt_options) {\n    return {\n        type: 'MultiLineString',\n        coordinates: geometry.getCoordinates(),\n    };\n}\n/**\n * @param {MultiPoint} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPointGeometry(geometry, opt_options) {\n    return {\n        type: 'MultiPoint',\n        coordinates: geometry.getCoordinates(),\n    };\n}\n/**\n * @param {MultiPolygon} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPolygonGeometry(geometry, opt_options) {\n    var right;\n    if (opt_options) {\n        right = opt_options.rightHanded;\n    }\n    return {\n        type: 'MultiPolygon',\n        coordinates: geometry.getCoordinates(right),\n    };\n}\n/**\n * @param {Point} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePointGeometry(geometry, opt_options) {\n    return {\n        type: 'Point',\n        coordinates: geometry.getCoordinates(),\n    };\n}\n/**\n * @param {Polygon} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePolygonGeometry(geometry, opt_options) {\n    var right;\n    if (opt_options) {\n        right = opt_options.rightHanded;\n    }\n    return {\n        type: 'Polygon',\n        coordinates: geometry.getCoordinates(right),\n    };\n}\nexport default GeoJSON;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}