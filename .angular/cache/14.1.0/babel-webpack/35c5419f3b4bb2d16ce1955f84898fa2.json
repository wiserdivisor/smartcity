{"ast":null,"code":"/**\n * @module ol/obj\n */\n\n/**\n * Polyfill for Object.assign().  Assigns enumerable and own properties from\n * one or more source objects to a target object.\n * See https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign.\n *\n * @param {!Object} target The target object.\n * @param {...Object} var_sources The source object(s).\n * @return {!Object} The modified target object.\n */\nexport var assign = typeof Object.assign === 'function' ? Object.assign : function (target, var_sources) {\n  if (target === undefined || target === null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n\n  var output = Object(target);\n\n  for (var i = 1, ii = arguments.length; i < ii; ++i) {\n    var source = arguments[i];\n\n    if (source !== undefined && source !== null) {\n      for (var key in source) {\n        if (source.hasOwnProperty(key)) {\n          output[key] = source[key];\n        }\n      }\n    }\n  }\n\n  return output;\n};\n/**\n * Removes all properties from an object.\n * @param {Object} object The object to clear.\n */\n\nexport function clear(object) {\n  for (var property in object) {\n    delete object[property];\n  }\n}\n/**\n * Polyfill for Object.values().  Get an array of property values from an object.\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values\n *\n * @param {!Object<K,V>} object The object from which to get the values.\n * @return {!Array<V>} The property values.\n * @template K,V\n */\n\nexport var getValues = typeof Object.values === 'function' ? Object.values : function (object) {\n  var values = [];\n\n  for (var property in object) {\n    values.push(object[property]);\n  }\n\n  return values;\n};\n/**\n * Determine if an object has any properties.\n * @param {Object} object The object to check.\n * @return {boolean} The object is empty.\n */\n\nexport function isEmpty(object) {\n  var property;\n\n  for (property in object) {\n    return false;\n  }\n\n  return !property;\n}","map":{"version":3,"names":["assign","Object","target","var_sources","undefined","TypeError","output","i","ii","arguments","length","source","key","hasOwnProperty","clear","object","property","getValues","values","push","isEmpty"],"sources":["/home/asura/github/smartcity/node_modules/ol/obj.js"],"sourcesContent":["/**\n * @module ol/obj\n */\n/**\n * Polyfill for Object.assign().  Assigns enumerable and own properties from\n * one or more source objects to a target object.\n * See https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign.\n *\n * @param {!Object} target The target object.\n * @param {...Object} var_sources The source object(s).\n * @return {!Object} The modified target object.\n */\nexport var assign = typeof Object.assign === 'function'\n    ? Object.assign\n    : function (target, var_sources) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n        var output = Object(target);\n        for (var i = 1, ii = arguments.length; i < ii; ++i) {\n            var source = arguments[i];\n            if (source !== undefined && source !== null) {\n                for (var key in source) {\n                    if (source.hasOwnProperty(key)) {\n                        output[key] = source[key];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n/**\n * Removes all properties from an object.\n * @param {Object} object The object to clear.\n */\nexport function clear(object) {\n    for (var property in object) {\n        delete object[property];\n    }\n}\n/**\n * Polyfill for Object.values().  Get an array of property values from an object.\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values\n *\n * @param {!Object<K,V>} object The object from which to get the values.\n * @return {!Array<V>} The property values.\n * @template K,V\n */\nexport var getValues = typeof Object.values === 'function'\n    ? Object.values\n    : function (object) {\n        var values = [];\n        for (var property in object) {\n            values.push(object[property]);\n        }\n        return values;\n    };\n/**\n * Determine if an object has any properties.\n * @param {Object} object The object to check.\n * @return {boolean} The object is empty.\n */\nexport function isEmpty(object) {\n    var property;\n    for (property in object) {\n        return false;\n    }\n    return !property;\n}\n"],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIA,MAAM,GAAG,OAAOC,MAAM,CAACD,MAAd,KAAyB,UAAzB,GACdC,MAAM,CAACD,MADO,GAEd,UAAUE,MAAV,EAAkBC,WAAlB,EAA+B;EAC7B,IAAID,MAAM,KAAKE,SAAX,IAAwBF,MAAM,KAAK,IAAvC,EAA6C;IACzC,MAAM,IAAIG,SAAJ,CAAc,4CAAd,CAAN;EACH;;EACD,IAAIC,MAAM,GAAGL,MAAM,CAACC,MAAD,CAAnB;;EACA,KAAK,IAAIK,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGC,SAAS,CAACC,MAA/B,EAAuCH,CAAC,GAAGC,EAA3C,EAA+C,EAAED,CAAjD,EAAoD;IAChD,IAAII,MAAM,GAAGF,SAAS,CAACF,CAAD,CAAtB;;IACA,IAAII,MAAM,KAAKP,SAAX,IAAwBO,MAAM,KAAK,IAAvC,EAA6C;MACzC,KAAK,IAAIC,GAAT,IAAgBD,MAAhB,EAAwB;QACpB,IAAIA,MAAM,CAACE,cAAP,CAAsBD,GAAtB,CAAJ,EAAgC;UAC5BN,MAAM,CAACM,GAAD,CAAN,GAAcD,MAAM,CAACC,GAAD,CAApB;QACH;MACJ;IACJ;EACJ;;EACD,OAAON,MAAP;AACH,CAlBE;AAmBP;AACA;AACA;AACA;;AACA,OAAO,SAASQ,KAAT,CAAeC,MAAf,EAAuB;EAC1B,KAAK,IAAIC,QAAT,IAAqBD,MAArB,EAA6B;IACzB,OAAOA,MAAM,CAACC,QAAD,CAAb;EACH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,SAAS,GAAG,OAAOhB,MAAM,CAACiB,MAAd,KAAyB,UAAzB,GACjBjB,MAAM,CAACiB,MADU,GAEjB,UAAUH,MAAV,EAAkB;EAChB,IAAIG,MAAM,GAAG,EAAb;;EACA,KAAK,IAAIF,QAAT,IAAqBD,MAArB,EAA6B;IACzBG,MAAM,CAACC,IAAP,CAAYJ,MAAM,CAACC,QAAD,CAAlB;EACH;;EACD,OAAOE,MAAP;AACH,CARE;AASP;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,OAAT,CAAiBL,MAAjB,EAAyB;EAC5B,IAAIC,QAAJ;;EACA,KAAKA,QAAL,IAAiBD,MAAjB,EAAyB;IACrB,OAAO,KAAP;EACH;;EACD,OAAO,CAACC,QAAR;AACH"},"metadata":{},"sourceType":"module"}