{"ast":null,"code":"/**\n * @module ol/style/Style\n */\nimport CircleStyle from './Circle.js';\nimport Fill from './Fill.js';\nimport Stroke from './Stroke.js';\nimport { assert } from '../asserts.js';\n/**\n * A function that takes an {@link module:ol/Feature~Feature} and a `{number}`\n * representing the view's resolution. The function should return a\n * {@link module:ol/style/Style~Style} or an array of them. This way e.g. a\n * vector layer can be styled. If the function returns `undefined`, the\n * feature will not be rendered.\n *\n * @typedef {function(import(\"../Feature.js\").FeatureLike, number):(Style|Array<Style>|void)} StyleFunction\n */\n\n/**\n * A {@link Style}, an array of {@link Style}, or a {@link StyleFunction}.\n * @typedef {Style|Array<Style>|StyleFunction} StyleLike\n */\n\n/**\n * A function that takes an {@link module:ol/Feature~Feature} as argument and returns an\n * {@link module:ol/geom/Geometry~Geometry} that will be rendered and styled for the feature.\n *\n * @typedef {function(import(\"../Feature.js\").FeatureLike):\n *     (import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined)} GeometryFunction\n */\n\n/**\n * Custom renderer function. Takes two arguments:\n *\n * 1. The pixel coordinates of the geometry in GeoJSON notation.\n * 2. The {@link module:ol/render~State} of the layer renderer.\n *\n * @typedef {function((import(\"../coordinate.js\").Coordinate|Array<import(\"../coordinate.js\").Coordinate>|Array<Array<import(\"../coordinate.js\").Coordinate>>),import(\"../render.js\").State): void} RenderFunction\n */\n\n/**\n * @typedef {Object} Options\n * @property {string|import(\"../geom/Geometry.js\").default|GeometryFunction} [geometry] Feature property or geometry\n * or function returning a geometry to render for this style.\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {import(\"./Image.js\").default} [image] Image style.\n * @property {RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be\n * ignored, and the provided function will be called with each render frame for each geometry.\n * @property {RenderFunction} [hitDetectionRenderer] Custom renderer for hit detection. If provided will be used\n * in hit detection rendering.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {import(\"./Text.js\").default} [text] Text style.\n * @property {number} [zIndex] Z index.\n */\n\n/**\n * @classdesc\n * Container for vector feature rendering styles. Any changes made to the style\n * or its children through `set*()` methods will not take effect until the\n * feature or layer that uses the style is re-rendered.\n *\n * ## Feature styles\n *\n * If no style is defined, the following default style is used:\n * ```js\n *  import {Circle, Fill, Stroke, Style} from 'ol/style';\n *\n *  const fill = new Fill({\n *    color: 'rgba(255,255,255,0.4)',\n *  });\n *  const stroke = new Stroke({\n *    color: '#3399CC',\n *    width: 1.25,\n *  });\n *  const styles = [\n *    new Style({\n *      image: new Circle({\n *        fill: fill,\n *        stroke: stroke,\n *        radius: 5,\n *      }),\n *      fill: fill,\n *      stroke: stroke,\n *    }),\n *  ];\n * ```\n *\n * A separate editing style has the following defaults:\n * ```js\n *  import {Circle, Fill, Stroke, Style} from 'ol/style';\n *\n *  const styles = {};\n *  const white = [255, 255, 255, 1];\n *  const blue = [0, 153, 255, 1];\n *  const width = 3;\n *  styles['Polygon'] = [\n *    new Style({\n *      fill: new Fill({\n *        color: [255, 255, 255, 0.5],\n *      }),\n *    }),\n *  ];\n *  styles['MultiPolygon'] =\n *      styles['Polygon'];\n *  styles['LineString'] = [\n *    new Style({\n *      stroke: new Stroke({\n *        color: white,\n *        width: width + 2,\n *      }),\n *    }),\n *    new Style({\n *      stroke: new Stroke({\n *        color: blue,\n *        width: width,\n *      }),\n *    }),\n *  ];\n *  styles['MultiLineString'] = styles['LineString'];\n *\n *  styles['Circle'] = styles['Polygon'].concat(\n *    styles['LineString']\n *  );\n *\n *  styles['Point'] = [\n *    new Style({\n *      image: new Circle({\n *        radius: width * 2,\n *        fill: new Fill({\n *          color: blue,\n *        }),\n *        stroke: new Stroke({\n *          color: white,\n *          width: width / 2,\n *        }),\n *      }),\n *      zIndex: Infinity,\n *    }),\n *  ];\n *  styles['MultiPoint'] =\n *      styles['Point'];\n *  styles['GeometryCollection'] =\n *      styles['Polygon'].concat(\n *          styles['LineString'],\n *          styles['Point']\n *      );\n * ```\n *\n * @api\n */\n\nvar Style =\n/** @class */\nfunction () {\n  /**\n   * @param {Options} [opt_options] Style options.\n   */\n  function Style(opt_options) {\n    var options = opt_options || {};\n    /**\n     * @private\n     * @type {string|import(\"../geom/Geometry.js\").default|GeometryFunction}\n     */\n\n    this.geometry_ = null;\n    /**\n     * @private\n     * @type {!GeometryFunction}\n     */\n\n    this.geometryFunction_ = defaultGeometryFunction;\n\n    if (options.geometry !== undefined) {\n      this.setGeometry(options.geometry);\n    }\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n\n\n    this.fill_ = options.fill !== undefined ? options.fill : null;\n    /**\n     * @private\n     * @type {import(\"./Image.js\").default}\n     */\n\n    this.image_ = options.image !== undefined ? options.image : null;\n    /**\n     * @private\n     * @type {RenderFunction|null}\n     */\n\n    this.renderer_ = options.renderer !== undefined ? options.renderer : null;\n    /**\n     * @private\n     * @type {RenderFunction|null}\n     */\n\n    this.hitDetectionRenderer_ = options.hitDetectionRenderer !== undefined ? options.hitDetectionRenderer : null;\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n    /**\n     * @private\n     * @type {import(\"./Text.js\").default}\n     */\n\n    this.text_ = options.text !== undefined ? options.text : null;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.zIndex_ = options.zIndex;\n  }\n  /**\n   * Clones the style.\n   * @return {Style} The cloned style.\n   * @api\n   */\n\n\n  Style.prototype.clone = function () {\n    var geometry = this.getGeometry();\n\n    if (geometry && typeof geometry === 'object') {\n      geometry =\n      /** @type {import(\"../geom/Geometry.js\").default} */\n      geometry.clone();\n    }\n\n    return new Style({\n      geometry: geometry,\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      image: this.getImage() ? this.getImage().clone() : undefined,\n      renderer: this.getRenderer(),\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      text: this.getText() ? this.getText().clone() : undefined,\n      zIndex: this.getZIndex()\n    });\n  };\n  /**\n   * Get the custom renderer function that was configured with\n   * {@link #setRenderer} or the `renderer` constructor option.\n   * @return {RenderFunction|null} Custom renderer function.\n   * @api\n   */\n\n\n  Style.prototype.getRenderer = function () {\n    return this.renderer_;\n  };\n  /**\n   * Sets a custom renderer function for this style. When set, `fill`, `stroke`\n   * and `image` options of the style will be ignored.\n   * @param {RenderFunction|null} renderer Custom renderer function.\n   * @api\n   */\n\n\n  Style.prototype.setRenderer = function (renderer) {\n    this.renderer_ = renderer;\n  };\n  /**\n   * Sets a custom renderer function for this style used\n   * in hit detection.\n   * @param {RenderFunction|null} renderer Custom renderer function.\n   * @api\n   */\n\n\n  Style.prototype.setHitDetectionRenderer = function (renderer) {\n    this.hitDetectionRenderer_ = renderer;\n  };\n  /**\n   * Get the custom renderer function that was configured with\n   * {@link #setHitDetectionRenderer} or the `hitDetectionRenderer` constructor option.\n   * @return {RenderFunction|null} Custom renderer function.\n   * @api\n   */\n\n\n  Style.prototype.getHitDetectionRenderer = function () {\n    return this.hitDetectionRenderer_;\n  };\n  /**\n   * Get the geometry to be rendered.\n   * @return {string|import(\"../geom/Geometry.js\").default|GeometryFunction}\n   * Feature property or geometry or function that returns the geometry that will\n   * be rendered with this style.\n   * @api\n   */\n\n\n  Style.prototype.getGeometry = function () {\n    return this.geometry_;\n  };\n  /**\n   * Get the function used to generate a geometry for rendering.\n   * @return {!GeometryFunction} Function that is called with a feature\n   * and returns the geometry to render instead of the feature's geometry.\n   * @api\n   */\n\n\n  Style.prototype.getGeometryFunction = function () {\n    return this.geometryFunction_;\n  };\n  /**\n   * Get the fill style.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n\n\n  Style.prototype.getFill = function () {\n    return this.fill_;\n  };\n  /**\n   * Set the fill style.\n   * @param {import(\"./Fill.js\").default} fill Fill style.\n   * @api\n   */\n\n\n  Style.prototype.setFill = function (fill) {\n    this.fill_ = fill;\n  };\n  /**\n   * Get the image style.\n   * @return {import(\"./Image.js\").default} Image style.\n   * @api\n   */\n\n\n  Style.prototype.getImage = function () {\n    return this.image_;\n  };\n  /**\n   * Set the image style.\n   * @param {import(\"./Image.js\").default} image Image style.\n   * @api\n   */\n\n\n  Style.prototype.setImage = function (image) {\n    this.image_ = image;\n  };\n  /**\n   * Get the stroke style.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n\n\n  Style.prototype.getStroke = function () {\n    return this.stroke_;\n  };\n  /**\n   * Set the stroke style.\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n   * @api\n   */\n\n\n  Style.prototype.setStroke = function (stroke) {\n    this.stroke_ = stroke;\n  };\n  /**\n   * Get the text style.\n   * @return {import(\"./Text.js\").default} Text style.\n   * @api\n   */\n\n\n  Style.prototype.getText = function () {\n    return this.text_;\n  };\n  /**\n   * Set the text style.\n   * @param {import(\"./Text.js\").default} text Text style.\n   * @api\n   */\n\n\n  Style.prototype.setText = function (text) {\n    this.text_ = text;\n  };\n  /**\n   * Get the z-index for the style.\n   * @return {number|undefined} ZIndex.\n   * @api\n   */\n\n\n  Style.prototype.getZIndex = function () {\n    return this.zIndex_;\n  };\n  /**\n   * Set a geometry that is rendered instead of the feature's geometry.\n   *\n   * @param {string|import(\"../geom/Geometry.js\").default|GeometryFunction} geometry\n   *     Feature property or geometry or function returning a geometry to render\n   *     for this style.\n   * @api\n   */\n\n\n  Style.prototype.setGeometry = function (geometry) {\n    if (typeof geometry === 'function') {\n      this.geometryFunction_ = geometry;\n    } else if (typeof geometry === 'string') {\n      this.geometryFunction_ = function (feature) {\n        return (\n          /** @type {import(\"../geom/Geometry.js\").default} */\n          feature.get(geometry)\n        );\n      };\n    } else if (!geometry) {\n      this.geometryFunction_ = defaultGeometryFunction;\n    } else if (geometry !== undefined) {\n      this.geometryFunction_ = function () {\n        return (\n          /** @type {import(\"../geom/Geometry.js\").default} */\n          geometry\n        );\n      };\n    }\n\n    this.geometry_ = geometry;\n  };\n  /**\n   * Set the z-index.\n   *\n   * @param {number|undefined} zIndex ZIndex.\n   * @api\n   */\n\n\n  Style.prototype.setZIndex = function (zIndex) {\n    this.zIndex_ = zIndex;\n  };\n\n  return Style;\n}();\n/**\n * Convert the provided object into a style function.  Functions passed through\n * unchanged.  Arrays of Style or single style objects wrapped in a\n * new style function.\n * @param {StyleFunction|Array<Style>|Style} obj\n *     A style function, a single style, or an array of styles.\n * @return {StyleFunction} A style function.\n */\n\n\nexport function toFunction(obj) {\n  var styleFunction;\n\n  if (typeof obj === 'function') {\n    styleFunction = obj;\n  } else {\n    /**\n     * @type {Array<Style>}\n     */\n    var styles_1;\n\n    if (Array.isArray(obj)) {\n      styles_1 = obj;\n    } else {\n      assert(typeof\n      /** @type {?} */\n      obj.getZIndex === 'function', 41); // Expected an `Style` or an array of `Style`\n\n      var style =\n      /** @type {Style} */\n      obj;\n      styles_1 = [style];\n    }\n\n    styleFunction = function () {\n      return styles_1;\n    };\n  }\n\n  return styleFunction;\n}\n/**\n * @type {Array<Style>|null}\n */\n\nvar defaultStyles = null;\n/**\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {number} resolution Resolution.\n * @return {Array<Style>} Style.\n */\n\nexport function createDefaultStyle(feature, resolution) {\n  // We don't use an immediately-invoked function\n  // and a closure so we don't get an error at script evaluation time in\n  // browsers that do not support Canvas. (import(\"./Circle.js\").CircleStyle does\n  // canvas.getContext('2d') at construction time, which will cause an.error\n  // in such browsers.)\n  if (!defaultStyles) {\n    var fill = new Fill({\n      color: 'rgba(255,255,255,0.4)'\n    });\n    var stroke = new Stroke({\n      color: '#3399CC',\n      width: 1.25\n    });\n    defaultStyles = [new Style({\n      image: new CircleStyle({\n        fill: fill,\n        stroke: stroke,\n        radius: 5\n      }),\n      fill: fill,\n      stroke: stroke\n    })];\n  }\n\n  return defaultStyles;\n}\n/**\n * Default styles for editing features.\n * @return {Object<import(\"../geom/Geometry.js\").Type, Array<Style>>} Styles\n */\n\nexport function createEditingStyle() {\n  /** @type {Object<import(\"../geom/Geometry.js\").Type, Array<Style>>} */\n  var styles = {};\n  var white = [255, 255, 255, 1];\n  var blue = [0, 153, 255, 1];\n  var width = 3;\n  styles['Polygon'] = [new Style({\n    fill: new Fill({\n      color: [255, 255, 255, 0.5]\n    })\n  })];\n  styles['MultiPolygon'] = styles['Polygon'];\n  styles['LineString'] = [new Style({\n    stroke: new Stroke({\n      color: white,\n      width: width + 2\n    })\n  }), new Style({\n    stroke: new Stroke({\n      color: blue,\n      width: width\n    })\n  })];\n  styles['MultiLineString'] = styles['LineString'];\n  styles['Circle'] = styles['Polygon'].concat(styles['LineString']);\n  styles['Point'] = [new Style({\n    image: new CircleStyle({\n      radius: width * 2,\n      fill: new Fill({\n        color: blue\n      }),\n      stroke: new Stroke({\n        color: white,\n        width: width / 2\n      })\n    }),\n    zIndex: Infinity\n  })];\n  styles['MultiPoint'] = styles['Point'];\n  styles['GeometryCollection'] = styles['Polygon'].concat(styles['LineString'], styles['Point']);\n  return styles;\n}\n/**\n * Function that is called with a feature and returns its default geometry.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature to get the geometry for.\n * @return {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined} Geometry to render.\n */\n\nfunction defaultGeometryFunction(feature) {\n  return feature.getGeometry();\n}\n\nexport default Style;","map":{"version":3,"names":["CircleStyle","Fill","Stroke","assert","Style","opt_options","options","geometry_","geometryFunction_","defaultGeometryFunction","geometry","undefined","setGeometry","fill_","fill","image_","image","renderer_","renderer","hitDetectionRenderer_","hitDetectionRenderer","stroke_","stroke","text_","text","zIndex_","zIndex","prototype","clone","getGeometry","getFill","getImage","getRenderer","getStroke","getText","getZIndex","setRenderer","setHitDetectionRenderer","getHitDetectionRenderer","getGeometryFunction","setFill","setImage","setStroke","setText","feature","get","setZIndex","toFunction","obj","styleFunction","styles_1","Array","isArray","style","defaultStyles","createDefaultStyle","resolution","color","width","radius","createEditingStyle","styles","white","blue","concat","Infinity"],"sources":["/home/asura/github/smartcity/node_modules/ol/style/Style.js"],"sourcesContent":["/**\n * @module ol/style/Style\n */\nimport CircleStyle from './Circle.js';\nimport Fill from './Fill.js';\nimport Stroke from './Stroke.js';\nimport { assert } from '../asserts.js';\n/**\n * A function that takes an {@link module:ol/Feature~Feature} and a `{number}`\n * representing the view's resolution. The function should return a\n * {@link module:ol/style/Style~Style} or an array of them. This way e.g. a\n * vector layer can be styled. If the function returns `undefined`, the\n * feature will not be rendered.\n *\n * @typedef {function(import(\"../Feature.js\").FeatureLike, number):(Style|Array<Style>|void)} StyleFunction\n */\n/**\n * A {@link Style}, an array of {@link Style}, or a {@link StyleFunction}.\n * @typedef {Style|Array<Style>|StyleFunction} StyleLike\n */\n/**\n * A function that takes an {@link module:ol/Feature~Feature} as argument and returns an\n * {@link module:ol/geom/Geometry~Geometry} that will be rendered and styled for the feature.\n *\n * @typedef {function(import(\"../Feature.js\").FeatureLike):\n *     (import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined)} GeometryFunction\n */\n/**\n * Custom renderer function. Takes two arguments:\n *\n * 1. The pixel coordinates of the geometry in GeoJSON notation.\n * 2. The {@link module:ol/render~State} of the layer renderer.\n *\n * @typedef {function((import(\"../coordinate.js\").Coordinate|Array<import(\"../coordinate.js\").Coordinate>|Array<Array<import(\"../coordinate.js\").Coordinate>>),import(\"../render.js\").State): void} RenderFunction\n */\n/**\n * @typedef {Object} Options\n * @property {string|import(\"../geom/Geometry.js\").default|GeometryFunction} [geometry] Feature property or geometry\n * or function returning a geometry to render for this style.\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {import(\"./Image.js\").default} [image] Image style.\n * @property {RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be\n * ignored, and the provided function will be called with each render frame for each geometry.\n * @property {RenderFunction} [hitDetectionRenderer] Custom renderer for hit detection. If provided will be used\n * in hit detection rendering.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {import(\"./Text.js\").default} [text] Text style.\n * @property {number} [zIndex] Z index.\n */\n/**\n * @classdesc\n * Container for vector feature rendering styles. Any changes made to the style\n * or its children through `set*()` methods will not take effect until the\n * feature or layer that uses the style is re-rendered.\n *\n * ## Feature styles\n *\n * If no style is defined, the following default style is used:\n * ```js\n *  import {Circle, Fill, Stroke, Style} from 'ol/style';\n *\n *  const fill = new Fill({\n *    color: 'rgba(255,255,255,0.4)',\n *  });\n *  const stroke = new Stroke({\n *    color: '#3399CC',\n *    width: 1.25,\n *  });\n *  const styles = [\n *    new Style({\n *      image: new Circle({\n *        fill: fill,\n *        stroke: stroke,\n *        radius: 5,\n *      }),\n *      fill: fill,\n *      stroke: stroke,\n *    }),\n *  ];\n * ```\n *\n * A separate editing style has the following defaults:\n * ```js\n *  import {Circle, Fill, Stroke, Style} from 'ol/style';\n *\n *  const styles = {};\n *  const white = [255, 255, 255, 1];\n *  const blue = [0, 153, 255, 1];\n *  const width = 3;\n *  styles['Polygon'] = [\n *    new Style({\n *      fill: new Fill({\n *        color: [255, 255, 255, 0.5],\n *      }),\n *    }),\n *  ];\n *  styles['MultiPolygon'] =\n *      styles['Polygon'];\n *  styles['LineString'] = [\n *    new Style({\n *      stroke: new Stroke({\n *        color: white,\n *        width: width + 2,\n *      }),\n *    }),\n *    new Style({\n *      stroke: new Stroke({\n *        color: blue,\n *        width: width,\n *      }),\n *    }),\n *  ];\n *  styles['MultiLineString'] = styles['LineString'];\n *\n *  styles['Circle'] = styles['Polygon'].concat(\n *    styles['LineString']\n *  );\n *\n *  styles['Point'] = [\n *    new Style({\n *      image: new Circle({\n *        radius: width * 2,\n *        fill: new Fill({\n *          color: blue,\n *        }),\n *        stroke: new Stroke({\n *          color: white,\n *          width: width / 2,\n *        }),\n *      }),\n *      zIndex: Infinity,\n *    }),\n *  ];\n *  styles['MultiPoint'] =\n *      styles['Point'];\n *  styles['GeometryCollection'] =\n *      styles['Polygon'].concat(\n *          styles['LineString'],\n *          styles['Point']\n *      );\n * ```\n *\n * @api\n */\nvar Style = /** @class */ (function () {\n    /**\n     * @param {Options} [opt_options] Style options.\n     */\n    function Style(opt_options) {\n        var options = opt_options || {};\n        /**\n         * @private\n         * @type {string|import(\"../geom/Geometry.js\").default|GeometryFunction}\n         */\n        this.geometry_ = null;\n        /**\n         * @private\n         * @type {!GeometryFunction}\n         */\n        this.geometryFunction_ = defaultGeometryFunction;\n        if (options.geometry !== undefined) {\n            this.setGeometry(options.geometry);\n        }\n        /**\n         * @private\n         * @type {import(\"./Fill.js\").default}\n         */\n        this.fill_ = options.fill !== undefined ? options.fill : null;\n        /**\n         * @private\n         * @type {import(\"./Image.js\").default}\n         */\n        this.image_ = options.image !== undefined ? options.image : null;\n        /**\n         * @private\n         * @type {RenderFunction|null}\n         */\n        this.renderer_ = options.renderer !== undefined ? options.renderer : null;\n        /**\n         * @private\n         * @type {RenderFunction|null}\n         */\n        this.hitDetectionRenderer_ =\n            options.hitDetectionRenderer !== undefined\n                ? options.hitDetectionRenderer\n                : null;\n        /**\n         * @private\n         * @type {import(\"./Stroke.js\").default}\n         */\n        this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n        /**\n         * @private\n         * @type {import(\"./Text.js\").default}\n         */\n        this.text_ = options.text !== undefined ? options.text : null;\n        /**\n         * @private\n         * @type {number|undefined}\n         */\n        this.zIndex_ = options.zIndex;\n    }\n    /**\n     * Clones the style.\n     * @return {Style} The cloned style.\n     * @api\n     */\n    Style.prototype.clone = function () {\n        var geometry = this.getGeometry();\n        if (geometry && typeof geometry === 'object') {\n            geometry = /** @type {import(\"../geom/Geometry.js\").default} */ (geometry).clone();\n        }\n        return new Style({\n            geometry: geometry,\n            fill: this.getFill() ? this.getFill().clone() : undefined,\n            image: this.getImage() ? this.getImage().clone() : undefined,\n            renderer: this.getRenderer(),\n            stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n            text: this.getText() ? this.getText().clone() : undefined,\n            zIndex: this.getZIndex(),\n        });\n    };\n    /**\n     * Get the custom renderer function that was configured with\n     * {@link #setRenderer} or the `renderer` constructor option.\n     * @return {RenderFunction|null} Custom renderer function.\n     * @api\n     */\n    Style.prototype.getRenderer = function () {\n        return this.renderer_;\n    };\n    /**\n     * Sets a custom renderer function for this style. When set, `fill`, `stroke`\n     * and `image` options of the style will be ignored.\n     * @param {RenderFunction|null} renderer Custom renderer function.\n     * @api\n     */\n    Style.prototype.setRenderer = function (renderer) {\n        this.renderer_ = renderer;\n    };\n    /**\n     * Sets a custom renderer function for this style used\n     * in hit detection.\n     * @param {RenderFunction|null} renderer Custom renderer function.\n     * @api\n     */\n    Style.prototype.setHitDetectionRenderer = function (renderer) {\n        this.hitDetectionRenderer_ = renderer;\n    };\n    /**\n     * Get the custom renderer function that was configured with\n     * {@link #setHitDetectionRenderer} or the `hitDetectionRenderer` constructor option.\n     * @return {RenderFunction|null} Custom renderer function.\n     * @api\n     */\n    Style.prototype.getHitDetectionRenderer = function () {\n        return this.hitDetectionRenderer_;\n    };\n    /**\n     * Get the geometry to be rendered.\n     * @return {string|import(\"../geom/Geometry.js\").default|GeometryFunction}\n     * Feature property or geometry or function that returns the geometry that will\n     * be rendered with this style.\n     * @api\n     */\n    Style.prototype.getGeometry = function () {\n        return this.geometry_;\n    };\n    /**\n     * Get the function used to generate a geometry for rendering.\n     * @return {!GeometryFunction} Function that is called with a feature\n     * and returns the geometry to render instead of the feature's geometry.\n     * @api\n     */\n    Style.prototype.getGeometryFunction = function () {\n        return this.geometryFunction_;\n    };\n    /**\n     * Get the fill style.\n     * @return {import(\"./Fill.js\").default} Fill style.\n     * @api\n     */\n    Style.prototype.getFill = function () {\n        return this.fill_;\n    };\n    /**\n     * Set the fill style.\n     * @param {import(\"./Fill.js\").default} fill Fill style.\n     * @api\n     */\n    Style.prototype.setFill = function (fill) {\n        this.fill_ = fill;\n    };\n    /**\n     * Get the image style.\n     * @return {import(\"./Image.js\").default} Image style.\n     * @api\n     */\n    Style.prototype.getImage = function () {\n        return this.image_;\n    };\n    /**\n     * Set the image style.\n     * @param {import(\"./Image.js\").default} image Image style.\n     * @api\n     */\n    Style.prototype.setImage = function (image) {\n        this.image_ = image;\n    };\n    /**\n     * Get the stroke style.\n     * @return {import(\"./Stroke.js\").default} Stroke style.\n     * @api\n     */\n    Style.prototype.getStroke = function () {\n        return this.stroke_;\n    };\n    /**\n     * Set the stroke style.\n     * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n     * @api\n     */\n    Style.prototype.setStroke = function (stroke) {\n        this.stroke_ = stroke;\n    };\n    /**\n     * Get the text style.\n     * @return {import(\"./Text.js\").default} Text style.\n     * @api\n     */\n    Style.prototype.getText = function () {\n        return this.text_;\n    };\n    /**\n     * Set the text style.\n     * @param {import(\"./Text.js\").default} text Text style.\n     * @api\n     */\n    Style.prototype.setText = function (text) {\n        this.text_ = text;\n    };\n    /**\n     * Get the z-index for the style.\n     * @return {number|undefined} ZIndex.\n     * @api\n     */\n    Style.prototype.getZIndex = function () {\n        return this.zIndex_;\n    };\n    /**\n     * Set a geometry that is rendered instead of the feature's geometry.\n     *\n     * @param {string|import(\"../geom/Geometry.js\").default|GeometryFunction} geometry\n     *     Feature property or geometry or function returning a geometry to render\n     *     for this style.\n     * @api\n     */\n    Style.prototype.setGeometry = function (geometry) {\n        if (typeof geometry === 'function') {\n            this.geometryFunction_ = geometry;\n        }\n        else if (typeof geometry === 'string') {\n            this.geometryFunction_ = function (feature) {\n                return /** @type {import(\"../geom/Geometry.js\").default} */ (feature.get(geometry));\n            };\n        }\n        else if (!geometry) {\n            this.geometryFunction_ = defaultGeometryFunction;\n        }\n        else if (geometry !== undefined) {\n            this.geometryFunction_ = function () {\n                return /** @type {import(\"../geom/Geometry.js\").default} */ (geometry);\n            };\n        }\n        this.geometry_ = geometry;\n    };\n    /**\n     * Set the z-index.\n     *\n     * @param {number|undefined} zIndex ZIndex.\n     * @api\n     */\n    Style.prototype.setZIndex = function (zIndex) {\n        this.zIndex_ = zIndex;\n    };\n    return Style;\n}());\n/**\n * Convert the provided object into a style function.  Functions passed through\n * unchanged.  Arrays of Style or single style objects wrapped in a\n * new style function.\n * @param {StyleFunction|Array<Style>|Style} obj\n *     A style function, a single style, or an array of styles.\n * @return {StyleFunction} A style function.\n */\nexport function toFunction(obj) {\n    var styleFunction;\n    if (typeof obj === 'function') {\n        styleFunction = obj;\n    }\n    else {\n        /**\n         * @type {Array<Style>}\n         */\n        var styles_1;\n        if (Array.isArray(obj)) {\n            styles_1 = obj;\n        }\n        else {\n            assert(typeof ( /** @type {?} */(obj).getZIndex) === 'function', 41); // Expected an `Style` or an array of `Style`\n            var style = /** @type {Style} */ (obj);\n            styles_1 = [style];\n        }\n        styleFunction = function () {\n            return styles_1;\n        };\n    }\n    return styleFunction;\n}\n/**\n * @type {Array<Style>|null}\n */\nvar defaultStyles = null;\n/**\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {number} resolution Resolution.\n * @return {Array<Style>} Style.\n */\nexport function createDefaultStyle(feature, resolution) {\n    // We don't use an immediately-invoked function\n    // and a closure so we don't get an error at script evaluation time in\n    // browsers that do not support Canvas. (import(\"./Circle.js\").CircleStyle does\n    // canvas.getContext('2d') at construction time, which will cause an.error\n    // in such browsers.)\n    if (!defaultStyles) {\n        var fill = new Fill({\n            color: 'rgba(255,255,255,0.4)',\n        });\n        var stroke = new Stroke({\n            color: '#3399CC',\n            width: 1.25,\n        });\n        defaultStyles = [\n            new Style({\n                image: new CircleStyle({\n                    fill: fill,\n                    stroke: stroke,\n                    radius: 5,\n                }),\n                fill: fill,\n                stroke: stroke,\n            }),\n        ];\n    }\n    return defaultStyles;\n}\n/**\n * Default styles for editing features.\n * @return {Object<import(\"../geom/Geometry.js\").Type, Array<Style>>} Styles\n */\nexport function createEditingStyle() {\n    /** @type {Object<import(\"../geom/Geometry.js\").Type, Array<Style>>} */\n    var styles = {};\n    var white = [255, 255, 255, 1];\n    var blue = [0, 153, 255, 1];\n    var width = 3;\n    styles['Polygon'] = [\n        new Style({\n            fill: new Fill({\n                color: [255, 255, 255, 0.5],\n            }),\n        }),\n    ];\n    styles['MultiPolygon'] = styles['Polygon'];\n    styles['LineString'] = [\n        new Style({\n            stroke: new Stroke({\n                color: white,\n                width: width + 2,\n            }),\n        }),\n        new Style({\n            stroke: new Stroke({\n                color: blue,\n                width: width,\n            }),\n        }),\n    ];\n    styles['MultiLineString'] = styles['LineString'];\n    styles['Circle'] = styles['Polygon'].concat(styles['LineString']);\n    styles['Point'] = [\n        new Style({\n            image: new CircleStyle({\n                radius: width * 2,\n                fill: new Fill({\n                    color: blue,\n                }),\n                stroke: new Stroke({\n                    color: white,\n                    width: width / 2,\n                }),\n            }),\n            zIndex: Infinity,\n        }),\n    ];\n    styles['MultiPoint'] = styles['Point'];\n    styles['GeometryCollection'] = styles['Polygon'].concat(styles['LineString'], styles['Point']);\n    return styles;\n}\n/**\n * Function that is called with a feature and returns its default geometry.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature to get the geometry for.\n * @return {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined} Geometry to render.\n */\nfunction defaultGeometryFunction(feature) {\n    return feature.getGeometry();\n}\nexport default Style;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}