{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/geom/MultiPoint\n */\n\n\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { closestSquaredDistanceXY, containsXY } from '../extent.js';\nimport { deflateCoordinates } from './flat/deflate.js';\nimport { extend } from '../array.js';\nimport { inflateCoordinates } from './flat/inflate.js';\nimport { squaredDistance as squaredDx } from '../math.js';\n/**\n * @classdesc\n * Multi-point geometry.\n *\n * @api\n */\n\nvar MultiPoint =\n/** @class */\nfunction (_super) {\n  __extends(MultiPoint, _super);\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   */\n\n\n  function MultiPoint(coordinates, opt_layout) {\n    var _this = _super.call(this) || this;\n\n    if (opt_layout && !Array.isArray(coordinates[0])) {\n      _this.setFlatCoordinates(opt_layout,\n      /** @type {Array<number>} */\n      coordinates);\n    } else {\n      _this.setCoordinates(\n      /** @type {Array<import(\"../coordinate.js\").Coordinate>} */\n      coordinates, opt_layout);\n    }\n\n    return _this;\n  }\n  /**\n   * Append the passed point to this multipoint.\n   * @param {Point} point Point.\n   * @api\n   */\n\n\n  MultiPoint.prototype.appendPoint = function (point) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = point.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, point.getFlatCoordinates());\n    }\n\n    this.changed();\n  };\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!MultiPoint} Clone.\n   * @api\n   */\n\n\n  MultiPoint.prototype.clone = function () {\n    var multiPoint = new MultiPoint(this.flatCoordinates.slice(), this.layout);\n    multiPoint.applyProperties(this);\n    return multiPoint;\n  };\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n\n\n  MultiPoint.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n\n    var flatCoordinates = this.flatCoordinates;\n    var stride = this.stride;\n\n    for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      var squaredDistance = squaredDx(x, y, flatCoordinates[i], flatCoordinates[i + 1]);\n\n      if (squaredDistance < minSquaredDistance) {\n        minSquaredDistance = squaredDistance;\n\n        for (var j = 0; j < stride; ++j) {\n          closestPoint[j] = flatCoordinates[i + j];\n        }\n\n        closestPoint.length = stride;\n      }\n    }\n\n    return minSquaredDistance;\n  };\n  /**\n   * Return the coordinates of the multipoint.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @api\n   */\n\n\n  MultiPoint.prototype.getCoordinates = function () {\n    return inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  };\n  /**\n   * Return the point at the specified index.\n   * @param {number} index Index.\n   * @return {Point} Point.\n   * @api\n   */\n\n\n  MultiPoint.prototype.getPoint = function (index) {\n    var n = !this.flatCoordinates ? 0 : this.flatCoordinates.length / this.stride;\n\n    if (index < 0 || n <= index) {\n      return null;\n    }\n\n    return new Point(this.flatCoordinates.slice(index * this.stride, (index + 1) * this.stride), this.layout);\n  };\n  /**\n   * Return the points of this multipoint.\n   * @return {Array<Point>} Points.\n   * @api\n   */\n\n\n  MultiPoint.prototype.getPoints = function () {\n    var flatCoordinates = this.flatCoordinates;\n    var layout = this.layout;\n    var stride = this.stride;\n    /** @type {Array<Point>} */\n\n    var points = [];\n\n    for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      var point = new Point(flatCoordinates.slice(i, i + stride), layout);\n      points.push(point);\n    }\n\n    return points;\n  };\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n\n\n  MultiPoint.prototype.getType = function () {\n    return 'MultiPoint';\n  };\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n\n\n  MultiPoint.prototype.intersectsExtent = function (extent) {\n    var flatCoordinates = this.flatCoordinates;\n    var stride = this.stride;\n\n    for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      var x = flatCoordinates[i];\n      var y = flatCoordinates[i + 1];\n\n      if (containsXY(extent, x, y)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Set the coordinates of the multipoint.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   * @api\n   */\n\n\n  MultiPoint.prototype.setCoordinates = function (coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 1);\n\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n\n    this.flatCoordinates.length = deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  };\n\n  return MultiPoint;\n}(SimpleGeometry);\n\nexport default MultiPoint;","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","Point","SimpleGeometry","closestSquaredDistanceXY","containsXY","deflateCoordinates","extend","inflateCoordinates","squaredDistance","squaredDx","MultiPoint","_super","coordinates","opt_layout","_this","isArray","setFlatCoordinates","setCoordinates","appendPoint","point","flatCoordinates","getFlatCoordinates","slice","changed","clone","multiPoint","layout","applyProperties","closestPointXY","x","y","closestPoint","minSquaredDistance","getExtent","stride","i","ii","length","j","getCoordinates","getPoint","index","n","getPoints","points","push","getType","intersectsExtent","extent","setLayout"],"sources":["/home/asura/github/smartcity/node_modules/ol/geom/MultiPoint.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/geom/MultiPoint\n */\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { closestSquaredDistanceXY, containsXY } from '../extent.js';\nimport { deflateCoordinates } from './flat/deflate.js';\nimport { extend } from '../array.js';\nimport { inflateCoordinates } from './flat/inflate.js';\nimport { squaredDistance as squaredDx } from '../math.js';\n/**\n * @classdesc\n * Multi-point geometry.\n *\n * @api\n */\nvar MultiPoint = /** @class */ (function (_super) {\n    __extends(MultiPoint, _super);\n    /**\n     * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n     *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.\n     * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n     */\n    function MultiPoint(coordinates, opt_layout) {\n        var _this = _super.call(this) || this;\n        if (opt_layout && !Array.isArray(coordinates[0])) {\n            _this.setFlatCoordinates(opt_layout, \n            /** @type {Array<number>} */ (coordinates));\n        }\n        else {\n            _this.setCoordinates(\n            /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (coordinates), opt_layout);\n        }\n        return _this;\n    }\n    /**\n     * Append the passed point to this multipoint.\n     * @param {Point} point Point.\n     * @api\n     */\n    MultiPoint.prototype.appendPoint = function (point) {\n        if (!this.flatCoordinates) {\n            this.flatCoordinates = point.getFlatCoordinates().slice();\n        }\n        else {\n            extend(this.flatCoordinates, point.getFlatCoordinates());\n        }\n        this.changed();\n    };\n    /**\n     * Make a complete copy of the geometry.\n     * @return {!MultiPoint} Clone.\n     * @api\n     */\n    MultiPoint.prototype.clone = function () {\n        var multiPoint = new MultiPoint(this.flatCoordinates.slice(), this.layout);\n        multiPoint.applyProperties(this);\n        return multiPoint;\n    };\n    /**\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n     * @param {number} minSquaredDistance Minimum squared distance.\n     * @return {number} Minimum squared distance.\n     */\n    MultiPoint.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n        if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n            return minSquaredDistance;\n        }\n        var flatCoordinates = this.flatCoordinates;\n        var stride = this.stride;\n        for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n            var squaredDistance = squaredDx(x, y, flatCoordinates[i], flatCoordinates[i + 1]);\n            if (squaredDistance < minSquaredDistance) {\n                minSquaredDistance = squaredDistance;\n                for (var j = 0; j < stride; ++j) {\n                    closestPoint[j] = flatCoordinates[i + j];\n                }\n                closestPoint.length = stride;\n            }\n        }\n        return minSquaredDistance;\n    };\n    /**\n     * Return the coordinates of the multipoint.\n     * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n     * @api\n     */\n    MultiPoint.prototype.getCoordinates = function () {\n        return inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n    };\n    /**\n     * Return the point at the specified index.\n     * @param {number} index Index.\n     * @return {Point} Point.\n     * @api\n     */\n    MultiPoint.prototype.getPoint = function (index) {\n        var n = !this.flatCoordinates\n            ? 0\n            : this.flatCoordinates.length / this.stride;\n        if (index < 0 || n <= index) {\n            return null;\n        }\n        return new Point(this.flatCoordinates.slice(index * this.stride, (index + 1) * this.stride), this.layout);\n    };\n    /**\n     * Return the points of this multipoint.\n     * @return {Array<Point>} Points.\n     * @api\n     */\n    MultiPoint.prototype.getPoints = function () {\n        var flatCoordinates = this.flatCoordinates;\n        var layout = this.layout;\n        var stride = this.stride;\n        /** @type {Array<Point>} */\n        var points = [];\n        for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n            var point = new Point(flatCoordinates.slice(i, i + stride), layout);\n            points.push(point);\n        }\n        return points;\n    };\n    /**\n     * Get the type of this geometry.\n     * @return {import(\"./Geometry.js\").Type} Geometry type.\n     * @api\n     */\n    MultiPoint.prototype.getType = function () {\n        return 'MultiPoint';\n    };\n    /**\n     * Test if the geometry and the passed extent intersect.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @return {boolean} `true` if the geometry and the extent intersect.\n     * @api\n     */\n    MultiPoint.prototype.intersectsExtent = function (extent) {\n        var flatCoordinates = this.flatCoordinates;\n        var stride = this.stride;\n        for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n            var x = flatCoordinates[i];\n            var y = flatCoordinates[i + 1];\n            if (containsXY(extent, x, y)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * Set the coordinates of the multipoint.\n     * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n     * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n     * @api\n     */\n    MultiPoint.prototype.setCoordinates = function (coordinates, opt_layout) {\n        this.setLayout(opt_layout, coordinates, 1);\n        if (!this.flatCoordinates) {\n            this.flatCoordinates = [];\n        }\n        this.flatCoordinates.length = deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);\n        this.changed();\n    };\n    return MultiPoint;\n}(SimpleGeometry));\nexport default MultiPoint;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}