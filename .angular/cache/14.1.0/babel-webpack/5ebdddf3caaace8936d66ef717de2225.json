{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/geom/LineString\n */\n\n\nimport GeometryLayout from './GeometryLayout.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { assignClosestPoint, maxSquaredDelta } from './flat/closest.js';\nimport { closestSquaredDistanceXY } from '../extent.js';\nimport { deflateCoordinates } from './flat/deflate.js';\nimport { douglasPeucker } from './flat/simplify.js';\nimport { extend } from '../array.js';\nimport { forEach as forEachSegment } from './flat/segments.js';\nimport { inflateCoordinates } from './flat/inflate.js';\nimport { interpolatePoint, lineStringCoordinateAtM } from './flat/interpolate.js';\nimport { intersectsLineString } from './flat/intersectsextent.js';\nimport { lineStringLength } from './flat/length.js';\n/**\n * @classdesc\n * Linestring geometry.\n *\n * @api\n */\n\nvar LineString =\n/** @class */\nfunction (_super) {\n  __extends(LineString, _super);\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   */\n\n\n  function LineString(coordinates, opt_layout) {\n    var _this = _super.call(this) || this;\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n\n\n    _this.flatMidpoint_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.flatMidpointRevision_ = -1;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.maxDelta_ = -1;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.maxDeltaRevision_ = -1;\n\n    if (opt_layout !== undefined && !Array.isArray(coordinates[0])) {\n      _this.setFlatCoordinates(opt_layout,\n      /** @type {Array<number>} */\n      coordinates);\n    } else {\n      _this.setCoordinates(\n      /** @type {Array<import(\"../coordinate.js\").Coordinate>} */\n      coordinates, opt_layout);\n    }\n\n    return _this;\n  }\n  /**\n   * Append the passed coordinate to the coordinates of the linestring.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @api\n   */\n\n\n  LineString.prototype.appendCoordinate = function (coordinate) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = coordinate.slice();\n    } else {\n      extend(this.flatCoordinates, coordinate);\n    }\n\n    this.changed();\n  };\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!LineString} Clone.\n   * @api\n   */\n\n\n  LineString.prototype.clone = function () {\n    var lineString = new LineString(this.flatCoordinates.slice(), this.layout);\n    lineString.applyProperties(this);\n    return lineString;\n  };\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n\n\n  LineString.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(maxSquaredDelta(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n\n    return assignClosestPoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);\n  };\n  /**\n   * Iterate over each segment, calling the provided callback.\n   * If the callback returns a truthy value the function returns that\n   * value immediately. Otherwise the function returns `false`.\n   *\n   * @param {function(this: S, import(\"../coordinate.js\").Coordinate, import(\"../coordinate.js\").Coordinate): T} callback Function\n   *     called for each segment. The function will receive two arguments, the start and end coordinates of the segment.\n   * @return {T|boolean} Value.\n   * @template T,S\n   * @api\n   */\n\n\n  LineString.prototype.forEachSegment = function (callback) {\n    return forEachSegment(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, callback);\n  };\n  /**\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\n   * such coordinate exists.\n   *\n   * `opt_extrapolate` controls extrapolation beyond the range of Ms in the\n   * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first\n   * M will return the first coordinate and Ms greater than the last M will\n   * return the last coordinate.\n   *\n   * @param {number} m M.\n   * @param {boolean} [opt_extrapolate] Extrapolate. Default is `false`.\n   * @return {import(\"../coordinate.js\").Coordinate|null} Coordinate.\n   * @api\n   */\n\n\n  LineString.prototype.getCoordinateAtM = function (m, opt_extrapolate) {\n    if (this.layout != GeometryLayout.XYM && this.layout != GeometryLayout.XYZM) {\n      return null;\n    }\n\n    var extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;\n    return lineStringCoordinateAtM(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, m, extrapolate);\n  };\n  /**\n   * Return the coordinates of the linestring.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @api\n   */\n\n\n  LineString.prototype.getCoordinates = function () {\n    return inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  };\n  /**\n   * Return the coordinate at the provided fraction along the linestring.\n   * The `fraction` is a number between 0 and 1, where 0 is the start of the\n   * linestring and 1 is the end.\n   * @param {number} fraction Fraction.\n   * @param {import(\"../coordinate.js\").Coordinate} [opt_dest] Optional coordinate whose values will\n   *     be modified. If not provided, a new coordinate will be returned.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinate of the interpolated point.\n   * @api\n   */\n\n\n  LineString.prototype.getCoordinateAt = function (fraction, opt_dest) {\n    return interpolatePoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, fraction, opt_dest, this.stride);\n  };\n  /**\n   * Return the length of the linestring on projected plane.\n   * @return {number} Length (on projected plane).\n   * @api\n   */\n\n\n  LineString.prototype.getLength = function () {\n    return lineStringLength(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  };\n  /**\n   * @return {Array<number>} Flat midpoint.\n   */\n\n\n  LineString.prototype.getFlatMidpoint = function () {\n    if (this.flatMidpointRevision_ != this.getRevision()) {\n      this.flatMidpoint_ = this.getCoordinateAt(0.5, this.flatMidpoint_);\n      this.flatMidpointRevision_ = this.getRevision();\n    }\n\n    return this.flatMidpoint_;\n  };\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {LineString} Simplified LineString.\n   * @protected\n   */\n\n\n  LineString.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {\n    var simplifiedFlatCoordinates = [];\n    simplifiedFlatCoordinates.length = douglasPeucker(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0);\n    return new LineString(simplifiedFlatCoordinates, GeometryLayout.XY);\n  };\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n\n\n  LineString.prototype.getType = function () {\n    return 'LineString';\n  };\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n\n\n  LineString.prototype.intersectsExtent = function (extent) {\n    return intersectsLineString(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent);\n  };\n  /**\n   * Set the coordinates of the linestring.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   * @api\n   */\n\n\n  LineString.prototype.setCoordinates = function (coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 1);\n\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n\n    this.flatCoordinates.length = deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  };\n\n  return LineString;\n}(SimpleGeometry);\n\nexport default LineString;","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","GeometryLayout","SimpleGeometry","assignClosestPoint","maxSquaredDelta","closestSquaredDistanceXY","deflateCoordinates","douglasPeucker","extend","forEach","forEachSegment","inflateCoordinates","interpolatePoint","lineStringCoordinateAtM","intersectsLineString","lineStringLength","LineString","_super","coordinates","opt_layout","_this","flatMidpoint_","flatMidpointRevision_","maxDelta_","maxDeltaRevision_","undefined","isArray","setFlatCoordinates","setCoordinates","appendCoordinate","coordinate","flatCoordinates","slice","changed","clone","lineString","layout","applyProperties","closestPointXY","x","y","closestPoint","minSquaredDistance","getExtent","getRevision","Math","sqrt","length","stride","callback","getCoordinateAtM","m","opt_extrapolate","XYM","XYZM","extrapolate","getCoordinates","getCoordinateAt","fraction","opt_dest","getLength","getFlatMidpoint","getSimplifiedGeometryInternal","squaredTolerance","simplifiedFlatCoordinates","XY","getType","intersectsExtent","extent","setLayout"],"sources":["/home/asura/github/smartcity/node_modules/ol/geom/LineString.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/geom/LineString\n */\nimport GeometryLayout from './GeometryLayout.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { assignClosestPoint, maxSquaredDelta } from './flat/closest.js';\nimport { closestSquaredDistanceXY } from '../extent.js';\nimport { deflateCoordinates } from './flat/deflate.js';\nimport { douglasPeucker } from './flat/simplify.js';\nimport { extend } from '../array.js';\nimport { forEach as forEachSegment } from './flat/segments.js';\nimport { inflateCoordinates } from './flat/inflate.js';\nimport { interpolatePoint, lineStringCoordinateAtM } from './flat/interpolate.js';\nimport { intersectsLineString } from './flat/intersectsextent.js';\nimport { lineStringLength } from './flat/length.js';\n/**\n * @classdesc\n * Linestring geometry.\n *\n * @api\n */\nvar LineString = /** @class */ (function (_super) {\n    __extends(LineString, _super);\n    /**\n     * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n     *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.\n     * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n     */\n    function LineString(coordinates, opt_layout) {\n        var _this = _super.call(this) || this;\n        /**\n         * @private\n         * @type {import(\"../coordinate.js\").Coordinate}\n         */\n        _this.flatMidpoint_ = null;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.flatMidpointRevision_ = -1;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.maxDelta_ = -1;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.maxDeltaRevision_ = -1;\n        if (opt_layout !== undefined && !Array.isArray(coordinates[0])) {\n            _this.setFlatCoordinates(opt_layout, \n            /** @type {Array<number>} */ (coordinates));\n        }\n        else {\n            _this.setCoordinates(\n            /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (coordinates), opt_layout);\n        }\n        return _this;\n    }\n    /**\n     * Append the passed coordinate to the coordinates of the linestring.\n     * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @api\n     */\n    LineString.prototype.appendCoordinate = function (coordinate) {\n        if (!this.flatCoordinates) {\n            this.flatCoordinates = coordinate.slice();\n        }\n        else {\n            extend(this.flatCoordinates, coordinate);\n        }\n        this.changed();\n    };\n    /**\n     * Make a complete copy of the geometry.\n     * @return {!LineString} Clone.\n     * @api\n     */\n    LineString.prototype.clone = function () {\n        var lineString = new LineString(this.flatCoordinates.slice(), this.layout);\n        lineString.applyProperties(this);\n        return lineString;\n    };\n    /**\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n     * @param {number} minSquaredDistance Minimum squared distance.\n     * @return {number} Minimum squared distance.\n     */\n    LineString.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n        if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n            return minSquaredDistance;\n        }\n        if (this.maxDeltaRevision_ != this.getRevision()) {\n            this.maxDelta_ = Math.sqrt(maxSquaredDelta(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));\n            this.maxDeltaRevision_ = this.getRevision();\n        }\n        return assignClosestPoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);\n    };\n    /**\n     * Iterate over each segment, calling the provided callback.\n     * If the callback returns a truthy value the function returns that\n     * value immediately. Otherwise the function returns `false`.\n     *\n     * @param {function(this: S, import(\"../coordinate.js\").Coordinate, import(\"../coordinate.js\").Coordinate): T} callback Function\n     *     called for each segment. The function will receive two arguments, the start and end coordinates of the segment.\n     * @return {T|boolean} Value.\n     * @template T,S\n     * @api\n     */\n    LineString.prototype.forEachSegment = function (callback) {\n        return forEachSegment(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, callback);\n    };\n    /**\n     * Returns the coordinate at `m` using linear interpolation, or `null` if no\n     * such coordinate exists.\n     *\n     * `opt_extrapolate` controls extrapolation beyond the range of Ms in the\n     * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first\n     * M will return the first coordinate and Ms greater than the last M will\n     * return the last coordinate.\n     *\n     * @param {number} m M.\n     * @param {boolean} [opt_extrapolate] Extrapolate. Default is `false`.\n     * @return {import(\"../coordinate.js\").Coordinate|null} Coordinate.\n     * @api\n     */\n    LineString.prototype.getCoordinateAtM = function (m, opt_extrapolate) {\n        if (this.layout != GeometryLayout.XYM &&\n            this.layout != GeometryLayout.XYZM) {\n            return null;\n        }\n        var extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;\n        return lineStringCoordinateAtM(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, m, extrapolate);\n    };\n    /**\n     * Return the coordinates of the linestring.\n     * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n     * @api\n     */\n    LineString.prototype.getCoordinates = function () {\n        return inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n    };\n    /**\n     * Return the coordinate at the provided fraction along the linestring.\n     * The `fraction` is a number between 0 and 1, where 0 is the start of the\n     * linestring and 1 is the end.\n     * @param {number} fraction Fraction.\n     * @param {import(\"../coordinate.js\").Coordinate} [opt_dest] Optional coordinate whose values will\n     *     be modified. If not provided, a new coordinate will be returned.\n     * @return {import(\"../coordinate.js\").Coordinate} Coordinate of the interpolated point.\n     * @api\n     */\n    LineString.prototype.getCoordinateAt = function (fraction, opt_dest) {\n        return interpolatePoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, fraction, opt_dest, this.stride);\n    };\n    /**\n     * Return the length of the linestring on projected plane.\n     * @return {number} Length (on projected plane).\n     * @api\n     */\n    LineString.prototype.getLength = function () {\n        return lineStringLength(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n    };\n    /**\n     * @return {Array<number>} Flat midpoint.\n     */\n    LineString.prototype.getFlatMidpoint = function () {\n        if (this.flatMidpointRevision_ != this.getRevision()) {\n            this.flatMidpoint_ = this.getCoordinateAt(0.5, this.flatMidpoint_);\n            this.flatMidpointRevision_ = this.getRevision();\n        }\n        return this.flatMidpoint_;\n    };\n    /**\n     * @param {number} squaredTolerance Squared tolerance.\n     * @return {LineString} Simplified LineString.\n     * @protected\n     */\n    LineString.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {\n        var simplifiedFlatCoordinates = [];\n        simplifiedFlatCoordinates.length = douglasPeucker(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0);\n        return new LineString(simplifiedFlatCoordinates, GeometryLayout.XY);\n    };\n    /**\n     * Get the type of this geometry.\n     * @return {import(\"./Geometry.js\").Type} Geometry type.\n     * @api\n     */\n    LineString.prototype.getType = function () {\n        return 'LineString';\n    };\n    /**\n     * Test if the geometry and the passed extent intersect.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @return {boolean} `true` if the geometry and the extent intersect.\n     * @api\n     */\n    LineString.prototype.intersectsExtent = function (extent) {\n        return intersectsLineString(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent);\n    };\n    /**\n     * Set the coordinates of the linestring.\n     * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n     * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n     * @api\n     */\n    LineString.prototype.setCoordinates = function (coordinates, opt_layout) {\n        this.setLayout(opt_layout, coordinates, 1);\n        if (!this.flatCoordinates) {\n            this.flatCoordinates = [];\n        }\n        this.flatCoordinates.length = deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);\n        this.changed();\n    };\n    return LineString;\n}(SimpleGeometry));\nexport default LineString;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}