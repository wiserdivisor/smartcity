{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/geom/GeometryCollection\n */\n\n\nimport EventType from '../events/EventType.js';\nimport Geometry from './Geometry.js';\nimport { closestSquaredDistanceXY, createOrUpdateEmpty, extend, getCenter } from '../extent.js';\nimport { listen, unlistenByKey } from '../events.js';\n/**\n * @classdesc\n * An array of {@link module:ol/geom/Geometry~Geometry} objects.\n *\n * @api\n */\n\nvar GeometryCollection =\n/** @class */\nfunction (_super) {\n  __extends(GeometryCollection, _super);\n  /**\n   * @param {Array<Geometry>} [opt_geometries] Geometries.\n   */\n\n\n  function GeometryCollection(opt_geometries) {\n    var _this = _super.call(this) || this;\n    /**\n     * @private\n     * @type {Array<Geometry>}\n     */\n\n\n    _this.geometries_ = opt_geometries ? opt_geometries : null;\n    /**\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n\n    _this.changeEventsKeys_ = [];\n\n    _this.listenGeometriesChange_();\n\n    return _this;\n  }\n  /**\n   * @private\n   */\n\n\n  GeometryCollection.prototype.unlistenGeometriesChange_ = function () {\n    this.changeEventsKeys_.forEach(unlistenByKey);\n    this.changeEventsKeys_.length = 0;\n  };\n  /**\n   * @private\n   */\n\n\n  GeometryCollection.prototype.listenGeometriesChange_ = function () {\n    if (!this.geometries_) {\n      return;\n    }\n\n    for (var i = 0, ii = this.geometries_.length; i < ii; ++i) {\n      this.changeEventsKeys_.push(listen(this.geometries_[i], EventType.CHANGE, this.changed, this));\n    }\n  };\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!GeometryCollection} Clone.\n   * @api\n   */\n\n\n  GeometryCollection.prototype.clone = function () {\n    var geometryCollection = new GeometryCollection(null);\n    geometryCollection.setGeometries(this.geometries_);\n    geometryCollection.applyProperties(this);\n    return geometryCollection;\n  };\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n\n\n  GeometryCollection.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n\n    var geometries = this.geometries_;\n\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      minSquaredDistance = geometries[i].closestPointXY(x, y, closestPoint, minSquaredDistance);\n    }\n\n    return minSquaredDistance;\n  };\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n\n\n  GeometryCollection.prototype.containsXY = function (x, y) {\n    var geometries = this.geometries_;\n\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].containsXY(x, y)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n\n\n  GeometryCollection.prototype.computeExtent = function (extent) {\n    createOrUpdateEmpty(extent);\n    var geometries = this.geometries_;\n\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      extend(extent, geometries[i].getExtent());\n    }\n\n    return extent;\n  };\n  /**\n   * Return the geometries that make up this geometry collection.\n   * @return {Array<Geometry>} Geometries.\n   * @api\n   */\n\n\n  GeometryCollection.prototype.getGeometries = function () {\n    return cloneGeometries(this.geometries_);\n  };\n  /**\n   * @return {Array<Geometry>} Geometries.\n   */\n\n\n  GeometryCollection.prototype.getGeometriesArray = function () {\n    return this.geometries_;\n  };\n  /**\n   * @return {Array<Geometry>} Geometries.\n   */\n\n\n  GeometryCollection.prototype.getGeometriesArrayRecursive = function () {\n    /** @type {Array<Geometry>} */\n    var geometriesArray = [];\n    var geometries = this.geometries_;\n\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].getType() === this.getType()) {\n        geometriesArray = geometriesArray.concat(\n        /** @type {GeometryCollection} */\n        geometries[i].getGeometriesArrayRecursive());\n      } else {\n        geometriesArray.push(geometries[i]);\n      }\n    }\n\n    return geometriesArray;\n  };\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {GeometryCollection} Simplified GeometryCollection.\n   */\n\n\n  GeometryCollection.prototype.getSimplifiedGeometry = function (squaredTolerance) {\n    if (this.simplifiedGeometryRevision !== this.getRevision()) {\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n      this.simplifiedGeometryRevision = this.getRevision();\n    }\n\n    if (squaredTolerance < 0 || this.simplifiedGeometryMaxMinSquaredTolerance !== 0 && squaredTolerance < this.simplifiedGeometryMaxMinSquaredTolerance) {\n      return this;\n    }\n\n    var simplifiedGeometries = [];\n    var geometries = this.geometries_;\n    var simplified = false;\n\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      var geometry = geometries[i];\n      var simplifiedGeometry = geometry.getSimplifiedGeometry(squaredTolerance);\n      simplifiedGeometries.push(simplifiedGeometry);\n\n      if (simplifiedGeometry !== geometry) {\n        simplified = true;\n      }\n    }\n\n    if (simplified) {\n      var simplifiedGeometryCollection = new GeometryCollection(null);\n      simplifiedGeometryCollection.setGeometriesArray(simplifiedGeometries);\n      return simplifiedGeometryCollection;\n    } else {\n      this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n      return this;\n    }\n  };\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n\n\n  GeometryCollection.prototype.getType = function () {\n    return 'GeometryCollection';\n  };\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n\n\n  GeometryCollection.prototype.intersectsExtent = function (extent) {\n    var geometries = this.geometries_;\n\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].intersectsExtent(extent)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * @return {boolean} Is empty.\n   */\n\n\n  GeometryCollection.prototype.isEmpty = function () {\n    return this.geometries_.length === 0;\n  };\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @param {number} angle Rotation angle in radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n\n\n  GeometryCollection.prototype.rotate = function (angle, anchor) {\n    var geometries = this.geometries_;\n\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].rotate(angle, anchor);\n    }\n\n    this.changed();\n  };\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [opt_sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [opt_anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */\n\n\n  GeometryCollection.prototype.scale = function (sx, opt_sy, opt_anchor) {\n    var anchor = opt_anchor;\n\n    if (!anchor) {\n      anchor = getCenter(this.getExtent());\n    }\n\n    var geometries = this.geometries_;\n\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].scale(sx, opt_sy, anchor);\n    }\n\n    this.changed();\n  };\n  /**\n   * Set the geometries that make up this geometry collection.\n   * @param {Array<Geometry>} geometries Geometries.\n   * @api\n   */\n\n\n  GeometryCollection.prototype.setGeometries = function (geometries) {\n    this.setGeometriesArray(cloneGeometries(geometries));\n  };\n  /**\n   * @param {Array<Geometry>} geometries Geometries.\n   */\n\n\n  GeometryCollection.prototype.setGeometriesArray = function (geometries) {\n    this.unlistenGeometriesChange_();\n    this.geometries_ = geometries;\n    this.listenGeometriesChange_();\n    this.changed();\n  };\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   * @api\n   */\n\n\n  GeometryCollection.prototype.applyTransform = function (transformFn) {\n    var geometries = this.geometries_;\n\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].applyTransform(transformFn);\n    }\n\n    this.changed();\n  };\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n\n\n  GeometryCollection.prototype.translate = function (deltaX, deltaY) {\n    var geometries = this.geometries_;\n\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].translate(deltaX, deltaY);\n    }\n\n    this.changed();\n  };\n  /**\n   * Clean up.\n   */\n\n\n  GeometryCollection.prototype.disposeInternal = function () {\n    this.unlistenGeometriesChange_();\n\n    _super.prototype.disposeInternal.call(this);\n  };\n\n  return GeometryCollection;\n}(Geometry);\n/**\n * @param {Array<Geometry>} geometries Geometries.\n * @return {Array<Geometry>} Cloned geometries.\n */\n\n\nfunction cloneGeometries(geometries) {\n  var clonedGeometries = [];\n\n  for (var i = 0, ii = geometries.length; i < ii; ++i) {\n    clonedGeometries.push(geometries[i].clone());\n  }\n\n  return clonedGeometries;\n}\n\nexport default GeometryCollection;","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","EventType","Geometry","closestSquaredDistanceXY","createOrUpdateEmpty","extend","getCenter","listen","unlistenByKey","GeometryCollection","_super","opt_geometries","_this","geometries_","changeEventsKeys_","listenGeometriesChange_","unlistenGeometriesChange_","forEach","length","i","ii","push","CHANGE","changed","clone","geometryCollection","setGeometries","applyProperties","closestPointXY","x","y","closestPoint","minSquaredDistance","getExtent","geometries","containsXY","computeExtent","extent","getGeometries","cloneGeometries","getGeometriesArray","getGeometriesArrayRecursive","geometriesArray","getType","concat","getSimplifiedGeometry","squaredTolerance","simplifiedGeometryRevision","getRevision","simplifiedGeometryMaxMinSquaredTolerance","simplifiedGeometries","simplified","geometry","simplifiedGeometry","simplifiedGeometryCollection","setGeometriesArray","intersectsExtent","isEmpty","rotate","angle","anchor","scale","sx","opt_sy","opt_anchor","applyTransform","transformFn","translate","deltaX","deltaY","disposeInternal","clonedGeometries"],"sources":["/home/asura/github/smartcity/node_modules/ol/geom/GeometryCollection.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/geom/GeometryCollection\n */\nimport EventType from '../events/EventType.js';\nimport Geometry from './Geometry.js';\nimport { closestSquaredDistanceXY, createOrUpdateEmpty, extend, getCenter, } from '../extent.js';\nimport { listen, unlistenByKey } from '../events.js';\n/**\n * @classdesc\n * An array of {@link module:ol/geom/Geometry~Geometry} objects.\n *\n * @api\n */\nvar GeometryCollection = /** @class */ (function (_super) {\n    __extends(GeometryCollection, _super);\n    /**\n     * @param {Array<Geometry>} [opt_geometries] Geometries.\n     */\n    function GeometryCollection(opt_geometries) {\n        var _this = _super.call(this) || this;\n        /**\n         * @private\n         * @type {Array<Geometry>}\n         */\n        _this.geometries_ = opt_geometries ? opt_geometries : null;\n        /**\n         * @type {Array<import(\"../events.js\").EventsKey>}\n         */\n        _this.changeEventsKeys_ = [];\n        _this.listenGeometriesChange_();\n        return _this;\n    }\n    /**\n     * @private\n     */\n    GeometryCollection.prototype.unlistenGeometriesChange_ = function () {\n        this.changeEventsKeys_.forEach(unlistenByKey);\n        this.changeEventsKeys_.length = 0;\n    };\n    /**\n     * @private\n     */\n    GeometryCollection.prototype.listenGeometriesChange_ = function () {\n        if (!this.geometries_) {\n            return;\n        }\n        for (var i = 0, ii = this.geometries_.length; i < ii; ++i) {\n            this.changeEventsKeys_.push(listen(this.geometries_[i], EventType.CHANGE, this.changed, this));\n        }\n    };\n    /**\n     * Make a complete copy of the geometry.\n     * @return {!GeometryCollection} Clone.\n     * @api\n     */\n    GeometryCollection.prototype.clone = function () {\n        var geometryCollection = new GeometryCollection(null);\n        geometryCollection.setGeometries(this.geometries_);\n        geometryCollection.applyProperties(this);\n        return geometryCollection;\n    };\n    /**\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n     * @param {number} minSquaredDistance Minimum squared distance.\n     * @return {number} Minimum squared distance.\n     */\n    GeometryCollection.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n        if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n            return minSquaredDistance;\n        }\n        var geometries = this.geometries_;\n        for (var i = 0, ii = geometries.length; i < ii; ++i) {\n            minSquaredDistance = geometries[i].closestPointXY(x, y, closestPoint, minSquaredDistance);\n        }\n        return minSquaredDistance;\n    };\n    /**\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @return {boolean} Contains (x, y).\n     */\n    GeometryCollection.prototype.containsXY = function (x, y) {\n        var geometries = this.geometries_;\n        for (var i = 0, ii = geometries.length; i < ii; ++i) {\n            if (geometries[i].containsXY(x, y)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @protected\n     * @return {import(\"../extent.js\").Extent} extent Extent.\n     */\n    GeometryCollection.prototype.computeExtent = function (extent) {\n        createOrUpdateEmpty(extent);\n        var geometries = this.geometries_;\n        for (var i = 0, ii = geometries.length; i < ii; ++i) {\n            extend(extent, geometries[i].getExtent());\n        }\n        return extent;\n    };\n    /**\n     * Return the geometries that make up this geometry collection.\n     * @return {Array<Geometry>} Geometries.\n     * @api\n     */\n    GeometryCollection.prototype.getGeometries = function () {\n        return cloneGeometries(this.geometries_);\n    };\n    /**\n     * @return {Array<Geometry>} Geometries.\n     */\n    GeometryCollection.prototype.getGeometriesArray = function () {\n        return this.geometries_;\n    };\n    /**\n     * @return {Array<Geometry>} Geometries.\n     */\n    GeometryCollection.prototype.getGeometriesArrayRecursive = function () {\n        /** @type {Array<Geometry>} */\n        var geometriesArray = [];\n        var geometries = this.geometries_;\n        for (var i = 0, ii = geometries.length; i < ii; ++i) {\n            if (geometries[i].getType() === this.getType()) {\n                geometriesArray = geometriesArray.concat(\n                /** @type {GeometryCollection} */ (geometries[i]).getGeometriesArrayRecursive());\n            }\n            else {\n                geometriesArray.push(geometries[i]);\n            }\n        }\n        return geometriesArray;\n    };\n    /**\n     * Create a simplified version of this geometry using the Douglas Peucker algorithm.\n     * @param {number} squaredTolerance Squared tolerance.\n     * @return {GeometryCollection} Simplified GeometryCollection.\n     */\n    GeometryCollection.prototype.getSimplifiedGeometry = function (squaredTolerance) {\n        if (this.simplifiedGeometryRevision !== this.getRevision()) {\n            this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n            this.simplifiedGeometryRevision = this.getRevision();\n        }\n        if (squaredTolerance < 0 ||\n            (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&\n                squaredTolerance < this.simplifiedGeometryMaxMinSquaredTolerance)) {\n            return this;\n        }\n        var simplifiedGeometries = [];\n        var geometries = this.geometries_;\n        var simplified = false;\n        for (var i = 0, ii = geometries.length; i < ii; ++i) {\n            var geometry = geometries[i];\n            var simplifiedGeometry = geometry.getSimplifiedGeometry(squaredTolerance);\n            simplifiedGeometries.push(simplifiedGeometry);\n            if (simplifiedGeometry !== geometry) {\n                simplified = true;\n            }\n        }\n        if (simplified) {\n            var simplifiedGeometryCollection = new GeometryCollection(null);\n            simplifiedGeometryCollection.setGeometriesArray(simplifiedGeometries);\n            return simplifiedGeometryCollection;\n        }\n        else {\n            this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n            return this;\n        }\n    };\n    /**\n     * Get the type of this geometry.\n     * @return {import(\"./Geometry.js\").Type} Geometry type.\n     * @api\n     */\n    GeometryCollection.prototype.getType = function () {\n        return 'GeometryCollection';\n    };\n    /**\n     * Test if the geometry and the passed extent intersect.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @return {boolean} `true` if the geometry and the extent intersect.\n     * @api\n     */\n    GeometryCollection.prototype.intersectsExtent = function (extent) {\n        var geometries = this.geometries_;\n        for (var i = 0, ii = geometries.length; i < ii; ++i) {\n            if (geometries[i].intersectsExtent(extent)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * @return {boolean} Is empty.\n     */\n    GeometryCollection.prototype.isEmpty = function () {\n        return this.geometries_.length === 0;\n    };\n    /**\n     * Rotate the geometry around a given coordinate. This modifies the geometry\n     * coordinates in place.\n     * @param {number} angle Rotation angle in radians.\n     * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n     * @api\n     */\n    GeometryCollection.prototype.rotate = function (angle, anchor) {\n        var geometries = this.geometries_;\n        for (var i = 0, ii = geometries.length; i < ii; ++i) {\n            geometries[i].rotate(angle, anchor);\n        }\n        this.changed();\n    };\n    /**\n     * Scale the geometry (with an optional origin).  This modifies the geometry\n     * coordinates in place.\n     * @abstract\n     * @param {number} sx The scaling factor in the x-direction.\n     * @param {number} [opt_sy] The scaling factor in the y-direction (defaults to sx).\n     * @param {import(\"../coordinate.js\").Coordinate} [opt_anchor] The scale origin (defaults to the center\n     *     of the geometry extent).\n     * @api\n     */\n    GeometryCollection.prototype.scale = function (sx, opt_sy, opt_anchor) {\n        var anchor = opt_anchor;\n        if (!anchor) {\n            anchor = getCenter(this.getExtent());\n        }\n        var geometries = this.geometries_;\n        for (var i = 0, ii = geometries.length; i < ii; ++i) {\n            geometries[i].scale(sx, opt_sy, anchor);\n        }\n        this.changed();\n    };\n    /**\n     * Set the geometries that make up this geometry collection.\n     * @param {Array<Geometry>} geometries Geometries.\n     * @api\n     */\n    GeometryCollection.prototype.setGeometries = function (geometries) {\n        this.setGeometriesArray(cloneGeometries(geometries));\n    };\n    /**\n     * @param {Array<Geometry>} geometries Geometries.\n     */\n    GeometryCollection.prototype.setGeometriesArray = function (geometries) {\n        this.unlistenGeometriesChange_();\n        this.geometries_ = geometries;\n        this.listenGeometriesChange_();\n        this.changed();\n    };\n    /**\n     * Apply a transform function to the coordinates of the geometry.\n     * The geometry is modified in place.\n     * If you do not want the geometry modified in place, first `clone()` it and\n     * then use this function on the clone.\n     * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n     * Called with a flat array of geometry coordinates.\n     * @api\n     */\n    GeometryCollection.prototype.applyTransform = function (transformFn) {\n        var geometries = this.geometries_;\n        for (var i = 0, ii = geometries.length; i < ii; ++i) {\n            geometries[i].applyTransform(transformFn);\n        }\n        this.changed();\n    };\n    /**\n     * Translate the geometry.  This modifies the geometry coordinates in place.  If\n     * instead you want a new geometry, first `clone()` this geometry.\n     * @param {number} deltaX Delta X.\n     * @param {number} deltaY Delta Y.\n     * @api\n     */\n    GeometryCollection.prototype.translate = function (deltaX, deltaY) {\n        var geometries = this.geometries_;\n        for (var i = 0, ii = geometries.length; i < ii; ++i) {\n            geometries[i].translate(deltaX, deltaY);\n        }\n        this.changed();\n    };\n    /**\n     * Clean up.\n     */\n    GeometryCollection.prototype.disposeInternal = function () {\n        this.unlistenGeometriesChange_();\n        _super.prototype.disposeInternal.call(this);\n    };\n    return GeometryCollection;\n}(Geometry));\n/**\n * @param {Array<Geometry>} geometries Geometries.\n * @return {Array<Geometry>} Cloned geometries.\n */\nfunction cloneGeometries(geometries) {\n    var clonedGeometries = [];\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n        clonedGeometries.push(geometries[i].clone());\n    }\n    return clonedGeometries;\n}\nexport default GeometryCollection;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}