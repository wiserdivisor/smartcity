{"ast":null,"code":"/**\n * @module ol/tilegrid\n */\nimport TileGrid from './tilegrid/TileGrid.js';\nimport Units from './proj/Units.js';\nimport { DEFAULT_MAX_ZOOM, DEFAULT_TILE_SIZE } from './tilegrid/common.js';\nimport { METERS_PER_UNIT, get as getProjection } from './proj.js';\nimport { containsCoordinate, createOrUpdate, getCorner, getHeight, getWidth } from './extent.js';\nimport { toSize } from './size.js';\n/**\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {!TileGrid} Default tile grid for the\n * passed projection.\n */\n\nexport function getForProjection(projection) {\n  var tileGrid = projection.getDefaultTileGrid();\n\n  if (!tileGrid) {\n    tileGrid = createForProjection(projection);\n    projection.setDefaultTileGrid(tileGrid);\n  }\n\n  return tileGrid;\n}\n/**\n * @param {TileGrid} tileGrid Tile grid.\n * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {import(\"./tilecoord.js\").TileCoord} Tile coordinate.\n */\n\nexport function wrapX(tileGrid, tileCoord, projection) {\n  var z = tileCoord[0];\n  var center = tileGrid.getTileCoordCenter(tileCoord);\n  var projectionExtent = extentFromProjection(projection);\n\n  if (!containsCoordinate(projectionExtent, center)) {\n    var worldWidth = getWidth(projectionExtent);\n    var worldsAway = Math.ceil((projectionExtent[0] - center[0]) / worldWidth);\n    center[0] += worldWidth * worldsAway;\n    return tileGrid.getTileCoordForCoordAndZ(center, z);\n  } else {\n    return tileCoord;\n  }\n}\n/**\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} [opt_maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [opt_tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {import(\"./extent.js\").Corner} [opt_corner] Extent corner (default is `'top-left'`).\n * @return {!TileGrid} TileGrid instance.\n */\n\nexport function createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner) {\n  var corner = opt_corner !== undefined ? opt_corner : 'top-left';\n  var resolutions = resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize);\n  return new TileGrid({\n    extent: extent,\n    origin: getCorner(extent, corner),\n    resolutions: resolutions,\n    tileSize: opt_tileSize\n  });\n}\n/**\n * @typedef {Object} XYZOptions\n * @property {import(\"./extent.js\").Extent} [extent] Extent for the tile grid. The origin for an XYZ tile grid is the\n * top-left corner of the extent. If `maxResolution` is not provided the zero level of the grid is defined by the resolution\n * at which one tile fits in the provided extent. If not provided, the extent of the EPSG:3857 projection is used.\n * @property {number} [maxResolution] Resolution at level zero.\n * @property {number} [maxZoom] Maximum zoom. The default is `42`. This determines the number of levels\n * in the grid set. For example, a `maxZoom` of 21 means there are 22 levels in the grid set.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {number|import(\"./size.js\").Size} [tileSize=[256, 256]] Tile size in pixels.\n */\n\n/**\n * Creates a tile grid with a standard XYZ tiling scheme.\n * @param {XYZOptions} [opt_options] Tile grid options.\n * @return {!TileGrid} Tile grid instance.\n * @api\n */\n\nexport function createXYZ(opt_options) {\n  var xyzOptions = opt_options || {};\n  var extent = xyzOptions.extent || getProjection('EPSG:3857').getExtent();\n  var gridOptions = {\n    extent: extent,\n    minZoom: xyzOptions.minZoom,\n    tileSize: xyzOptions.tileSize,\n    resolutions: resolutionsFromExtent(extent, xyzOptions.maxZoom, xyzOptions.tileSize, xyzOptions.maxResolution)\n  };\n  return new TileGrid(gridOptions);\n}\n/**\n * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} [opt_maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [opt_tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {number} [opt_maxResolution] Resolution at level zero.\n * @return {!Array<number>} Resolutions array.\n */\n\nfunction resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize, opt_maxResolution) {\n  var maxZoom = opt_maxZoom !== undefined ? opt_maxZoom : DEFAULT_MAX_ZOOM;\n  var height = getHeight(extent);\n  var width = getWidth(extent);\n  var tileSize = toSize(opt_tileSize !== undefined ? opt_tileSize : DEFAULT_TILE_SIZE);\n  var maxResolution = opt_maxResolution > 0 ? opt_maxResolution : Math.max(width / tileSize[0], height / tileSize[1]);\n  var length = maxZoom + 1;\n  var resolutions = new Array(length);\n\n  for (var z = 0; z < length; ++z) {\n    resolutions[z] = maxResolution / Math.pow(2, z);\n  }\n\n  return resolutions;\n}\n/**\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\n * @param {number} [opt_maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [opt_tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {import(\"./extent.js\").Corner} [opt_corner] Extent corner (default is `'top-left'`).\n * @return {!TileGrid} TileGrid instance.\n */\n\n\nexport function createForProjection(projection, opt_maxZoom, opt_tileSize, opt_corner) {\n  var extent = extentFromProjection(projection);\n  return createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner);\n}\n/**\n * Generate a tile grid extent from a projection.  If the projection has an\n * extent, it is used.  If not, a global extent is assumed.\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\n * @return {import(\"./extent.js\").Extent} Extent.\n */\n\nexport function extentFromProjection(projection) {\n  projection = getProjection(projection);\n  var extent = projection.getExtent();\n\n  if (!extent) {\n    var half = 180 * METERS_PER_UNIT[Units.DEGREES] / projection.getMetersPerUnit();\n    extent = createOrUpdate(-half, -half, half, half);\n  }\n\n  return extent;\n}","map":{"version":3,"names":["TileGrid","Units","DEFAULT_MAX_ZOOM","DEFAULT_TILE_SIZE","METERS_PER_UNIT","get","getProjection","containsCoordinate","createOrUpdate","getCorner","getHeight","getWidth","toSize","getForProjection","projection","tileGrid","getDefaultTileGrid","createForProjection","setDefaultTileGrid","wrapX","tileCoord","z","center","getTileCoordCenter","projectionExtent","extentFromProjection","worldWidth","worldsAway","Math","ceil","getTileCoordForCoordAndZ","createForExtent","extent","opt_maxZoom","opt_tileSize","opt_corner","corner","undefined","resolutions","resolutionsFromExtent","origin","tileSize","createXYZ","opt_options","xyzOptions","getExtent","gridOptions","minZoom","maxZoom","maxResolution","opt_maxResolution","height","width","max","length","Array","pow","half","DEGREES","getMetersPerUnit"],"sources":["/home/asura/github/smartcity/node_modules/ol/tilegrid.js"],"sourcesContent":["/**\n * @module ol/tilegrid\n */\nimport TileGrid from './tilegrid/TileGrid.js';\nimport Units from './proj/Units.js';\nimport { DEFAULT_MAX_ZOOM, DEFAULT_TILE_SIZE } from './tilegrid/common.js';\nimport { METERS_PER_UNIT, get as getProjection } from './proj.js';\nimport { containsCoordinate, createOrUpdate, getCorner, getHeight, getWidth, } from './extent.js';\nimport { toSize } from './size.js';\n/**\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {!TileGrid} Default tile grid for the\n * passed projection.\n */\nexport function getForProjection(projection) {\n    var tileGrid = projection.getDefaultTileGrid();\n    if (!tileGrid) {\n        tileGrid = createForProjection(projection);\n        projection.setDefaultTileGrid(tileGrid);\n    }\n    return tileGrid;\n}\n/**\n * @param {TileGrid} tileGrid Tile grid.\n * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {import(\"./tilecoord.js\").TileCoord} Tile coordinate.\n */\nexport function wrapX(tileGrid, tileCoord, projection) {\n    var z = tileCoord[0];\n    var center = tileGrid.getTileCoordCenter(tileCoord);\n    var projectionExtent = extentFromProjection(projection);\n    if (!containsCoordinate(projectionExtent, center)) {\n        var worldWidth = getWidth(projectionExtent);\n        var worldsAway = Math.ceil((projectionExtent[0] - center[0]) / worldWidth);\n        center[0] += worldWidth * worldsAway;\n        return tileGrid.getTileCoordForCoordAndZ(center, z);\n    }\n    else {\n        return tileCoord;\n    }\n}\n/**\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} [opt_maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [opt_tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {import(\"./extent.js\").Corner} [opt_corner] Extent corner (default is `'top-left'`).\n * @return {!TileGrid} TileGrid instance.\n */\nexport function createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner) {\n    var corner = opt_corner !== undefined ? opt_corner : 'top-left';\n    var resolutions = resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize);\n    return new TileGrid({\n        extent: extent,\n        origin: getCorner(extent, corner),\n        resolutions: resolutions,\n        tileSize: opt_tileSize,\n    });\n}\n/**\n * @typedef {Object} XYZOptions\n * @property {import(\"./extent.js\").Extent} [extent] Extent for the tile grid. The origin for an XYZ tile grid is the\n * top-left corner of the extent. If `maxResolution` is not provided the zero level of the grid is defined by the resolution\n * at which one tile fits in the provided extent. If not provided, the extent of the EPSG:3857 projection is used.\n * @property {number} [maxResolution] Resolution at level zero.\n * @property {number} [maxZoom] Maximum zoom. The default is `42`. This determines the number of levels\n * in the grid set. For example, a `maxZoom` of 21 means there are 22 levels in the grid set.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {number|import(\"./size.js\").Size} [tileSize=[256, 256]] Tile size in pixels.\n */\n/**\n * Creates a tile grid with a standard XYZ tiling scheme.\n * @param {XYZOptions} [opt_options] Tile grid options.\n * @return {!TileGrid} Tile grid instance.\n * @api\n */\nexport function createXYZ(opt_options) {\n    var xyzOptions = opt_options || {};\n    var extent = xyzOptions.extent || getProjection('EPSG:3857').getExtent();\n    var gridOptions = {\n        extent: extent,\n        minZoom: xyzOptions.minZoom,\n        tileSize: xyzOptions.tileSize,\n        resolutions: resolutionsFromExtent(extent, xyzOptions.maxZoom, xyzOptions.tileSize, xyzOptions.maxResolution),\n    };\n    return new TileGrid(gridOptions);\n}\n/**\n * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} [opt_maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [opt_tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {number} [opt_maxResolution] Resolution at level zero.\n * @return {!Array<number>} Resolutions array.\n */\nfunction resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize, opt_maxResolution) {\n    var maxZoom = opt_maxZoom !== undefined ? opt_maxZoom : DEFAULT_MAX_ZOOM;\n    var height = getHeight(extent);\n    var width = getWidth(extent);\n    var tileSize = toSize(opt_tileSize !== undefined ? opt_tileSize : DEFAULT_TILE_SIZE);\n    var maxResolution = opt_maxResolution > 0\n        ? opt_maxResolution\n        : Math.max(width / tileSize[0], height / tileSize[1]);\n    var length = maxZoom + 1;\n    var resolutions = new Array(length);\n    for (var z = 0; z < length; ++z) {\n        resolutions[z] = maxResolution / Math.pow(2, z);\n    }\n    return resolutions;\n}\n/**\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\n * @param {number} [opt_maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [opt_tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {import(\"./extent.js\").Corner} [opt_corner] Extent corner (default is `'top-left'`).\n * @return {!TileGrid} TileGrid instance.\n */\nexport function createForProjection(projection, opt_maxZoom, opt_tileSize, opt_corner) {\n    var extent = extentFromProjection(projection);\n    return createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner);\n}\n/**\n * Generate a tile grid extent from a projection.  If the projection has an\n * extent, it is used.  If not, a global extent is assumed.\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\n * @return {import(\"./extent.js\").Extent} Extent.\n */\nexport function extentFromProjection(projection) {\n    projection = getProjection(projection);\n    var extent = projection.getExtent();\n    if (!extent) {\n        var half = (180 * METERS_PER_UNIT[Units.DEGREES]) / projection.getMetersPerUnit();\n        extent = createOrUpdate(-half, -half, half, half);\n    }\n    return extent;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}