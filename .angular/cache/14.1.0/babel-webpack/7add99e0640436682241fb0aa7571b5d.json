{"ast":null,"code":"/**\n * @module ol/loadingstrategy\n */\nimport { fromUserExtent, fromUserResolution, toUserExtent } from './proj.js';\n/**\n * Strategy function for loading all features with a single request.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\n * @api\n */\n\nexport function all(extent, resolution) {\n  return [[-Infinity, -Infinity, Infinity, Infinity]];\n}\n/**\n * Strategy function for loading features based on the view's extent and\n * resolution.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\n * @api\n */\n\nexport function bbox(extent, resolution) {\n  return [extent];\n}\n/**\n * Creates a strategy function for loading features based on a tile grid.\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {function(import(\"./extent.js\").Extent, number, import(\"./proj.js\").Projection): Array<import(\"./extent.js\").Extent>} Loading strategy.\n * @api\n */\n\nexport function tile(tileGrid) {\n  return (\n    /**\n     * @param {import(\"./extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @param {import(\"./proj.js\").Projection} projection Projection.\n     * @return {Array<import(\"./extent.js\").Extent>} Extents.\n     */\n    function (extent, resolution, projection) {\n      var z = tileGrid.getZForResolution(fromUserResolution(resolution, projection));\n      var tileRange = tileGrid.getTileRangeForExtentAndZ(fromUserExtent(extent, projection), z);\n      /** @type {Array<import(\"./extent.js\").Extent>} */\n\n      var extents = [];\n      /** @type {import(\"./tilecoord.js\").TileCoord} */\n\n      var tileCoord = [z, 0, 0];\n\n      for (tileCoord[1] = tileRange.minX; tileCoord[1] <= tileRange.maxX; ++tileCoord[1]) {\n        for (tileCoord[2] = tileRange.minY; tileCoord[2] <= tileRange.maxY; ++tileCoord[2]) {\n          extents.push(toUserExtent(tileGrid.getTileCoordExtent(tileCoord), projection));\n        }\n      }\n\n      return extents;\n    }\n  );\n}","map":{"version":3,"names":["fromUserExtent","fromUserResolution","toUserExtent","all","extent","resolution","Infinity","bbox","tile","tileGrid","projection","z","getZForResolution","tileRange","getTileRangeForExtentAndZ","extents","tileCoord","minX","maxX","minY","maxY","push","getTileCoordExtent"],"sources":["/home/asura/github/smartcity/node_modules/ol/loadingstrategy.js"],"sourcesContent":["/**\n * @module ol/loadingstrategy\n */\nimport { fromUserExtent, fromUserResolution, toUserExtent } from './proj.js';\n/**\n * Strategy function for loading all features with a single request.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\n * @api\n */\nexport function all(extent, resolution) {\n    return [[-Infinity, -Infinity, Infinity, Infinity]];\n}\n/**\n * Strategy function for loading features based on the view's extent and\n * resolution.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\n * @api\n */\nexport function bbox(extent, resolution) {\n    return [extent];\n}\n/**\n * Creates a strategy function for loading features based on a tile grid.\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {function(import(\"./extent.js\").Extent, number, import(\"./proj.js\").Projection): Array<import(\"./extent.js\").Extent>} Loading strategy.\n * @api\n */\nexport function tile(tileGrid) {\n    return (\n    /**\n     * @param {import(\"./extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @param {import(\"./proj.js\").Projection} projection Projection.\n     * @return {Array<import(\"./extent.js\").Extent>} Extents.\n     */\n    function (extent, resolution, projection) {\n        var z = tileGrid.getZForResolution(fromUserResolution(resolution, projection));\n        var tileRange = tileGrid.getTileRangeForExtentAndZ(fromUserExtent(extent, projection), z);\n        /** @type {Array<import(\"./extent.js\").Extent>} */\n        var extents = [];\n        /** @type {import(\"./tilecoord.js\").TileCoord} */\n        var tileCoord = [z, 0, 0];\n        for (tileCoord[1] = tileRange.minX; tileCoord[1] <= tileRange.maxX; ++tileCoord[1]) {\n            for (tileCoord[2] = tileRange.minY; tileCoord[2] <= tileRange.maxY; ++tileCoord[2]) {\n                extents.push(toUserExtent(tileGrid.getTileCoordExtent(tileCoord), projection));\n            }\n        }\n        return extents;\n    });\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,cAAT,EAAyBC,kBAAzB,EAA6CC,YAA7C,QAAiE,WAAjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,GAAT,CAAaC,MAAb,EAAqBC,UAArB,EAAiC;EACpC,OAAO,CAAC,CAAC,CAACC,QAAF,EAAY,CAACA,QAAb,EAAuBA,QAAvB,EAAiCA,QAAjC,CAAD,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,IAAT,CAAcH,MAAd,EAAsBC,UAAtB,EAAkC;EACrC,OAAO,CAACD,MAAD,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,IAAT,CAAcC,QAAd,EAAwB;EAC3B;IACA;AACJ;AACA;AACA;AACA;AACA;IACI,UAAUL,MAAV,EAAkBC,UAAlB,EAA8BK,UAA9B,EAA0C;MACtC,IAAIC,CAAC,GAAGF,QAAQ,CAACG,iBAAT,CAA2BX,kBAAkB,CAACI,UAAD,EAAaK,UAAb,CAA7C,CAAR;MACA,IAAIG,SAAS,GAAGJ,QAAQ,CAACK,yBAAT,CAAmCd,cAAc,CAACI,MAAD,EAASM,UAAT,CAAjD,EAAuEC,CAAvE,CAAhB;MACA;;MACA,IAAII,OAAO,GAAG,EAAd;MACA;;MACA,IAAIC,SAAS,GAAG,CAACL,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAhB;;MACA,KAAKK,SAAS,CAAC,CAAD,CAAT,GAAeH,SAAS,CAACI,IAA9B,EAAoCD,SAAS,CAAC,CAAD,CAAT,IAAgBH,SAAS,CAACK,IAA9D,EAAoE,EAAEF,SAAS,CAAC,CAAD,CAA/E,EAAoF;QAChF,KAAKA,SAAS,CAAC,CAAD,CAAT,GAAeH,SAAS,CAACM,IAA9B,EAAoCH,SAAS,CAAC,CAAD,CAAT,IAAgBH,SAAS,CAACO,IAA9D,EAAoE,EAAEJ,SAAS,CAAC,CAAD,CAA/E,EAAoF;UAChFD,OAAO,CAACM,IAAR,CAAanB,YAAY,CAACO,QAAQ,CAACa,kBAAT,CAA4BN,SAA5B,CAAD,EAAyCN,UAAzC,CAAzB;QACH;MACJ;;MACD,OAAOK,OAAP;IACH;EApBD;AAqBH"},"metadata":{},"sourceType":"module"}