{"ast":null,"code":"/**\n * @module ol/Kinetic\n */\n\n/**\n * @classdesc\n * Implementation of inertial deceleration for map movement.\n *\n * @api\n */\nvar Kinetic =\n/** @class */\nfunction () {\n  /**\n   * @param {number} decay Rate of decay (must be negative).\n   * @param {number} minVelocity Minimum velocity (pixels/millisecond).\n   * @param {number} delay Delay to consider to calculate the kinetic\n   *     initial values (milliseconds).\n   */\n  function Kinetic(decay, minVelocity, delay) {\n    /**\n     * @private\n     * @type {number}\n     */\n    this.decay_ = decay;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.minVelocity_ = minVelocity;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.delay_ = delay;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    this.points_ = [];\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.angle_ = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.initialVelocity_ = 0;\n  }\n  /**\n   * FIXME empty description for jsdoc\n   */\n\n\n  Kinetic.prototype.begin = function () {\n    this.points_.length = 0;\n    this.angle_ = 0;\n    this.initialVelocity_ = 0;\n  };\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   */\n\n\n  Kinetic.prototype.update = function (x, y) {\n    this.points_.push(x, y, Date.now());\n  };\n  /**\n   * @return {boolean} Whether we should do kinetic animation.\n   */\n\n\n  Kinetic.prototype.end = function () {\n    if (this.points_.length < 6) {\n      // at least 2 points are required (i.e. there must be at least 6 elements\n      // in the array)\n      return false;\n    }\n\n    var delay = Date.now() - this.delay_;\n    var lastIndex = this.points_.length - 3;\n\n    if (this.points_[lastIndex + 2] < delay) {\n      // the last tracked point is too old, which means that the user stopped\n      // panning before releasing the map\n      return false;\n    } // get the first point which still falls into the delay time\n\n\n    var firstIndex = lastIndex - 3;\n\n    while (firstIndex > 0 && this.points_[firstIndex + 2] > delay) {\n      firstIndex -= 3;\n    }\n\n    var duration = this.points_[lastIndex + 2] - this.points_[firstIndex + 2]; // we don't want a duration of 0 (divide by zero)\n    // we also make sure the user panned for a duration of at least one frame\n    // (1/60s) to compute sane displacement values\n\n    if (duration < 1000 / 60) {\n      return false;\n    }\n\n    var dx = this.points_[lastIndex] - this.points_[firstIndex];\n    var dy = this.points_[lastIndex + 1] - this.points_[firstIndex + 1];\n    this.angle_ = Math.atan2(dy, dx);\n    this.initialVelocity_ = Math.sqrt(dx * dx + dy * dy) / duration;\n    return this.initialVelocity_ > this.minVelocity_;\n  };\n  /**\n   * @return {number} Total distance travelled (pixels).\n   */\n\n\n  Kinetic.prototype.getDistance = function () {\n    return (this.minVelocity_ - this.initialVelocity_) / this.decay_;\n  };\n  /**\n   * @return {number} Angle of the kinetic panning animation (radians).\n   */\n\n\n  Kinetic.prototype.getAngle = function () {\n    return this.angle_;\n  };\n\n  return Kinetic;\n}();\n\nexport default Kinetic;","map":{"version":3,"names":["Kinetic","decay","minVelocity","delay","decay_","minVelocity_","delay_","points_","angle_","initialVelocity_","prototype","begin","length","update","x","y","push","Date","now","end","lastIndex","firstIndex","duration","dx","dy","Math","atan2","sqrt","getDistance","getAngle"],"sources":["/home/asura/github/smartcity/node_modules/ol/Kinetic.js"],"sourcesContent":["/**\n * @module ol/Kinetic\n */\n/**\n * @classdesc\n * Implementation of inertial deceleration for map movement.\n *\n * @api\n */\nvar Kinetic = /** @class */ (function () {\n    /**\n     * @param {number} decay Rate of decay (must be negative).\n     * @param {number} minVelocity Minimum velocity (pixels/millisecond).\n     * @param {number} delay Delay to consider to calculate the kinetic\n     *     initial values (milliseconds).\n     */\n    function Kinetic(decay, minVelocity, delay) {\n        /**\n         * @private\n         * @type {number}\n         */\n        this.decay_ = decay;\n        /**\n         * @private\n         * @type {number}\n         */\n        this.minVelocity_ = minVelocity;\n        /**\n         * @private\n         * @type {number}\n         */\n        this.delay_ = delay;\n        /**\n         * @private\n         * @type {Array<number>}\n         */\n        this.points_ = [];\n        /**\n         * @private\n         * @type {number}\n         */\n        this.angle_ = 0;\n        /**\n         * @private\n         * @type {number}\n         */\n        this.initialVelocity_ = 0;\n    }\n    /**\n     * FIXME empty description for jsdoc\n     */\n    Kinetic.prototype.begin = function () {\n        this.points_.length = 0;\n        this.angle_ = 0;\n        this.initialVelocity_ = 0;\n    };\n    /**\n     * @param {number} x X.\n     * @param {number} y Y.\n     */\n    Kinetic.prototype.update = function (x, y) {\n        this.points_.push(x, y, Date.now());\n    };\n    /**\n     * @return {boolean} Whether we should do kinetic animation.\n     */\n    Kinetic.prototype.end = function () {\n        if (this.points_.length < 6) {\n            // at least 2 points are required (i.e. there must be at least 6 elements\n            // in the array)\n            return false;\n        }\n        var delay = Date.now() - this.delay_;\n        var lastIndex = this.points_.length - 3;\n        if (this.points_[lastIndex + 2] < delay) {\n            // the last tracked point is too old, which means that the user stopped\n            // panning before releasing the map\n            return false;\n        }\n        // get the first point which still falls into the delay time\n        var firstIndex = lastIndex - 3;\n        while (firstIndex > 0 && this.points_[firstIndex + 2] > delay) {\n            firstIndex -= 3;\n        }\n        var duration = this.points_[lastIndex + 2] - this.points_[firstIndex + 2];\n        // we don't want a duration of 0 (divide by zero)\n        // we also make sure the user panned for a duration of at least one frame\n        // (1/60s) to compute sane displacement values\n        if (duration < 1000 / 60) {\n            return false;\n        }\n        var dx = this.points_[lastIndex] - this.points_[firstIndex];\n        var dy = this.points_[lastIndex + 1] - this.points_[firstIndex + 1];\n        this.angle_ = Math.atan2(dy, dx);\n        this.initialVelocity_ = Math.sqrt(dx * dx + dy * dy) / duration;\n        return this.initialVelocity_ > this.minVelocity_;\n    };\n    /**\n     * @return {number} Total distance travelled (pixels).\n     */\n    Kinetic.prototype.getDistance = function () {\n        return (this.minVelocity_ - this.initialVelocity_) / this.decay_;\n    };\n    /**\n     * @return {number} Angle of the kinetic panning animation (radians).\n     */\n    Kinetic.prototype.getAngle = function () {\n        return this.angle_;\n    };\n    return Kinetic;\n}());\nexport default Kinetic;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}