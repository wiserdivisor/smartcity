{"ast":null,"code":"/**\n * @module ol/reproj\n */\nimport { IMAGE_SMOOTHING_DISABLED } from './renderer/canvas/common.js';\nimport { assign } from './obj.js';\nimport { containsCoordinate, createEmpty, extend, forEachCorner, getCenter, getHeight, getTopLeft, getWidth } from './extent.js';\nimport { createCanvasContext2D } from './dom.js';\nimport { getPointResolution, transform } from './proj.js';\nimport { solveLinearSystem } from './math.js';\nvar brokenDiagonalRendering_;\n/**\n * @type {Array<HTMLCanvasElement>}\n */\n\nexport var canvasPool = [];\n/**\n * This draws a small triangle into a canvas by setting the triangle as the clip region\n * and then drawing a (too large) rectangle\n *\n * @param {CanvasRenderingContext2D} ctx The context in which to draw the triangle\n * @param {number} u1 The x-coordinate of the second point. The first point is 0,0.\n * @param {number} v1 The y-coordinate of the second point.\n * @param {number} u2 The x-coordinate of the third point.\n * @param {number} v2 The y-coordinate of the third point.\n */\n\nfunction drawTestTriangle(ctx, u1, v1, u2, v2) {\n  ctx.beginPath();\n  ctx.moveTo(0, 0);\n  ctx.lineTo(u1, v1);\n  ctx.lineTo(u2, v2);\n  ctx.closePath();\n  ctx.save();\n  ctx.clip();\n  ctx.fillRect(0, 0, Math.max(u1, u2) + 1, Math.max(v1, v2));\n  ctx.restore();\n}\n/**\n * Given the data from getImageData, see if the right values appear at the provided offset.\n * Returns true if either the color or transparency is off\n *\n * @param {Uint8ClampedArray} data The data returned from getImageData\n * @param {number} offset The pixel offset from the start of data.\n * @return {boolean} true if the diagonal rendering is broken\n */\n\n\nfunction verifyBrokenDiagonalRendering(data, offset) {\n  // the values ought to be close to the rgba(210, 0, 0, 0.75)\n  return Math.abs(data[offset * 4] - 210) > 2 || Math.abs(data[offset * 4 + 3] - 0.75 * 255) > 2;\n}\n/**\n * Determines if the current browser configuration can render triangular clip regions correctly.\n * This value is cached so the function is only expensive the first time called.\n * Firefox on Windows (as of now) does not if HWA is enabled. See https://bugzilla.mozilla.org/show_bug.cgi?id=1606976\n * IE also doesn't. Chrome works, and everything seems to work on OSX and Android. This function caches the\n * result. I suppose that it is conceivably possible that a browser might flip modes while the app is\n * running, but lets hope not.\n *\n * @return {boolean} true if the Diagonal Rendering is broken.\n */\n\n\nfunction isBrokenDiagonalRendering() {\n  if (brokenDiagonalRendering_ === undefined) {\n    var ctx = document.createElement('canvas').getContext('2d');\n    ctx.globalCompositeOperation = 'lighter';\n    ctx.fillStyle = 'rgba(210, 0, 0, 0.75)';\n    drawTestTriangle(ctx, 4, 5, 4, 0);\n    drawTestTriangle(ctx, 4, 5, 0, 5);\n    var data = ctx.getImageData(0, 0, 3, 3).data;\n    brokenDiagonalRendering_ = verifyBrokenDiagonalRendering(data, 0) || verifyBrokenDiagonalRendering(data, 4) || verifyBrokenDiagonalRendering(data, 8);\n  }\n\n  return brokenDiagonalRendering_;\n}\n/**\n * Calculates ideal resolution to use from the source in order to achieve\n * pixel mapping as close as possible to 1:1 during reprojection.\n * The resolution is calculated regardless of what resolutions\n * are actually available in the dataset (TileGrid, Image, ...).\n *\n * @param {import(\"./proj/Projection.js\").default} sourceProj Source projection.\n * @param {import(\"./proj/Projection.js\").default} targetProj Target projection.\n * @param {import(\"./coordinate.js\").Coordinate} targetCenter Target center.\n * @param {number} targetResolution Target resolution.\n * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.\n */\n\n\nexport function calculateSourceResolution(sourceProj, targetProj, targetCenter, targetResolution) {\n  var sourceCenter = transform(targetCenter, targetProj, sourceProj); // calculate the ideal resolution of the source data\n\n  var sourceResolution = getPointResolution(targetProj, targetResolution, targetCenter);\n  var targetMetersPerUnit = targetProj.getMetersPerUnit();\n\n  if (targetMetersPerUnit !== undefined) {\n    sourceResolution *= targetMetersPerUnit;\n  }\n\n  var sourceMetersPerUnit = sourceProj.getMetersPerUnit();\n\n  if (sourceMetersPerUnit !== undefined) {\n    sourceResolution /= sourceMetersPerUnit;\n  } // Based on the projection properties, the point resolution at the specified\n  // coordinates may be slightly different. We need to reverse-compensate this\n  // in order to achieve optimal results.\n\n\n  var sourceExtent = sourceProj.getExtent();\n\n  if (!sourceExtent || containsCoordinate(sourceExtent, sourceCenter)) {\n    var compensationFactor = getPointResolution(sourceProj, sourceResolution, sourceCenter) / sourceResolution;\n\n    if (isFinite(compensationFactor) && compensationFactor > 0) {\n      sourceResolution /= compensationFactor;\n    }\n  }\n\n  return sourceResolution;\n}\n/**\n * Calculates ideal resolution to use from the source in order to achieve\n * pixel mapping as close as possible to 1:1 during reprojection.\n * The resolution is calculated regardless of what resolutions\n * are actually available in the dataset (TileGrid, Image, ...).\n *\n * @param {import(\"./proj/Projection.js\").default} sourceProj Source projection.\n * @param {import(\"./proj/Projection.js\").default} targetProj Target projection.\n * @param {import(\"./extent.js\").Extent} targetExtent Target extent\n * @param {number} targetResolution Target resolution.\n * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.\n */\n\nexport function calculateSourceExtentResolution(sourceProj, targetProj, targetExtent, targetResolution) {\n  var targetCenter = getCenter(targetExtent);\n  var sourceResolution = calculateSourceResolution(sourceProj, targetProj, targetCenter, targetResolution);\n\n  if (!isFinite(sourceResolution) || sourceResolution <= 0) {\n    forEachCorner(targetExtent, function (corner) {\n      sourceResolution = calculateSourceResolution(sourceProj, targetProj, corner, targetResolution);\n      return isFinite(sourceResolution) && sourceResolution > 0;\n    });\n  }\n\n  return sourceResolution;\n}\n/**\n * @typedef {Object} ImageExtent\n * @property {import(\"./extent.js\").Extent} extent Extent.\n * @property {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\n */\n\n/**\n * Renders the source data into new canvas based on the triangulation.\n *\n * @param {number} width Width of the canvas.\n * @param {number} height Height of the canvas.\n * @param {number} pixelRatio Pixel ratio.\n * @param {number} sourceResolution Source resolution.\n * @param {import(\"./extent.js\").Extent} sourceExtent Extent of the data source.\n * @param {number} targetResolution Target resolution.\n * @param {import(\"./extent.js\").Extent} targetExtent Target extent.\n * @param {import(\"./reproj/Triangulation.js\").default} triangulation Calculated triangulation.\n * @param {Array<ImageExtent>} sources Array of sources.\n * @param {number} gutter Gutter of the sources.\n * @param {boolean} [opt_renderEdges] Render reprojection edges.\n * @param {boolean} [opt_interpolate] Use linear interpolation when resampling.\n * @return {HTMLCanvasElement} Canvas with reprojected data.\n */\n\nexport function render(width, height, pixelRatio, sourceResolution, sourceExtent, targetResolution, targetExtent, triangulation, sources, gutter, opt_renderEdges, opt_interpolate) {\n  var context = createCanvasContext2D(Math.round(pixelRatio * width), Math.round(pixelRatio * height), canvasPool);\n\n  if (!opt_interpolate) {\n    assign(context, IMAGE_SMOOTHING_DISABLED);\n  }\n\n  if (sources.length === 0) {\n    return context.canvas;\n  }\n\n  context.scale(pixelRatio, pixelRatio);\n\n  function pixelRound(value) {\n    return Math.round(value * pixelRatio) / pixelRatio;\n  }\n\n  context.globalCompositeOperation = 'lighter';\n  var sourceDataExtent = createEmpty();\n  sources.forEach(function (src, i, arr) {\n    extend(sourceDataExtent, src.extent);\n  });\n  var canvasWidthInUnits = getWidth(sourceDataExtent);\n  var canvasHeightInUnits = getHeight(sourceDataExtent);\n  var stitchContext = createCanvasContext2D(Math.round(pixelRatio * canvasWidthInUnits / sourceResolution), Math.round(pixelRatio * canvasHeightInUnits / sourceResolution));\n\n  if (!opt_interpolate) {\n    assign(stitchContext, IMAGE_SMOOTHING_DISABLED);\n  }\n\n  var stitchScale = pixelRatio / sourceResolution;\n  sources.forEach(function (src, i, arr) {\n    var xPos = src.extent[0] - sourceDataExtent[0];\n    var yPos = -(src.extent[3] - sourceDataExtent[3]);\n    var srcWidth = getWidth(src.extent);\n    var srcHeight = getHeight(src.extent); // This test should never fail -- but it does. Need to find a fix the upstream condition\n\n    if (src.image.width > 0 && src.image.height > 0) {\n      stitchContext.drawImage(src.image, gutter, gutter, src.image.width - 2 * gutter, src.image.height - 2 * gutter, xPos * stitchScale, yPos * stitchScale, srcWidth * stitchScale, srcHeight * stitchScale);\n    }\n  });\n  var targetTopLeft = getTopLeft(targetExtent);\n  triangulation.getTriangles().forEach(function (triangle, i, arr) {\n    /* Calculate affine transform (src -> dst)\n     * Resulting matrix can be used to transform coordinate\n     * from `sourceProjection` to destination pixels.\n     *\n     * To optimize number of context calls and increase numerical stability,\n     * we also do the following operations:\n     * trans(-topLeftExtentCorner), scale(1 / targetResolution), scale(1, -1)\n     * here before solving the linear system so [ui, vi] are pixel coordinates.\n     *\n     * Src points: xi, yi\n     * Dst points: ui, vi\n     * Affine coefficients: aij\n     *\n     * | x0 y0 1  0  0 0 |   |a00|   |u0|\n     * | x1 y1 1  0  0 0 |   |a01|   |u1|\n     * | x2 y2 1  0  0 0 | x |a02| = |u2|\n     * |  0  0 0 x0 y0 1 |   |a10|   |v0|\n     * |  0  0 0 x1 y1 1 |   |a11|   |v1|\n     * |  0  0 0 x2 y2 1 |   |a12|   |v2|\n     */\n    var source = triangle.source;\n    var target = triangle.target;\n    var x0 = source[0][0],\n        y0 = source[0][1];\n    var x1 = source[1][0],\n        y1 = source[1][1];\n    var x2 = source[2][0],\n        y2 = source[2][1]; // Make sure that everything is on pixel boundaries\n\n    var u0 = pixelRound((target[0][0] - targetTopLeft[0]) / targetResolution);\n    var v0 = pixelRound(-(target[0][1] - targetTopLeft[1]) / targetResolution);\n    var u1 = pixelRound((target[1][0] - targetTopLeft[0]) / targetResolution);\n    var v1 = pixelRound(-(target[1][1] - targetTopLeft[1]) / targetResolution);\n    var u2 = pixelRound((target[2][0] - targetTopLeft[0]) / targetResolution);\n    var v2 = pixelRound(-(target[2][1] - targetTopLeft[1]) / targetResolution); // Shift all the source points to improve numerical stability\n    // of all the subsequent calculations. The [x0, y0] is used here.\n    // This is also used to simplify the linear system.\n\n    var sourceNumericalShiftX = x0;\n    var sourceNumericalShiftY = y0;\n    x0 = 0;\n    y0 = 0;\n    x1 -= sourceNumericalShiftX;\n    y1 -= sourceNumericalShiftY;\n    x2 -= sourceNumericalShiftX;\n    y2 -= sourceNumericalShiftY;\n    var augmentedMatrix = [[x1, y1, 0, 0, u1 - u0], [x2, y2, 0, 0, u2 - u0], [0, 0, x1, y1, v1 - v0], [0, 0, x2, y2, v2 - v0]];\n    var affineCoefs = solveLinearSystem(augmentedMatrix);\n\n    if (!affineCoefs) {\n      return;\n    }\n\n    context.save();\n    context.beginPath();\n\n    if (isBrokenDiagonalRendering() || !opt_interpolate) {\n      // Make sure that all lines are horizontal or vertical\n      context.moveTo(u1, v1); // This is the diagonal line. Do it in 4 steps\n\n      var steps = 4;\n      var ud = u0 - u1;\n      var vd = v0 - v1;\n\n      for (var step = 0; step < steps; step++) {\n        // Go horizontally\n        context.lineTo(u1 + pixelRound((step + 1) * ud / steps), v1 + pixelRound(step * vd / (steps - 1))); // Go vertically\n\n        if (step != steps - 1) {\n          context.lineTo(u1 + pixelRound((step + 1) * ud / steps), v1 + pixelRound((step + 1) * vd / (steps - 1)));\n        }\n      } // We are almost at u0r, v0r\n\n\n      context.lineTo(u2, v2);\n    } else {\n      context.moveTo(u1, v1);\n      context.lineTo(u0, v0);\n      context.lineTo(u2, v2);\n    }\n\n    context.clip();\n    context.transform(affineCoefs[0], affineCoefs[2], affineCoefs[1], affineCoefs[3], u0, v0);\n    context.translate(sourceDataExtent[0] - sourceNumericalShiftX, sourceDataExtent[3] - sourceNumericalShiftY);\n    context.scale(sourceResolution / pixelRatio, -sourceResolution / pixelRatio);\n    context.drawImage(stitchContext.canvas, 0, 0);\n    context.restore();\n  });\n\n  if (opt_renderEdges) {\n    context.save();\n    context.globalCompositeOperation = 'source-over';\n    context.strokeStyle = 'black';\n    context.lineWidth = 1;\n    triangulation.getTriangles().forEach(function (triangle, i, arr) {\n      var target = triangle.target;\n      var u0 = (target[0][0] - targetTopLeft[0]) / targetResolution;\n      var v0 = -(target[0][1] - targetTopLeft[1]) / targetResolution;\n      var u1 = (target[1][0] - targetTopLeft[0]) / targetResolution;\n      var v1 = -(target[1][1] - targetTopLeft[1]) / targetResolution;\n      var u2 = (target[2][0] - targetTopLeft[0]) / targetResolution;\n      var v2 = -(target[2][1] - targetTopLeft[1]) / targetResolution;\n      context.beginPath();\n      context.moveTo(u1, v1);\n      context.lineTo(u0, v0);\n      context.lineTo(u2, v2);\n      context.closePath();\n      context.stroke();\n    });\n    context.restore();\n  }\n\n  return context.canvas;\n}","map":{"version":3,"names":["IMAGE_SMOOTHING_DISABLED","assign","containsCoordinate","createEmpty","extend","forEachCorner","getCenter","getHeight","getTopLeft","getWidth","createCanvasContext2D","getPointResolution","transform","solveLinearSystem","brokenDiagonalRendering_","canvasPool","drawTestTriangle","ctx","u1","v1","u2","v2","beginPath","moveTo","lineTo","closePath","save","clip","fillRect","Math","max","restore","verifyBrokenDiagonalRendering","data","offset","abs","isBrokenDiagonalRendering","undefined","document","createElement","getContext","globalCompositeOperation","fillStyle","getImageData","calculateSourceResolution","sourceProj","targetProj","targetCenter","targetResolution","sourceCenter","sourceResolution","targetMetersPerUnit","getMetersPerUnit","sourceMetersPerUnit","sourceExtent","getExtent","compensationFactor","isFinite","calculateSourceExtentResolution","targetExtent","corner","render","width","height","pixelRatio","triangulation","sources","gutter","opt_renderEdges","opt_interpolate","context","round","length","canvas","scale","pixelRound","value","sourceDataExtent","forEach","src","i","arr","extent","canvasWidthInUnits","canvasHeightInUnits","stitchContext","stitchScale","xPos","yPos","srcWidth","srcHeight","image","drawImage","targetTopLeft","getTriangles","triangle","source","target","x0","y0","x1","y1","x2","y2","u0","v0","sourceNumericalShiftX","sourceNumericalShiftY","augmentedMatrix","affineCoefs","steps","ud","vd","step","translate","strokeStyle","lineWidth","stroke"],"sources":["/home/asura/github/smartcity/node_modules/ol/reproj.js"],"sourcesContent":["/**\n * @module ol/reproj\n */\nimport { IMAGE_SMOOTHING_DISABLED } from './renderer/canvas/common.js';\nimport { assign } from './obj.js';\nimport { containsCoordinate, createEmpty, extend, forEachCorner, getCenter, getHeight, getTopLeft, getWidth, } from './extent.js';\nimport { createCanvasContext2D } from './dom.js';\nimport { getPointResolution, transform } from './proj.js';\nimport { solveLinearSystem } from './math.js';\nvar brokenDiagonalRendering_;\n/**\n * @type {Array<HTMLCanvasElement>}\n */\nexport var canvasPool = [];\n/**\n * This draws a small triangle into a canvas by setting the triangle as the clip region\n * and then drawing a (too large) rectangle\n *\n * @param {CanvasRenderingContext2D} ctx The context in which to draw the triangle\n * @param {number} u1 The x-coordinate of the second point. The first point is 0,0.\n * @param {number} v1 The y-coordinate of the second point.\n * @param {number} u2 The x-coordinate of the third point.\n * @param {number} v2 The y-coordinate of the third point.\n */\nfunction drawTestTriangle(ctx, u1, v1, u2, v2) {\n    ctx.beginPath();\n    ctx.moveTo(0, 0);\n    ctx.lineTo(u1, v1);\n    ctx.lineTo(u2, v2);\n    ctx.closePath();\n    ctx.save();\n    ctx.clip();\n    ctx.fillRect(0, 0, Math.max(u1, u2) + 1, Math.max(v1, v2));\n    ctx.restore();\n}\n/**\n * Given the data from getImageData, see if the right values appear at the provided offset.\n * Returns true if either the color or transparency is off\n *\n * @param {Uint8ClampedArray} data The data returned from getImageData\n * @param {number} offset The pixel offset from the start of data.\n * @return {boolean} true if the diagonal rendering is broken\n */\nfunction verifyBrokenDiagonalRendering(data, offset) {\n    // the values ought to be close to the rgba(210, 0, 0, 0.75)\n    return (Math.abs(data[offset * 4] - 210) > 2 ||\n        Math.abs(data[offset * 4 + 3] - 0.75 * 255) > 2);\n}\n/**\n * Determines if the current browser configuration can render triangular clip regions correctly.\n * This value is cached so the function is only expensive the first time called.\n * Firefox on Windows (as of now) does not if HWA is enabled. See https://bugzilla.mozilla.org/show_bug.cgi?id=1606976\n * IE also doesn't. Chrome works, and everything seems to work on OSX and Android. This function caches the\n * result. I suppose that it is conceivably possible that a browser might flip modes while the app is\n * running, but lets hope not.\n *\n * @return {boolean} true if the Diagonal Rendering is broken.\n */\nfunction isBrokenDiagonalRendering() {\n    if (brokenDiagonalRendering_ === undefined) {\n        var ctx = document.createElement('canvas').getContext('2d');\n        ctx.globalCompositeOperation = 'lighter';\n        ctx.fillStyle = 'rgba(210, 0, 0, 0.75)';\n        drawTestTriangle(ctx, 4, 5, 4, 0);\n        drawTestTriangle(ctx, 4, 5, 0, 5);\n        var data = ctx.getImageData(0, 0, 3, 3).data;\n        brokenDiagonalRendering_ =\n            verifyBrokenDiagonalRendering(data, 0) ||\n                verifyBrokenDiagonalRendering(data, 4) ||\n                verifyBrokenDiagonalRendering(data, 8);\n    }\n    return brokenDiagonalRendering_;\n}\n/**\n * Calculates ideal resolution to use from the source in order to achieve\n * pixel mapping as close as possible to 1:1 during reprojection.\n * The resolution is calculated regardless of what resolutions\n * are actually available in the dataset (TileGrid, Image, ...).\n *\n * @param {import(\"./proj/Projection.js\").default} sourceProj Source projection.\n * @param {import(\"./proj/Projection.js\").default} targetProj Target projection.\n * @param {import(\"./coordinate.js\").Coordinate} targetCenter Target center.\n * @param {number} targetResolution Target resolution.\n * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.\n */\nexport function calculateSourceResolution(sourceProj, targetProj, targetCenter, targetResolution) {\n    var sourceCenter = transform(targetCenter, targetProj, sourceProj);\n    // calculate the ideal resolution of the source data\n    var sourceResolution = getPointResolution(targetProj, targetResolution, targetCenter);\n    var targetMetersPerUnit = targetProj.getMetersPerUnit();\n    if (targetMetersPerUnit !== undefined) {\n        sourceResolution *= targetMetersPerUnit;\n    }\n    var sourceMetersPerUnit = sourceProj.getMetersPerUnit();\n    if (sourceMetersPerUnit !== undefined) {\n        sourceResolution /= sourceMetersPerUnit;\n    }\n    // Based on the projection properties, the point resolution at the specified\n    // coordinates may be slightly different. We need to reverse-compensate this\n    // in order to achieve optimal results.\n    var sourceExtent = sourceProj.getExtent();\n    if (!sourceExtent || containsCoordinate(sourceExtent, sourceCenter)) {\n        var compensationFactor = getPointResolution(sourceProj, sourceResolution, sourceCenter) /\n            sourceResolution;\n        if (isFinite(compensationFactor) && compensationFactor > 0) {\n            sourceResolution /= compensationFactor;\n        }\n    }\n    return sourceResolution;\n}\n/**\n * Calculates ideal resolution to use from the source in order to achieve\n * pixel mapping as close as possible to 1:1 during reprojection.\n * The resolution is calculated regardless of what resolutions\n * are actually available in the dataset (TileGrid, Image, ...).\n *\n * @param {import(\"./proj/Projection.js\").default} sourceProj Source projection.\n * @param {import(\"./proj/Projection.js\").default} targetProj Target projection.\n * @param {import(\"./extent.js\").Extent} targetExtent Target extent\n * @param {number} targetResolution Target resolution.\n * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.\n */\nexport function calculateSourceExtentResolution(sourceProj, targetProj, targetExtent, targetResolution) {\n    var targetCenter = getCenter(targetExtent);\n    var sourceResolution = calculateSourceResolution(sourceProj, targetProj, targetCenter, targetResolution);\n    if (!isFinite(sourceResolution) || sourceResolution <= 0) {\n        forEachCorner(targetExtent, function (corner) {\n            sourceResolution = calculateSourceResolution(sourceProj, targetProj, corner, targetResolution);\n            return isFinite(sourceResolution) && sourceResolution > 0;\n        });\n    }\n    return sourceResolution;\n}\n/**\n * @typedef {Object} ImageExtent\n * @property {import(\"./extent.js\").Extent} extent Extent.\n * @property {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\n */\n/**\n * Renders the source data into new canvas based on the triangulation.\n *\n * @param {number} width Width of the canvas.\n * @param {number} height Height of the canvas.\n * @param {number} pixelRatio Pixel ratio.\n * @param {number} sourceResolution Source resolution.\n * @param {import(\"./extent.js\").Extent} sourceExtent Extent of the data source.\n * @param {number} targetResolution Target resolution.\n * @param {import(\"./extent.js\").Extent} targetExtent Target extent.\n * @param {import(\"./reproj/Triangulation.js\").default} triangulation Calculated triangulation.\n * @param {Array<ImageExtent>} sources Array of sources.\n * @param {number} gutter Gutter of the sources.\n * @param {boolean} [opt_renderEdges] Render reprojection edges.\n * @param {boolean} [opt_interpolate] Use linear interpolation when resampling.\n * @return {HTMLCanvasElement} Canvas with reprojected data.\n */\nexport function render(width, height, pixelRatio, sourceResolution, sourceExtent, targetResolution, targetExtent, triangulation, sources, gutter, opt_renderEdges, opt_interpolate) {\n    var context = createCanvasContext2D(Math.round(pixelRatio * width), Math.round(pixelRatio * height), canvasPool);\n    if (!opt_interpolate) {\n        assign(context, IMAGE_SMOOTHING_DISABLED);\n    }\n    if (sources.length === 0) {\n        return context.canvas;\n    }\n    context.scale(pixelRatio, pixelRatio);\n    function pixelRound(value) {\n        return Math.round(value * pixelRatio) / pixelRatio;\n    }\n    context.globalCompositeOperation = 'lighter';\n    var sourceDataExtent = createEmpty();\n    sources.forEach(function (src, i, arr) {\n        extend(sourceDataExtent, src.extent);\n    });\n    var canvasWidthInUnits = getWidth(sourceDataExtent);\n    var canvasHeightInUnits = getHeight(sourceDataExtent);\n    var stitchContext = createCanvasContext2D(Math.round((pixelRatio * canvasWidthInUnits) / sourceResolution), Math.round((pixelRatio * canvasHeightInUnits) / sourceResolution));\n    if (!opt_interpolate) {\n        assign(stitchContext, IMAGE_SMOOTHING_DISABLED);\n    }\n    var stitchScale = pixelRatio / sourceResolution;\n    sources.forEach(function (src, i, arr) {\n        var xPos = src.extent[0] - sourceDataExtent[0];\n        var yPos = -(src.extent[3] - sourceDataExtent[3]);\n        var srcWidth = getWidth(src.extent);\n        var srcHeight = getHeight(src.extent);\n        // This test should never fail -- but it does. Need to find a fix the upstream condition\n        if (src.image.width > 0 && src.image.height > 0) {\n            stitchContext.drawImage(src.image, gutter, gutter, src.image.width - 2 * gutter, src.image.height - 2 * gutter, xPos * stitchScale, yPos * stitchScale, srcWidth * stitchScale, srcHeight * stitchScale);\n        }\n    });\n    var targetTopLeft = getTopLeft(targetExtent);\n    triangulation.getTriangles().forEach(function (triangle, i, arr) {\n        /* Calculate affine transform (src -> dst)\n         * Resulting matrix can be used to transform coordinate\n         * from `sourceProjection` to destination pixels.\n         *\n         * To optimize number of context calls and increase numerical stability,\n         * we also do the following operations:\n         * trans(-topLeftExtentCorner), scale(1 / targetResolution), scale(1, -1)\n         * here before solving the linear system so [ui, vi] are pixel coordinates.\n         *\n         * Src points: xi, yi\n         * Dst points: ui, vi\n         * Affine coefficients: aij\n         *\n         * | x0 y0 1  0  0 0 |   |a00|   |u0|\n         * | x1 y1 1  0  0 0 |   |a01|   |u1|\n         * | x2 y2 1  0  0 0 | x |a02| = |u2|\n         * |  0  0 0 x0 y0 1 |   |a10|   |v0|\n         * |  0  0 0 x1 y1 1 |   |a11|   |v1|\n         * |  0  0 0 x2 y2 1 |   |a12|   |v2|\n         */\n        var source = triangle.source;\n        var target = triangle.target;\n        var x0 = source[0][0], y0 = source[0][1];\n        var x1 = source[1][0], y1 = source[1][1];\n        var x2 = source[2][0], y2 = source[2][1];\n        // Make sure that everything is on pixel boundaries\n        var u0 = pixelRound((target[0][0] - targetTopLeft[0]) / targetResolution);\n        var v0 = pixelRound(-(target[0][1] - targetTopLeft[1]) / targetResolution);\n        var u1 = pixelRound((target[1][0] - targetTopLeft[0]) / targetResolution);\n        var v1 = pixelRound(-(target[1][1] - targetTopLeft[1]) / targetResolution);\n        var u2 = pixelRound((target[2][0] - targetTopLeft[0]) / targetResolution);\n        var v2 = pixelRound(-(target[2][1] - targetTopLeft[1]) / targetResolution);\n        // Shift all the source points to improve numerical stability\n        // of all the subsequent calculations. The [x0, y0] is used here.\n        // This is also used to simplify the linear system.\n        var sourceNumericalShiftX = x0;\n        var sourceNumericalShiftY = y0;\n        x0 = 0;\n        y0 = 0;\n        x1 -= sourceNumericalShiftX;\n        y1 -= sourceNumericalShiftY;\n        x2 -= sourceNumericalShiftX;\n        y2 -= sourceNumericalShiftY;\n        var augmentedMatrix = [\n            [x1, y1, 0, 0, u1 - u0],\n            [x2, y2, 0, 0, u2 - u0],\n            [0, 0, x1, y1, v1 - v0],\n            [0, 0, x2, y2, v2 - v0],\n        ];\n        var affineCoefs = solveLinearSystem(augmentedMatrix);\n        if (!affineCoefs) {\n            return;\n        }\n        context.save();\n        context.beginPath();\n        if (isBrokenDiagonalRendering() || !opt_interpolate) {\n            // Make sure that all lines are horizontal or vertical\n            context.moveTo(u1, v1);\n            // This is the diagonal line. Do it in 4 steps\n            var steps = 4;\n            var ud = u0 - u1;\n            var vd = v0 - v1;\n            for (var step = 0; step < steps; step++) {\n                // Go horizontally\n                context.lineTo(u1 + pixelRound(((step + 1) * ud) / steps), v1 + pixelRound((step * vd) / (steps - 1)));\n                // Go vertically\n                if (step != steps - 1) {\n                    context.lineTo(u1 + pixelRound(((step + 1) * ud) / steps), v1 + pixelRound(((step + 1) * vd) / (steps - 1)));\n                }\n            }\n            // We are almost at u0r, v0r\n            context.lineTo(u2, v2);\n        }\n        else {\n            context.moveTo(u1, v1);\n            context.lineTo(u0, v0);\n            context.lineTo(u2, v2);\n        }\n        context.clip();\n        context.transform(affineCoefs[0], affineCoefs[2], affineCoefs[1], affineCoefs[3], u0, v0);\n        context.translate(sourceDataExtent[0] - sourceNumericalShiftX, sourceDataExtent[3] - sourceNumericalShiftY);\n        context.scale(sourceResolution / pixelRatio, -sourceResolution / pixelRatio);\n        context.drawImage(stitchContext.canvas, 0, 0);\n        context.restore();\n    });\n    if (opt_renderEdges) {\n        context.save();\n        context.globalCompositeOperation = 'source-over';\n        context.strokeStyle = 'black';\n        context.lineWidth = 1;\n        triangulation.getTriangles().forEach(function (triangle, i, arr) {\n            var target = triangle.target;\n            var u0 = (target[0][0] - targetTopLeft[0]) / targetResolution;\n            var v0 = -(target[0][1] - targetTopLeft[1]) / targetResolution;\n            var u1 = (target[1][0] - targetTopLeft[0]) / targetResolution;\n            var v1 = -(target[1][1] - targetTopLeft[1]) / targetResolution;\n            var u2 = (target[2][0] - targetTopLeft[0]) / targetResolution;\n            var v2 = -(target[2][1] - targetTopLeft[1]) / targetResolution;\n            context.beginPath();\n            context.moveTo(u1, v1);\n            context.lineTo(u0, v0);\n            context.lineTo(u2, v2);\n            context.closePath();\n            context.stroke();\n        });\n        context.restore();\n    }\n    return context.canvas;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}