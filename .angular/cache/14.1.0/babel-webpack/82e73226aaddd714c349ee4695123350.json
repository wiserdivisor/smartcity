{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/Object\n */\n\n\nimport Event from './events/Event.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport Observable from './Observable.js';\nimport { assign, isEmpty } from './obj.js';\nimport { getUid } from './util.js';\n/**\n * @classdesc\n * Events emitted by {@link module:ol/Object~BaseObject} instances are instances of this type.\n */\n\nvar ObjectEvent =\n/** @class */\nfunction (_super) {\n  __extends(ObjectEvent, _super);\n  /**\n   * @param {string} type The event type.\n   * @param {string} key The property name.\n   * @param {*} oldValue The old value for `key`.\n   */\n\n\n  function ObjectEvent(type, key, oldValue) {\n    var _this = _super.call(this, type) || this;\n    /**\n     * The name of the property whose value is changing.\n     * @type {string}\n     * @api\n     */\n\n\n    _this.key = key;\n    /**\n     * The old value. To get the new value use `e.target.get(e.key)` where\n     * `e` is the event object.\n     * @type {*}\n     * @api\n     */\n\n    _this.oldValue = oldValue;\n    return _this;\n  }\n\n  return ObjectEvent;\n}(Event);\n\nexport { ObjectEvent };\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types, ObjectEvent, Return> &\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types, Return>} ObjectOnSignature\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Most non-trivial classes inherit from this.\n *\n * This extends {@link module:ol/Observable~Observable} with observable\n * properties, where each property is observable as well as the object as a\n * whole.\n *\n * Classes that inherit from this have pre-defined properties, to which you can\n * add your owns. The pre-defined properties are listed in this documentation as\n * 'Observable Properties', and have their own accessors; for example,\n * {@link module:ol/Map~Map} has a `target` property, accessed with\n * `getTarget()` and changed with `setTarget()`. Not all properties are however\n * settable. There are also general-purpose accessors `get()` and `set()`. For\n * example, `get('target')` is equivalent to `getTarget()`.\n *\n * The `set` accessors trigger a change event, and you can monitor this by\n * registering a listener. For example, {@link module:ol/View~View} has a\n * `center` property, so `view.on('change:center', function(evt) {...});` would\n * call the function whenever the value of the center property changes. Within\n * the function, `evt.target` would be the view, so `evt.target.getCenter()`\n * would return the new center.\n *\n * You can add your own observable properties with\n * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.\n * You can listen for changes on that property value with\n * `object.on('change:prop', listener)`. You can get a list of all\n * properties with {@link module:ol/Object~BaseObject#getProperties}.\n *\n * Note that the observable properties are separate from standard JS properties.\n * You can, for example, give your map object a title with\n * `map.title='New title'` and with `map.set('title', 'Another title')`. The\n * first will be a `hasOwnProperty`; the second will appear in\n * `getProperties()`. Only the second is observable.\n *\n * Properties can be deleted by using the unset method. E.g.\n * object.unset('foo').\n *\n * @fires ObjectEvent\n * @api\n */\n\nvar BaseObject =\n/** @class */\nfunction (_super) {\n  __extends(BaseObject, _super);\n  /**\n   * @param {Object<string, *>} [opt_values] An object with key-value pairs.\n   */\n\n\n  function BaseObject(opt_values) {\n    var _this = _super.call(this) || this;\n    /***\n     * @type {ObjectOnSignature<import(\"./events\").EventsKey>}\n     */\n\n\n    _this.on;\n    /***\n     * @type {ObjectOnSignature<import(\"./events\").EventsKey>}\n     */\n\n    _this.once;\n    /***\n     * @type {ObjectOnSignature<void>}\n     */\n\n    _this.un; // Call {@link module:ol/util.getUid} to ensure that the order of objects' ids is\n    // the same as the order in which they were created.  This also helps to\n    // ensure that object properties are always added in the same order, which\n    // helps many JavaScript engines generate faster code.\n\n    getUid(_this);\n    /**\n     * @private\n     * @type {Object<string, *>}\n     */\n\n    _this.values_ = null;\n\n    if (opt_values !== undefined) {\n      _this.setProperties(opt_values);\n    }\n\n    return _this;\n  }\n  /**\n   * Gets a value.\n   * @param {string} key Key name.\n   * @return {*} Value.\n   * @api\n   */\n\n\n  BaseObject.prototype.get = function (key) {\n    var value;\n\n    if (this.values_ && this.values_.hasOwnProperty(key)) {\n      value = this.values_[key];\n    }\n\n    return value;\n  };\n  /**\n   * Get a list of object property names.\n   * @return {Array<string>} List of property names.\n   * @api\n   */\n\n\n  BaseObject.prototype.getKeys = function () {\n    return this.values_ && Object.keys(this.values_) || [];\n  };\n  /**\n   * Get an object of all property names and values.\n   * @return {Object<string, *>} Object.\n   * @api\n   */\n\n\n  BaseObject.prototype.getProperties = function () {\n    return this.values_ && assign({}, this.values_) || {};\n  };\n  /**\n   * @return {boolean} The object has properties.\n   */\n\n\n  BaseObject.prototype.hasProperties = function () {\n    return !!this.values_;\n  };\n  /**\n   * @param {string} key Key name.\n   * @param {*} oldValue Old value.\n   */\n\n\n  BaseObject.prototype.notify = function (key, oldValue) {\n    var eventType;\n    eventType = \"change:\".concat(key);\n\n    if (this.hasListener(eventType)) {\n      this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n    }\n\n    eventType = ObjectEventType.PROPERTYCHANGE;\n\n    if (this.hasListener(eventType)) {\n      this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n    }\n  };\n  /**\n   * @param {string} key Key name.\n   * @param {import(\"./events.js\").Listener} listener Listener.\n   */\n\n\n  BaseObject.prototype.addChangeListener = function (key, listener) {\n    this.addEventListener(\"change:\".concat(key), listener);\n  };\n  /**\n   * @param {string} key Key name.\n   * @param {import(\"./events.js\").Listener} listener Listener.\n   */\n\n\n  BaseObject.prototype.removeChangeListener = function (key, listener) {\n    this.removeEventListener(\"change:\".concat(key), listener);\n  };\n  /**\n   * Sets a value.\n   * @param {string} key Key name.\n   * @param {*} value Value.\n   * @param {boolean} [opt_silent] Update without triggering an event.\n   * @api\n   */\n\n\n  BaseObject.prototype.set = function (key, value, opt_silent) {\n    var values = this.values_ || (this.values_ = {});\n\n    if (opt_silent) {\n      values[key] = value;\n    } else {\n      var oldValue = values[key];\n      values[key] = value;\n\n      if (oldValue !== value) {\n        this.notify(key, oldValue);\n      }\n    }\n  };\n  /**\n   * Sets a collection of key-value pairs.  Note that this changes any existing\n   * properties and adds new ones (it does not remove any existing properties).\n   * @param {Object<string, *>} values Values.\n   * @param {boolean} [opt_silent] Update without triggering an event.\n   * @api\n   */\n\n\n  BaseObject.prototype.setProperties = function (values, opt_silent) {\n    for (var key in values) {\n      this.set(key, values[key], opt_silent);\n    }\n  };\n  /**\n   * Apply any properties from another object without triggering events.\n   * @param {BaseObject} source The source object.\n   * @protected\n   */\n\n\n  BaseObject.prototype.applyProperties = function (source) {\n    if (!source.values_) {\n      return;\n    }\n\n    assign(this.values_ || (this.values_ = {}), source.values_);\n  };\n  /**\n   * Unsets a property.\n   * @param {string} key Key name.\n   * @param {boolean} [opt_silent] Unset without triggering an event.\n   * @api\n   */\n\n\n  BaseObject.prototype.unset = function (key, opt_silent) {\n    if (this.values_ && key in this.values_) {\n      var oldValue = this.values_[key];\n      delete this.values_[key];\n\n      if (isEmpty(this.values_)) {\n        this.values_ = null;\n      }\n\n      if (!opt_silent) {\n        this.notify(key, oldValue);\n      }\n    }\n  };\n\n  return BaseObject;\n}(Observable);\n\nexport default BaseObject;","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","Event","ObjectEventType","Observable","assign","isEmpty","getUid","ObjectEvent","_super","type","key","oldValue","_this","BaseObject","opt_values","on","once","un","values_","undefined","setProperties","get","value","getKeys","keys","getProperties","hasProperties","notify","eventType","concat","hasListener","dispatchEvent","PROPERTYCHANGE","addChangeListener","listener","addEventListener","removeChangeListener","removeEventListener","set","opt_silent","values","applyProperties","source","unset"],"sources":["/home/asura/github/smartcity/node_modules/ol/Object.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/Object\n */\nimport Event from './events/Event.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport Observable from './Observable.js';\nimport { assign, isEmpty } from './obj.js';\nimport { getUid } from './util.js';\n/**\n * @classdesc\n * Events emitted by {@link module:ol/Object~BaseObject} instances are instances of this type.\n */\nvar ObjectEvent = /** @class */ (function (_super) {\n    __extends(ObjectEvent, _super);\n    /**\n     * @param {string} type The event type.\n     * @param {string} key The property name.\n     * @param {*} oldValue The old value for `key`.\n     */\n    function ObjectEvent(type, key, oldValue) {\n        var _this = _super.call(this, type) || this;\n        /**\n         * The name of the property whose value is changing.\n         * @type {string}\n         * @api\n         */\n        _this.key = key;\n        /**\n         * The old value. To get the new value use `e.target.get(e.key)` where\n         * `e` is the event object.\n         * @type {*}\n         * @api\n         */\n        _this.oldValue = oldValue;\n        return _this;\n    }\n    return ObjectEvent;\n}(Event));\nexport { ObjectEvent };\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types, ObjectEvent, Return> &\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types, Return>} ObjectOnSignature\n */\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Most non-trivial classes inherit from this.\n *\n * This extends {@link module:ol/Observable~Observable} with observable\n * properties, where each property is observable as well as the object as a\n * whole.\n *\n * Classes that inherit from this have pre-defined properties, to which you can\n * add your owns. The pre-defined properties are listed in this documentation as\n * 'Observable Properties', and have their own accessors; for example,\n * {@link module:ol/Map~Map} has a `target` property, accessed with\n * `getTarget()` and changed with `setTarget()`. Not all properties are however\n * settable. There are also general-purpose accessors `get()` and `set()`. For\n * example, `get('target')` is equivalent to `getTarget()`.\n *\n * The `set` accessors trigger a change event, and you can monitor this by\n * registering a listener. For example, {@link module:ol/View~View} has a\n * `center` property, so `view.on('change:center', function(evt) {...});` would\n * call the function whenever the value of the center property changes. Within\n * the function, `evt.target` would be the view, so `evt.target.getCenter()`\n * would return the new center.\n *\n * You can add your own observable properties with\n * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.\n * You can listen for changes on that property value with\n * `object.on('change:prop', listener)`. You can get a list of all\n * properties with {@link module:ol/Object~BaseObject#getProperties}.\n *\n * Note that the observable properties are separate from standard JS properties.\n * You can, for example, give your map object a title with\n * `map.title='New title'` and with `map.set('title', 'Another title')`. The\n * first will be a `hasOwnProperty`; the second will appear in\n * `getProperties()`. Only the second is observable.\n *\n * Properties can be deleted by using the unset method. E.g.\n * object.unset('foo').\n *\n * @fires ObjectEvent\n * @api\n */\nvar BaseObject = /** @class */ (function (_super) {\n    __extends(BaseObject, _super);\n    /**\n     * @param {Object<string, *>} [opt_values] An object with key-value pairs.\n     */\n    function BaseObject(opt_values) {\n        var _this = _super.call(this) || this;\n        /***\n         * @type {ObjectOnSignature<import(\"./events\").EventsKey>}\n         */\n        _this.on;\n        /***\n         * @type {ObjectOnSignature<import(\"./events\").EventsKey>}\n         */\n        _this.once;\n        /***\n         * @type {ObjectOnSignature<void>}\n         */\n        _this.un;\n        // Call {@link module:ol/util.getUid} to ensure that the order of objects' ids is\n        // the same as the order in which they were created.  This also helps to\n        // ensure that object properties are always added in the same order, which\n        // helps many JavaScript engines generate faster code.\n        getUid(_this);\n        /**\n         * @private\n         * @type {Object<string, *>}\n         */\n        _this.values_ = null;\n        if (opt_values !== undefined) {\n            _this.setProperties(opt_values);\n        }\n        return _this;\n    }\n    /**\n     * Gets a value.\n     * @param {string} key Key name.\n     * @return {*} Value.\n     * @api\n     */\n    BaseObject.prototype.get = function (key) {\n        var value;\n        if (this.values_ && this.values_.hasOwnProperty(key)) {\n            value = this.values_[key];\n        }\n        return value;\n    };\n    /**\n     * Get a list of object property names.\n     * @return {Array<string>} List of property names.\n     * @api\n     */\n    BaseObject.prototype.getKeys = function () {\n        return (this.values_ && Object.keys(this.values_)) || [];\n    };\n    /**\n     * Get an object of all property names and values.\n     * @return {Object<string, *>} Object.\n     * @api\n     */\n    BaseObject.prototype.getProperties = function () {\n        return (this.values_ && assign({}, this.values_)) || {};\n    };\n    /**\n     * @return {boolean} The object has properties.\n     */\n    BaseObject.prototype.hasProperties = function () {\n        return !!this.values_;\n    };\n    /**\n     * @param {string} key Key name.\n     * @param {*} oldValue Old value.\n     */\n    BaseObject.prototype.notify = function (key, oldValue) {\n        var eventType;\n        eventType = \"change:\".concat(key);\n        if (this.hasListener(eventType)) {\n            this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n        }\n        eventType = ObjectEventType.PROPERTYCHANGE;\n        if (this.hasListener(eventType)) {\n            this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n        }\n    };\n    /**\n     * @param {string} key Key name.\n     * @param {import(\"./events.js\").Listener} listener Listener.\n     */\n    BaseObject.prototype.addChangeListener = function (key, listener) {\n        this.addEventListener(\"change:\".concat(key), listener);\n    };\n    /**\n     * @param {string} key Key name.\n     * @param {import(\"./events.js\").Listener} listener Listener.\n     */\n    BaseObject.prototype.removeChangeListener = function (key, listener) {\n        this.removeEventListener(\"change:\".concat(key), listener);\n    };\n    /**\n     * Sets a value.\n     * @param {string} key Key name.\n     * @param {*} value Value.\n     * @param {boolean} [opt_silent] Update without triggering an event.\n     * @api\n     */\n    BaseObject.prototype.set = function (key, value, opt_silent) {\n        var values = this.values_ || (this.values_ = {});\n        if (opt_silent) {\n            values[key] = value;\n        }\n        else {\n            var oldValue = values[key];\n            values[key] = value;\n            if (oldValue !== value) {\n                this.notify(key, oldValue);\n            }\n        }\n    };\n    /**\n     * Sets a collection of key-value pairs.  Note that this changes any existing\n     * properties and adds new ones (it does not remove any existing properties).\n     * @param {Object<string, *>} values Values.\n     * @param {boolean} [opt_silent] Update without triggering an event.\n     * @api\n     */\n    BaseObject.prototype.setProperties = function (values, opt_silent) {\n        for (var key in values) {\n            this.set(key, values[key], opt_silent);\n        }\n    };\n    /**\n     * Apply any properties from another object without triggering events.\n     * @param {BaseObject} source The source object.\n     * @protected\n     */\n    BaseObject.prototype.applyProperties = function (source) {\n        if (!source.values_) {\n            return;\n        }\n        assign(this.values_ || (this.values_ = {}), source.values_);\n    };\n    /**\n     * Unsets a property.\n     * @param {string} key Key name.\n     * @param {boolean} [opt_silent] Unset without triggering an event.\n     * @api\n     */\n    BaseObject.prototype.unset = function (key, opt_silent) {\n        if (this.values_ && key in this.values_) {\n            var oldValue = this.values_[key];\n            delete this.values_[key];\n            if (isEmpty(this.values_)) {\n                this.values_ = null;\n            }\n            if (!opt_silent) {\n                this.notify(key, oldValue);\n            }\n        }\n    };\n    return BaseObject;\n}(Observable));\nexport default BaseObject;\n"],"mappings":"AAAA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA6B,YAAY;EACrD,IAAIC,aAAa,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;IAChCF,aAAa,GAAGG,MAAM,CAACC,cAAP,IACX;MAAEC,SAAS,EAAE;IAAb,aAA6BC,KAA7B,IAAsC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;MAAED,CAAC,CAACI,SAAF,GAAcH,CAAd;IAAkB,CAD/D,IAEZ,UAAUD,CAAV,EAAaC,CAAb,EAAgB;MAAE,KAAK,IAAIK,CAAT,IAAcL,CAAd,EAAiB,IAAIC,MAAM,CAACK,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EAAgDN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;IAAc,CAFrG;;IAGA,OAAOP,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAApB;EACH,CALD;;EAMA,OAAO,UAAUD,CAAV,EAAaC,CAAb,EAAgB;IACnB,IAAI,OAAOA,CAAP,KAAa,UAAb,IAA2BA,CAAC,KAAK,IAArC,EACI,MAAM,IAAIS,SAAJ,CAAc,yBAAyBC,MAAM,CAACV,CAAD,CAA/B,GAAqC,+BAAnD,CAAN;IACJF,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAAb;;IACA,SAASW,EAAT,GAAc;MAAE,KAAKC,WAAL,GAAmBb,CAAnB;IAAuB;;IACvCA,CAAC,CAACO,SAAF,GAAcN,CAAC,KAAK,IAAN,GAAaC,MAAM,CAACY,MAAP,CAAcb,CAAd,CAAb,IAAiCW,EAAE,CAACL,SAAH,GAAeN,CAAC,CAACM,SAAjB,EAA4B,IAAIK,EAAJ,EAA7D,CAAd;EACH,CAND;AAOH,CAd2C,EAA5C;AAeA;AACA;AACA;;;AACA,OAAOG,KAAP,MAAkB,mBAAlB;AACA,OAAOC,eAAP,MAA4B,sBAA5B;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,SAASC,MAAT,EAAiBC,OAAjB,QAAgC,UAAhC;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA;AACA;AACA;AACA;;AACA,IAAIC,WAAW;AAAG;AAAe,UAAUC,MAAV,EAAkB;EAC/CxB,SAAS,CAACuB,WAAD,EAAcC,MAAd,CAAT;EACA;AACJ;AACA;AACA;AACA;;;EACI,SAASD,WAAT,CAAqBE,IAArB,EAA2BC,GAA3B,EAAgCC,QAAhC,EAA0C;IACtC,IAAIC,KAAK,GAAGJ,MAAM,CAACb,IAAP,CAAY,IAAZ,EAAkBc,IAAlB,KAA2B,IAAvC;IACA;AACR;AACA;AACA;AACA;;;IACQG,KAAK,CAACF,GAAN,GAAYA,GAAZ;IACA;AACR;AACA;AACA;AACA;AACA;;IACQE,KAAK,CAACD,QAAN,GAAiBA,QAAjB;IACA,OAAOC,KAAP;EACH;;EACD,OAAOL,WAAP;AACH,CAzBgC,CAyB/BN,KAzB+B,CAAjC;;AA0BA,SAASM,WAAT;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIM,UAAU;AAAG;AAAe,UAAUL,MAAV,EAAkB;EAC9CxB,SAAS,CAAC6B,UAAD,EAAaL,MAAb,CAAT;EACA;AACJ;AACA;;;EACI,SAASK,UAAT,CAAoBC,UAApB,EAAgC;IAC5B,IAAIF,KAAK,GAAGJ,MAAM,CAACb,IAAP,CAAY,IAAZ,KAAqB,IAAjC;IACA;AACR;AACA;;;IACQiB,KAAK,CAACG,EAAN;IACA;AACR;AACA;;IACQH,KAAK,CAACI,IAAN;IACA;AACR;AACA;;IACQJ,KAAK,CAACK,EAAN,CAb4B,CAc5B;IACA;IACA;IACA;;IACAX,MAAM,CAACM,KAAD,CAAN;IACA;AACR;AACA;AACA;;IACQA,KAAK,CAACM,OAAN,GAAgB,IAAhB;;IACA,IAAIJ,UAAU,KAAKK,SAAnB,EAA8B;MAC1BP,KAAK,CAACQ,aAAN,CAAoBN,UAApB;IACH;;IACD,OAAOF,KAAP;EACH;EACD;AACJ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"},"metadata":{},"sourceType":"module"}