{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/source/Source\n */\n\n\nimport BaseObject from '../Object.js';\nimport { abstract } from '../util.js';\nimport { get as getProjection } from '../proj.js';\n/**\n * @typedef {'undefined' | 'loading' | 'ready' | 'error'} State\n * State of the source, one of 'undefined', 'loading', 'ready' or 'error'.\n */\n\n/**\n * A function that takes a {@link module:ol/PluggableMap~FrameState} and returns a string or\n * an array of strings representing source attributions.\n *\n * @typedef {function(import(\"../PluggableMap.js\").FrameState): (string|Array<string>)} Attribution\n */\n\n/**\n * A type that can be used to provide attribution information for data sources.\n *\n * It represents either\n * * a simple string (e.g. `'© Acme Inc.'`)\n * * an array of simple strings (e.g. `['© Acme Inc.', '© Bacme Inc.']`)\n * * a function that returns a string or array of strings ({@link module:ol/source/Source~Attribution})\n *\n * @typedef {string|Array<string>|Attribution} AttributionLike\n */\n\n/**\n * @typedef {Object} Options\n * @property {AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {import(\"./Source.js\").State} [state='ready'] State.\n * @property {boolean} [wrapX=false] WrapX.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for {@link module:ol/layer/Layer~Layer} sources.\n *\n * A generic `change` event is triggered when the state of the source changes.\n * @abstract\n * @api\n */\n\nvar Source =\n/** @class */\nfunction (_super) {\n  __extends(Source, _super);\n  /**\n   * @param {Options} options Source options.\n   */\n\n\n  function Source(options) {\n    var _this = _super.call(this) || this;\n    /**\n     * @protected\n     * @type {import(\"../proj/Projection.js\").default|null}\n     */\n\n\n    _this.projection = getProjection(options.projection);\n    /**\n     * @private\n     * @type {?Attribution}\n     */\n\n    _this.attributions_ = adaptAttributions(options.attributions);\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.attributionsCollapsible_ = options.attributionsCollapsible !== undefined ? options.attributionsCollapsible : true;\n    /**\n     * This source is currently loading data. Sources that defer loading to the\n     * map's tile queue never set this to `true`.\n     * @type {boolean}\n     */\n\n    _this.loading = false;\n    /**\n     * @private\n     * @type {import(\"./Source.js\").State}\n     */\n\n    _this.state_ = options.state !== undefined ? options.state : 'ready';\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.interpolate_ = !!options.interpolate;\n    /**\n     * @protected\n     * @type {function(import(\"../View.js\").ViewOptions):void}\n     */\n\n    _this.viewResolver = null;\n    /**\n     * @protected\n     * @type {function(Error):void}\n     */\n\n    _this.viewRejector = null;\n    var self = _this;\n    /**\n     * @private\n     * @type {Promise<import(\"../View.js\").ViewOptions>}\n     */\n\n    _this.viewPromise_ = new Promise(function (resolve, reject) {\n      self.viewResolver = resolve;\n      self.viewRejector = reject;\n    });\n    return _this;\n  }\n  /**\n   * Get the attribution function for the source.\n   * @return {?Attribution} Attribution function.\n   * @api\n   */\n\n\n  Source.prototype.getAttributions = function () {\n    return this.attributions_;\n  };\n  /**\n   * @return {boolean} Attributions are collapsible.\n   * @api\n   */\n\n\n  Source.prototype.getAttributionsCollapsible = function () {\n    return this.attributionsCollapsible_;\n  };\n  /**\n   * Get the projection of the source.\n   * @return {import(\"../proj/Projection.js\").default|null} Projection.\n   * @api\n   */\n\n\n  Source.prototype.getProjection = function () {\n    return this.projection;\n  };\n  /**\n   * @abstract\n   * @return {Array<number>|null} Resolutions.\n   */\n\n\n  Source.prototype.getResolutions = function () {\n    return abstract();\n  };\n  /**\n   * @return {Promise<import(\"../View.js\").ViewOptions>} A promise for view-related properties.\n   */\n\n\n  Source.prototype.getView = function () {\n    return this.viewPromise_;\n  };\n  /**\n   * Get the state of the source, see {@link import(\"./Source.js\").State} for possible states.\n   * @return {import(\"./Source.js\").State} State.\n   * @api\n   */\n\n\n  Source.prototype.getState = function () {\n    return this.state_;\n  };\n  /**\n   * @return {boolean|undefined} Wrap X.\n   */\n\n\n  Source.prototype.getWrapX = function () {\n    return this.wrapX_;\n  };\n  /**\n   * @return {boolean} Use linear interpolation when resampling.\n   */\n\n\n  Source.prototype.getInterpolate = function () {\n    return this.interpolate_;\n  };\n  /**\n   * Refreshes the source. The source will be cleared, and data from the server will be reloaded.\n   * @api\n   */\n\n\n  Source.prototype.refresh = function () {\n    this.changed();\n  };\n  /**\n   * Set the attributions of the source.\n   * @param {AttributionLike|undefined} attributions Attributions.\n   *     Can be passed as `string`, `Array<string>`, {@link module:ol/source/Source~Attribution},\n   *     or `undefined`.\n   * @api\n   */\n\n\n  Source.prototype.setAttributions = function (attributions) {\n    this.attributions_ = adaptAttributions(attributions);\n    this.changed();\n  };\n  /**\n   * Set the state of the source.\n   * @param {import(\"./Source.js\").State} state State.\n   */\n\n\n  Source.prototype.setState = function (state) {\n    this.state_ = state;\n    this.changed();\n  };\n\n  return Source;\n}(BaseObject);\n/**\n * Turns the attributions option into an attributions function.\n * @param {AttributionLike|undefined} attributionLike The attribution option.\n * @return {Attribution|null} An attribution function (or null).\n */\n\n\nfunction adaptAttributions(attributionLike) {\n  if (!attributionLike) {\n    return null;\n  }\n\n  if (Array.isArray(attributionLike)) {\n    return function (frameState) {\n      return attributionLike;\n    };\n  }\n\n  if (typeof attributionLike === 'function') {\n    return attributionLike;\n  }\n\n  return function (frameState) {\n    return [attributionLike];\n  };\n}\n\nexport default Source;","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","BaseObject","abstract","get","getProjection","Source","_super","options","_this","projection","attributions_","adaptAttributions","attributions","attributionsCollapsible_","attributionsCollapsible","undefined","loading","state_","state","wrapX_","wrapX","interpolate_","interpolate","viewResolver","viewRejector","self","viewPromise_","Promise","resolve","reject","getAttributions","getAttributionsCollapsible","getResolutions","getView","getState","getWrapX","getInterpolate","refresh","changed","setAttributions","setState","attributionLike","isArray","frameState"],"sources":["/home/asura/github/smartcity/node_modules/ol/source/Source.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/source/Source\n */\nimport BaseObject from '../Object.js';\nimport { abstract } from '../util.js';\nimport { get as getProjection } from '../proj.js';\n/**\n * @typedef {'undefined' | 'loading' | 'ready' | 'error'} State\n * State of the source, one of 'undefined', 'loading', 'ready' or 'error'.\n */\n/**\n * A function that takes a {@link module:ol/PluggableMap~FrameState} and returns a string or\n * an array of strings representing source attributions.\n *\n * @typedef {function(import(\"../PluggableMap.js\").FrameState): (string|Array<string>)} Attribution\n */\n/**\n * A type that can be used to provide attribution information for data sources.\n *\n * It represents either\n * * a simple string (e.g. `'© Acme Inc.'`)\n * * an array of simple strings (e.g. `['© Acme Inc.', '© Bacme Inc.']`)\n * * a function that returns a string or array of strings ({@link module:ol/source/Source~Attribution})\n *\n * @typedef {string|Array<string>|Attribution} AttributionLike\n */\n/**\n * @typedef {Object} Options\n * @property {AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {import(\"./Source.js\").State} [state='ready'] State.\n * @property {boolean} [wrapX=false] WrapX.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for {@link module:ol/layer/Layer~Layer} sources.\n *\n * A generic `change` event is triggered when the state of the source changes.\n * @abstract\n * @api\n */\nvar Source = /** @class */ (function (_super) {\n    __extends(Source, _super);\n    /**\n     * @param {Options} options Source options.\n     */\n    function Source(options) {\n        var _this = _super.call(this) || this;\n        /**\n         * @protected\n         * @type {import(\"../proj/Projection.js\").default|null}\n         */\n        _this.projection = getProjection(options.projection);\n        /**\n         * @private\n         * @type {?Attribution}\n         */\n        _this.attributions_ = adaptAttributions(options.attributions);\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.attributionsCollapsible_ =\n            options.attributionsCollapsible !== undefined\n                ? options.attributionsCollapsible\n                : true;\n        /**\n         * This source is currently loading data. Sources that defer loading to the\n         * map's tile queue never set this to `true`.\n         * @type {boolean}\n         */\n        _this.loading = false;\n        /**\n         * @private\n         * @type {import(\"./Source.js\").State}\n         */\n        _this.state_ = options.state !== undefined ? options.state : 'ready';\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.interpolate_ = !!options.interpolate;\n        /**\n         * @protected\n         * @type {function(import(\"../View.js\").ViewOptions):void}\n         */\n        _this.viewResolver = null;\n        /**\n         * @protected\n         * @type {function(Error):void}\n         */\n        _this.viewRejector = null;\n        var self = _this;\n        /**\n         * @private\n         * @type {Promise<import(\"../View.js\").ViewOptions>}\n         */\n        _this.viewPromise_ = new Promise(function (resolve, reject) {\n            self.viewResolver = resolve;\n            self.viewRejector = reject;\n        });\n        return _this;\n    }\n    /**\n     * Get the attribution function for the source.\n     * @return {?Attribution} Attribution function.\n     * @api\n     */\n    Source.prototype.getAttributions = function () {\n        return this.attributions_;\n    };\n    /**\n     * @return {boolean} Attributions are collapsible.\n     * @api\n     */\n    Source.prototype.getAttributionsCollapsible = function () {\n        return this.attributionsCollapsible_;\n    };\n    /**\n     * Get the projection of the source.\n     * @return {import(\"../proj/Projection.js\").default|null} Projection.\n     * @api\n     */\n    Source.prototype.getProjection = function () {\n        return this.projection;\n    };\n    /**\n     * @abstract\n     * @return {Array<number>|null} Resolutions.\n     */\n    Source.prototype.getResolutions = function () {\n        return abstract();\n    };\n    /**\n     * @return {Promise<import(\"../View.js\").ViewOptions>} A promise for view-related properties.\n     */\n    Source.prototype.getView = function () {\n        return this.viewPromise_;\n    };\n    /**\n     * Get the state of the source, see {@link import(\"./Source.js\").State} for possible states.\n     * @return {import(\"./Source.js\").State} State.\n     * @api\n     */\n    Source.prototype.getState = function () {\n        return this.state_;\n    };\n    /**\n     * @return {boolean|undefined} Wrap X.\n     */\n    Source.prototype.getWrapX = function () {\n        return this.wrapX_;\n    };\n    /**\n     * @return {boolean} Use linear interpolation when resampling.\n     */\n    Source.prototype.getInterpolate = function () {\n        return this.interpolate_;\n    };\n    /**\n     * Refreshes the source. The source will be cleared, and data from the server will be reloaded.\n     * @api\n     */\n    Source.prototype.refresh = function () {\n        this.changed();\n    };\n    /**\n     * Set the attributions of the source.\n     * @param {AttributionLike|undefined} attributions Attributions.\n     *     Can be passed as `string`, `Array<string>`, {@link module:ol/source/Source~Attribution},\n     *     or `undefined`.\n     * @api\n     */\n    Source.prototype.setAttributions = function (attributions) {\n        this.attributions_ = adaptAttributions(attributions);\n        this.changed();\n    };\n    /**\n     * Set the state of the source.\n     * @param {import(\"./Source.js\").State} state State.\n     */\n    Source.prototype.setState = function (state) {\n        this.state_ = state;\n        this.changed();\n    };\n    return Source;\n}(BaseObject));\n/**\n * Turns the attributions option into an attributions function.\n * @param {AttributionLike|undefined} attributionLike The attribution option.\n * @return {Attribution|null} An attribution function (or null).\n */\nfunction adaptAttributions(attributionLike) {\n    if (!attributionLike) {\n        return null;\n    }\n    if (Array.isArray(attributionLike)) {\n        return function (frameState) {\n            return attributionLike;\n        };\n    }\n    if (typeof attributionLike === 'function') {\n        return attributionLike;\n    }\n    return function (frameState) {\n        return [attributionLike];\n    };\n}\nexport default Source;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}