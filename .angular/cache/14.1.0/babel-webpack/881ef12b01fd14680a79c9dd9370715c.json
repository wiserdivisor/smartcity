{"ast":null,"code":"/**\n * @module ol/style/RegularShape\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport ImageState from '../ImageState.js';\nimport ImageStyle from './Image.js';\nimport { asArray } from '../color.js';\nimport { asColorLike } from '../colorlike.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { defaultFillStyle, defaultLineJoin, defaultLineWidth, defaultMiterLimit, defaultStrokeStyle } from '../render/canvas.js';\n/**\n * Specify radius for regular polygons, or radius1 and radius2 for stars.\n * @typedef {Object} Options\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points\n * is the number of sides.\n * @property {number} [radius] Radius of a regular polygon.\n * @property {number} [radius1] First radius of a star. Ignored if radius is set.\n * @property {number} [radius2] Second radius of a star.\n * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's point facing up.\n * @property {Array<number>} [displacement=[0,0]] Displacement of the shape\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. Unless two dimensional scaling is required a better\n * result may be obtained with appropriate settings for `radius`, `radius1` and `radius2`.\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} [declutterMode] Declutter mode\n */\n\n/**\n * @typedef {Object} RenderOptions\n * @property {import(\"../colorlike.js\").ColorLike} [strokeStyle] StrokeStyle.\n * @property {number} strokeWidth StrokeWidth.\n * @property {number} size Size.\n * @property {Array<number>} lineDash LineDash.\n * @property {number} lineDashOffset LineDashOffset.\n * @property {CanvasLineJoin} lineJoin LineJoin.\n * @property {number} miterLimit MiterLimit.\n */\n\n/**\n * @classdesc\n * Set regular shape style for vector features. The resulting shape will be\n * a regular polygon when `radius` is provided, or a star when `radius1` and\n * `radius2` are provided.\n * @api\n */\n\nvar RegularShape =\n/** @class */\nfunction (_super) {\n  __extends(RegularShape, _super);\n  /**\n   * @param {Options} options Options.\n   */\n\n\n  function RegularShape(options) {\n    var _this = this;\n    /**\n     * @type {boolean}\n     */\n\n\n    var rotateWithView = options.rotateWithView !== undefined ? options.rotateWithView : false;\n    _this = _super.call(this, {\n      opacity: 1,\n      rotateWithView: rotateWithView,\n      rotation: options.rotation !== undefined ? options.rotation : 0,\n      scale: options.scale !== undefined ? options.scale : 1,\n      displacement: options.displacement !== undefined ? options.displacement : [0, 0],\n      declutterMode: options.declutterMode\n    }) || this;\n    /**\n     * @private\n     * @type {Object<number, HTMLCanvasElement>}\n     */\n\n    _this.canvas_ = undefined;\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n\n    _this.hitDetectionCanvas_ = null;\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n\n    _this.fill_ = options.fill !== undefined ? options.fill : null;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    _this.origin_ = [0, 0];\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.points_ = options.points;\n    /**\n     * @protected\n     * @type {number}\n     */\n\n    _this.radius_ = options.radius !== undefined ? options.radius : options.radius1;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    _this.radius2_ = options.radius2;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.angle_ = options.angle !== undefined ? options.angle : 0;\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n\n    _this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n\n    _this.size_ = null;\n    /**\n     * @private\n     * @type {RenderOptions}\n     */\n\n    _this.renderOptions_ = null;\n\n    _this.render();\n\n    return _this;\n  }\n  /**\n   * Clones the style.\n   * @return {RegularShape} The cloned style.\n   * @api\n   */\n\n\n  RegularShape.prototype.clone = function () {\n    var scale = this.getScale();\n    var style = new RegularShape({\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      points: this.getPoints(),\n      radius: this.getRadius(),\n      radius2: this.getRadius2(),\n      angle: this.getAngle(),\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      displacement: this.getDisplacement().slice(),\n      declutterMode: this.getDeclutterMode()\n    });\n    style.setOpacity(this.getOpacity());\n    return style;\n  };\n  /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @return {Array<number>} Anchor.\n   * @api\n   */\n\n\n  RegularShape.prototype.getAnchor = function () {\n    var size = this.size_;\n\n    if (!size) {\n      return null;\n    }\n\n    var displacement = this.getDisplacement();\n    return [size[0] / 2 - displacement[0], size[1] / 2 + displacement[1]];\n  };\n  /**\n   * Get the angle used in generating the shape.\n   * @return {number} Shape's rotation in radians.\n   * @api\n   */\n\n\n  RegularShape.prototype.getAngle = function () {\n    return this.angle_;\n  };\n  /**\n   * Get the fill style for the shape.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n\n\n  RegularShape.prototype.getFill = function () {\n    return this.fill_;\n  };\n  /**\n   * Set the fill style.\n   * @param {import(\"./Fill.js\").default} fill Fill style.\n   * @api\n   */\n\n\n  RegularShape.prototype.setFill = function (fill) {\n    this.fill_ = fill;\n    this.render();\n  };\n  /**\n   * @return {HTMLCanvasElement} Image element.\n   */\n\n\n  RegularShape.prototype.getHitDetectionImage = function () {\n    if (!this.hitDetectionCanvas_) {\n      this.createHitDetectionCanvas_(this.renderOptions_);\n    }\n\n    return this.hitDetectionCanvas_;\n  };\n  /**\n   * Get the image icon.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLCanvasElement} Image or Canvas element.\n   * @api\n   */\n\n\n  RegularShape.prototype.getImage = function (pixelRatio) {\n    var image = this.canvas_[pixelRatio];\n\n    if (!image) {\n      var renderOptions = this.renderOptions_;\n      var context = createCanvasContext2D(renderOptions.size * pixelRatio, renderOptions.size * pixelRatio);\n      this.draw_(renderOptions, context, pixelRatio);\n      image = context.canvas;\n      this.canvas_[pixelRatio] = image;\n    }\n\n    return image;\n  };\n  /**\n   * Get the image pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Pixel ratio.\n   */\n\n\n  RegularShape.prototype.getPixelRatio = function (pixelRatio) {\n    return pixelRatio;\n  };\n  /**\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n\n\n  RegularShape.prototype.getImageSize = function () {\n    return this.size_;\n  };\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n\n\n  RegularShape.prototype.getImageState = function () {\n    return ImageState.LOADED;\n  };\n  /**\n   * Get the origin of the symbolizer.\n   * @return {Array<number>} Origin.\n   * @api\n   */\n\n\n  RegularShape.prototype.getOrigin = function () {\n    return this.origin_;\n  };\n  /**\n   * Get the number of points for generating the shape.\n   * @return {number} Number of points for stars and regular polygons.\n   * @api\n   */\n\n\n  RegularShape.prototype.getPoints = function () {\n    return this.points_;\n  };\n  /**\n   * Get the (primary) radius for the shape.\n   * @return {number} Radius.\n   * @api\n   */\n\n\n  RegularShape.prototype.getRadius = function () {\n    return this.radius_;\n  };\n  /**\n   * Get the secondary radius for the shape.\n   * @return {number|undefined} Radius2.\n   * @api\n   */\n\n\n  RegularShape.prototype.getRadius2 = function () {\n    return this.radius2_;\n  };\n  /**\n   * Get the size of the symbolizer (in pixels).\n   * @return {import(\"../size.js\").Size} Size.\n   * @api\n   */\n\n\n  RegularShape.prototype.getSize = function () {\n    return this.size_;\n  };\n  /**\n   * Get the stroke style for the shape.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n\n\n  RegularShape.prototype.getStroke = function () {\n    return this.stroke_;\n  };\n  /**\n   * Set the stroke style.\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n   * @api\n   */\n\n\n  RegularShape.prototype.setStroke = function (stroke) {\n    this.stroke_ = stroke;\n    this.render();\n  };\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n\n\n  RegularShape.prototype.listenImageChange = function (listener) {};\n  /**\n   * Load not yet loaded URI.\n   */\n\n\n  RegularShape.prototype.load = function () {};\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n\n\n  RegularShape.prototype.unlistenImageChange = function (listener) {};\n  /**\n   * Calculate additional canvas size needed for the miter.\n   * @param {string} lineJoin Line join\n   * @param {number} strokeWidth Stroke width\n   * @param {number} miterLimit Miter limit\n   * @return {number} Additional canvas size needed\n   * @private\n   */\n\n\n  RegularShape.prototype.calculateLineJoinSize_ = function (lineJoin, strokeWidth, miterLimit) {\n    if (strokeWidth === 0 || this.points_ === Infinity || lineJoin !== 'bevel' && lineJoin !== 'miter') {\n      return strokeWidth;\n    } // m  | ^\n    // i  | |\\                  .\n    // t >|  #\\\n    // e  | |\\ \\              .\n    // r      \\s\\\n    //      |  \\t\\          .                 .\n    //          \\r\\                      .   .\n    //      |    \\o\\      .          .  . . .\n    //          e \\k\\            .  .    . .\n    //      |      \\e\\  .    .  .       . .\n    //       d      \\ \\  .  .          . .\n    //      | _ _a_ _\\#  .            . .\n    //   r1          / `             . .\n    //      |                       . .\n    //       b     /               . .\n    //      |                     . .\n    //           / r2            . .\n    //      |                        .   .\n    //         /                           .   .\n    //      |α                                   .   .\n    //       /                                         .   .\n    //      ° center\n\n\n    var r1 = this.radius_;\n    var r2 = this.radius2_ === undefined ? r1 : this.radius2_;\n\n    if (r1 < r2) {\n      var tmp = r1;\n      r1 = r2;\n      r2 = tmp;\n    }\n\n    var points = this.radius2_ === undefined ? this.points_ : this.points_ * 2;\n    var alpha = 2 * Math.PI / points;\n    var a = r2 * Math.sin(alpha);\n    var b = Math.sqrt(r2 * r2 - a * a);\n    var d = r1 - b;\n    var e = Math.sqrt(a * a + d * d);\n    var miterRatio = e / a;\n\n    if (lineJoin === 'miter' && miterRatio <= miterLimit) {\n      return miterRatio * strokeWidth;\n    } // Calculate the distnce from center to the stroke corner where\n    // it was cut short because of the miter limit.\n    //              l\n    //        ----+---- <= distance from center to here is maxr\n    //       /####|k ##\\\n    //      /#####^#####\\\n    //     /#### /+\\# s #\\\n    //    /### h/+++\\# t #\\\n    //   /### t/+++++\\# r #\\\n    //  /### a/+++++++\\# o #\\\n    // /### p/++ fill +\\# k #\\\n    ///#### /+++++^+++++\\# e #\\\n    //#####/+++++/+\\+++++\\#####\\\n\n\n    var k = strokeWidth / 2 / miterRatio;\n    var l = strokeWidth / 2 * (d / e);\n    var maxr = Math.sqrt((r1 + k) * (r1 + k) + l * l);\n    var bevelAdd = maxr - r1;\n\n    if (this.radius2_ === undefined || lineJoin === 'bevel') {\n      return bevelAdd * 2;\n    } // If outer miter is over the miter limit the inner miter may reach through the\n    // center and be longer than the bevel, same calculation as above but swap r1 / r2.\n\n\n    var aa = r1 * Math.sin(alpha);\n    var bb = Math.sqrt(r1 * r1 - aa * aa);\n    var dd = r2 - bb;\n    var ee = Math.sqrt(aa * aa + dd * dd);\n    var innerMiterRatio = ee / aa;\n\n    if (innerMiterRatio <= miterLimit) {\n      var innerLength = innerMiterRatio * strokeWidth / 2 - r2 - r1;\n      return 2 * Math.max(bevelAdd, innerLength);\n    }\n\n    return bevelAdd * 2;\n  };\n  /**\n   * @return {RenderOptions}  The render options\n   * @protected\n   */\n\n\n  RegularShape.prototype.createRenderOptions = function () {\n    var lineJoin = defaultLineJoin;\n    var miterLimit = 0;\n    var lineDash = null;\n    var lineDashOffset = 0;\n    var strokeStyle;\n    var strokeWidth = 0;\n\n    if (this.stroke_) {\n      strokeStyle = this.stroke_.getColor();\n\n      if (strokeStyle === null) {\n        strokeStyle = defaultStrokeStyle;\n      }\n\n      strokeStyle = asColorLike(strokeStyle);\n      strokeWidth = this.stroke_.getWidth();\n\n      if (strokeWidth === undefined) {\n        strokeWidth = defaultLineWidth;\n      }\n\n      lineDash = this.stroke_.getLineDash();\n      lineDashOffset = this.stroke_.getLineDashOffset();\n      lineJoin = this.stroke_.getLineJoin();\n\n      if (lineJoin === undefined) {\n        lineJoin = defaultLineJoin;\n      }\n\n      miterLimit = this.stroke_.getMiterLimit();\n\n      if (miterLimit === undefined) {\n        miterLimit = defaultMiterLimit;\n      }\n    }\n\n    var add = this.calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit);\n    var maxRadius = Math.max(this.radius_, this.radius2_ || 0);\n    var size = Math.ceil(2 * maxRadius + add);\n    return {\n      strokeStyle: strokeStyle,\n      strokeWidth: strokeWidth,\n      size: size,\n      lineDash: lineDash,\n      lineDashOffset: lineDashOffset,\n      lineJoin: lineJoin,\n      miterLimit: miterLimit\n    };\n  };\n  /**\n   * @protected\n   */\n\n\n  RegularShape.prototype.render = function () {\n    this.renderOptions_ = this.createRenderOptions();\n    var size = this.renderOptions_.size;\n    this.canvas_ = {};\n    this.size_ = [size, size];\n  };\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The rendering context.\n   * @param {number} pixelRatio The pixel ratio.\n   */\n\n\n  RegularShape.prototype.draw_ = function (renderOptions, context, pixelRatio) {\n    context.scale(pixelRatio, pixelRatio); // set origin to canvas center\n\n    context.translate(renderOptions.size / 2, renderOptions.size / 2);\n    this.createPath_(context);\n\n    if (this.fill_) {\n      var color = this.fill_.getColor();\n\n      if (color === null) {\n        color = defaultFillStyle;\n      }\n\n      context.fillStyle = asColorLike(color);\n      context.fill();\n    }\n\n    if (this.stroke_) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n\n      if (context.setLineDash && renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n\n      context.lineJoin = renderOptions.lineJoin;\n      context.miterLimit = renderOptions.miterLimit;\n      context.stroke();\n    }\n  };\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   */\n\n\n  RegularShape.prototype.createHitDetectionCanvas_ = function (renderOptions) {\n    if (this.fill_) {\n      var color = this.fill_.getColor(); // determine if fill is transparent (or pattern or gradient)\n\n      var opacity = 0;\n\n      if (typeof color === 'string') {\n        color = asArray(color);\n      }\n\n      if (color === null) {\n        opacity = 1;\n      } else if (Array.isArray(color)) {\n        opacity = color.length === 4 ? color[3] : 1;\n      }\n\n      if (opacity === 0) {\n        // if a transparent fill style is set, create an extra hit-detection image\n        // with a default fill style\n        var context = createCanvasContext2D(renderOptions.size, renderOptions.size);\n        this.hitDetectionCanvas_ = context.canvas;\n        this.drawHitDetectionCanvas_(renderOptions, context);\n      }\n    }\n\n    if (!this.hitDetectionCanvas_) {\n      this.hitDetectionCanvas_ = this.getImage(1);\n    }\n  };\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context The context to draw in.\n   */\n\n\n  RegularShape.prototype.createPath_ = function (context) {\n    var points = this.points_;\n    var radius = this.radius_;\n\n    if (points === Infinity) {\n      context.arc(0, 0, radius, 0, 2 * Math.PI);\n    } else {\n      var radius2 = this.radius2_ === undefined ? radius : this.radius2_;\n\n      if (this.radius2_ !== undefined) {\n        points *= 2;\n      }\n\n      var startAngle = this.angle_ - Math.PI / 2;\n      var step = 2 * Math.PI / points;\n\n      for (var i = 0; i < points; i++) {\n        var angle0 = startAngle + i * step;\n        var radiusC = i % 2 === 0 ? radius : radius2;\n        context.lineTo(radiusC * Math.cos(angle0), radiusC * Math.sin(angle0));\n      }\n\n      context.closePath();\n    }\n  };\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The context.\n   */\n\n\n  RegularShape.prototype.drawHitDetectionCanvas_ = function (renderOptions, context) {\n    // set origin to canvas center\n    context.translate(renderOptions.size / 2, renderOptions.size / 2);\n    this.createPath_(context);\n    context.fillStyle = defaultFillStyle;\n    context.fill();\n\n    if (this.stroke_) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n\n      if (renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n\n      context.lineJoin = renderOptions.lineJoin;\n      context.miterLimit = renderOptions.miterLimit;\n      context.stroke();\n    }\n  };\n\n  return RegularShape;\n}(ImageStyle);\n\nexport default RegularShape;","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","ImageState","ImageStyle","asArray","asColorLike","createCanvasContext2D","defaultFillStyle","defaultLineJoin","defaultLineWidth","defaultMiterLimit","defaultStrokeStyle","RegularShape","_super","options","_this","rotateWithView","undefined","opacity","rotation","scale","displacement","declutterMode","canvas_","hitDetectionCanvas_","fill_","fill","origin_","points_","points","radius_","radius","radius1","radius2_","radius2","angle_","angle","stroke_","stroke","size_","renderOptions_","render","clone","getScale","style","getFill","getPoints","getRadius","getRadius2","getAngle","getStroke","getRotation","getRotateWithView","isArray","slice","getDisplacement","getDeclutterMode","setOpacity","getOpacity","getAnchor","size","setFill","getHitDetectionImage","createHitDetectionCanvas_","getImage","pixelRatio","image","renderOptions","context","draw_","canvas","getPixelRatio","getImageSize","getImageState","LOADED","getOrigin","getSize","setStroke","listenImageChange","listener","load","unlistenImageChange","calculateLineJoinSize_","lineJoin","strokeWidth","miterLimit","Infinity","r1","r2","tmp","alpha","Math","PI","a","sin","sqrt","e","miterRatio","k","l","maxr","bevelAdd","aa","bb","dd","ee","innerMiterRatio","innerLength","max","createRenderOptions","lineDash","lineDashOffset","strokeStyle","getColor","getWidth","getLineDash","getLineDashOffset","getLineJoin","getMiterLimit","add","maxRadius","ceil","translate","createPath_","color","fillStyle","lineWidth","setLineDash","length","drawHitDetectionCanvas_","arc","startAngle","step","i","angle0","radiusC","lineTo","cos","closePath"],"sources":["/home/asura/github/smartcity/node_modules/ol/style/RegularShape.js"],"sourcesContent":["/**\n * @module ol/style/RegularShape\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport ImageState from '../ImageState.js';\nimport ImageStyle from './Image.js';\nimport { asArray } from '../color.js';\nimport { asColorLike } from '../colorlike.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { defaultFillStyle, defaultLineJoin, defaultLineWidth, defaultMiterLimit, defaultStrokeStyle, } from '../render/canvas.js';\n/**\n * Specify radius for regular polygons, or radius1 and radius2 for stars.\n * @typedef {Object} Options\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points\n * is the number of sides.\n * @property {number} [radius] Radius of a regular polygon.\n * @property {number} [radius1] First radius of a star. Ignored if radius is set.\n * @property {number} [radius2] Second radius of a star.\n * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's point facing up.\n * @property {Array<number>} [displacement=[0,0]] Displacement of the shape\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. Unless two dimensional scaling is required a better\n * result may be obtained with appropriate settings for `radius`, `radius1` and `radius2`.\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} [declutterMode] Declutter mode\n */\n/**\n * @typedef {Object} RenderOptions\n * @property {import(\"../colorlike.js\").ColorLike} [strokeStyle] StrokeStyle.\n * @property {number} strokeWidth StrokeWidth.\n * @property {number} size Size.\n * @property {Array<number>} lineDash LineDash.\n * @property {number} lineDashOffset LineDashOffset.\n * @property {CanvasLineJoin} lineJoin LineJoin.\n * @property {number} miterLimit MiterLimit.\n */\n/**\n * @classdesc\n * Set regular shape style for vector features. The resulting shape will be\n * a regular polygon when `radius` is provided, or a star when `radius1` and\n * `radius2` are provided.\n * @api\n */\nvar RegularShape = /** @class */ (function (_super) {\n    __extends(RegularShape, _super);\n    /**\n     * @param {Options} options Options.\n     */\n    function RegularShape(options) {\n        var _this = this;\n        /**\n         * @type {boolean}\n         */\n        var rotateWithView = options.rotateWithView !== undefined ? options.rotateWithView : false;\n        _this = _super.call(this, {\n            opacity: 1,\n            rotateWithView: rotateWithView,\n            rotation: options.rotation !== undefined ? options.rotation : 0,\n            scale: options.scale !== undefined ? options.scale : 1,\n            displacement: options.displacement !== undefined ? options.displacement : [0, 0],\n            declutterMode: options.declutterMode,\n        }) || this;\n        /**\n         * @private\n         * @type {Object<number, HTMLCanvasElement>}\n         */\n        _this.canvas_ = undefined;\n        /**\n         * @private\n         * @type {HTMLCanvasElement}\n         */\n        _this.hitDetectionCanvas_ = null;\n        /**\n         * @private\n         * @type {import(\"./Fill.js\").default}\n         */\n        _this.fill_ = options.fill !== undefined ? options.fill : null;\n        /**\n         * @private\n         * @type {Array<number>}\n         */\n        _this.origin_ = [0, 0];\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.points_ = options.points;\n        /**\n         * @protected\n         * @type {number}\n         */\n        _this.radius_ =\n            options.radius !== undefined ? options.radius : options.radius1;\n        /**\n         * @private\n         * @type {number|undefined}\n         */\n        _this.radius2_ = options.radius2;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.angle_ = options.angle !== undefined ? options.angle : 0;\n        /**\n         * @private\n         * @type {import(\"./Stroke.js\").default}\n         */\n        _this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n        /**\n         * @private\n         * @type {import(\"../size.js\").Size}\n         */\n        _this.size_ = null;\n        /**\n         * @private\n         * @type {RenderOptions}\n         */\n        _this.renderOptions_ = null;\n        _this.render();\n        return _this;\n    }\n    /**\n     * Clones the style.\n     * @return {RegularShape} The cloned style.\n     * @api\n     */\n    RegularShape.prototype.clone = function () {\n        var scale = this.getScale();\n        var style = new RegularShape({\n            fill: this.getFill() ? this.getFill().clone() : undefined,\n            points: this.getPoints(),\n            radius: this.getRadius(),\n            radius2: this.getRadius2(),\n            angle: this.getAngle(),\n            stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n            rotation: this.getRotation(),\n            rotateWithView: this.getRotateWithView(),\n            scale: Array.isArray(scale) ? scale.slice() : scale,\n            displacement: this.getDisplacement().slice(),\n            declutterMode: this.getDeclutterMode(),\n        });\n        style.setOpacity(this.getOpacity());\n        return style;\n    };\n    /**\n     * Get the anchor point in pixels. The anchor determines the center point for the\n     * symbolizer.\n     * @return {Array<number>} Anchor.\n     * @api\n     */\n    RegularShape.prototype.getAnchor = function () {\n        var size = this.size_;\n        if (!size) {\n            return null;\n        }\n        var displacement = this.getDisplacement();\n        return [size[0] / 2 - displacement[0], size[1] / 2 + displacement[1]];\n    };\n    /**\n     * Get the angle used in generating the shape.\n     * @return {number} Shape's rotation in radians.\n     * @api\n     */\n    RegularShape.prototype.getAngle = function () {\n        return this.angle_;\n    };\n    /**\n     * Get the fill style for the shape.\n     * @return {import(\"./Fill.js\").default} Fill style.\n     * @api\n     */\n    RegularShape.prototype.getFill = function () {\n        return this.fill_;\n    };\n    /**\n     * Set the fill style.\n     * @param {import(\"./Fill.js\").default} fill Fill style.\n     * @api\n     */\n    RegularShape.prototype.setFill = function (fill) {\n        this.fill_ = fill;\n        this.render();\n    };\n    /**\n     * @return {HTMLCanvasElement} Image element.\n     */\n    RegularShape.prototype.getHitDetectionImage = function () {\n        if (!this.hitDetectionCanvas_) {\n            this.createHitDetectionCanvas_(this.renderOptions_);\n        }\n        return this.hitDetectionCanvas_;\n    };\n    /**\n     * Get the image icon.\n     * @param {number} pixelRatio Pixel ratio.\n     * @return {HTMLCanvasElement} Image or Canvas element.\n     * @api\n     */\n    RegularShape.prototype.getImage = function (pixelRatio) {\n        var image = this.canvas_[pixelRatio];\n        if (!image) {\n            var renderOptions = this.renderOptions_;\n            var context = createCanvasContext2D(renderOptions.size * pixelRatio, renderOptions.size * pixelRatio);\n            this.draw_(renderOptions, context, pixelRatio);\n            image = context.canvas;\n            this.canvas_[pixelRatio] = image;\n        }\n        return image;\n    };\n    /**\n     * Get the image pixel ratio.\n     * @param {number} pixelRatio Pixel ratio.\n     * @return {number} Pixel ratio.\n     */\n    RegularShape.prototype.getPixelRatio = function (pixelRatio) {\n        return pixelRatio;\n    };\n    /**\n     * @return {import(\"../size.js\").Size} Image size.\n     */\n    RegularShape.prototype.getImageSize = function () {\n        return this.size_;\n    };\n    /**\n     * @return {import(\"../ImageState.js\").default} Image state.\n     */\n    RegularShape.prototype.getImageState = function () {\n        return ImageState.LOADED;\n    };\n    /**\n     * Get the origin of the symbolizer.\n     * @return {Array<number>} Origin.\n     * @api\n     */\n    RegularShape.prototype.getOrigin = function () {\n        return this.origin_;\n    };\n    /**\n     * Get the number of points for generating the shape.\n     * @return {number} Number of points for stars and regular polygons.\n     * @api\n     */\n    RegularShape.prototype.getPoints = function () {\n        return this.points_;\n    };\n    /**\n     * Get the (primary) radius for the shape.\n     * @return {number} Radius.\n     * @api\n     */\n    RegularShape.prototype.getRadius = function () {\n        return this.radius_;\n    };\n    /**\n     * Get the secondary radius for the shape.\n     * @return {number|undefined} Radius2.\n     * @api\n     */\n    RegularShape.prototype.getRadius2 = function () {\n        return this.radius2_;\n    };\n    /**\n     * Get the size of the symbolizer (in pixels).\n     * @return {import(\"../size.js\").Size} Size.\n     * @api\n     */\n    RegularShape.prototype.getSize = function () {\n        return this.size_;\n    };\n    /**\n     * Get the stroke style for the shape.\n     * @return {import(\"./Stroke.js\").default} Stroke style.\n     * @api\n     */\n    RegularShape.prototype.getStroke = function () {\n        return this.stroke_;\n    };\n    /**\n     * Set the stroke style.\n     * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n     * @api\n     */\n    RegularShape.prototype.setStroke = function (stroke) {\n        this.stroke_ = stroke;\n        this.render();\n    };\n    /**\n     * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n     */\n    RegularShape.prototype.listenImageChange = function (listener) { };\n    /**\n     * Load not yet loaded URI.\n     */\n    RegularShape.prototype.load = function () { };\n    /**\n     * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n     */\n    RegularShape.prototype.unlistenImageChange = function (listener) { };\n    /**\n     * Calculate additional canvas size needed for the miter.\n     * @param {string} lineJoin Line join\n     * @param {number} strokeWidth Stroke width\n     * @param {number} miterLimit Miter limit\n     * @return {number} Additional canvas size needed\n     * @private\n     */\n    RegularShape.prototype.calculateLineJoinSize_ = function (lineJoin, strokeWidth, miterLimit) {\n        if (strokeWidth === 0 ||\n            this.points_ === Infinity ||\n            (lineJoin !== 'bevel' && lineJoin !== 'miter')) {\n            return strokeWidth;\n        }\n        // m  | ^\n        // i  | |\\                  .\n        // t >|  #\\\n        // e  | |\\ \\              .\n        // r      \\s\\\n        //      |  \\t\\          .                 .\n        //          \\r\\                      .   .\n        //      |    \\o\\      .          .  . . .\n        //          e \\k\\            .  .    . .\n        //      |      \\e\\  .    .  .       . .\n        //       d      \\ \\  .  .          . .\n        //      | _ _a_ _\\#  .            . .\n        //   r1          / `             . .\n        //      |                       . .\n        //       b     /               . .\n        //      |                     . .\n        //           / r2            . .\n        //      |                        .   .\n        //         /                           .   .\n        //      |α                                   .   .\n        //       /                                         .   .\n        //      ° center\n        var r1 = this.radius_;\n        var r2 = this.radius2_ === undefined ? r1 : this.radius2_;\n        if (r1 < r2) {\n            var tmp = r1;\n            r1 = r2;\n            r2 = tmp;\n        }\n        var points = this.radius2_ === undefined ? this.points_ : this.points_ * 2;\n        var alpha = (2 * Math.PI) / points;\n        var a = r2 * Math.sin(alpha);\n        var b = Math.sqrt(r2 * r2 - a * a);\n        var d = r1 - b;\n        var e = Math.sqrt(a * a + d * d);\n        var miterRatio = e / a;\n        if (lineJoin === 'miter' && miterRatio <= miterLimit) {\n            return miterRatio * strokeWidth;\n        }\n        // Calculate the distnce from center to the stroke corner where\n        // it was cut short because of the miter limit.\n        //              l\n        //        ----+---- <= distance from center to here is maxr\n        //       /####|k ##\\\n        //      /#####^#####\\\n        //     /#### /+\\# s #\\\n        //    /### h/+++\\# t #\\\n        //   /### t/+++++\\# r #\\\n        //  /### a/+++++++\\# o #\\\n        // /### p/++ fill +\\# k #\\\n        ///#### /+++++^+++++\\# e #\\\n        //#####/+++++/+\\+++++\\#####\\\n        var k = strokeWidth / 2 / miterRatio;\n        var l = (strokeWidth / 2) * (d / e);\n        var maxr = Math.sqrt((r1 + k) * (r1 + k) + l * l);\n        var bevelAdd = maxr - r1;\n        if (this.radius2_ === undefined || lineJoin === 'bevel') {\n            return bevelAdd * 2;\n        }\n        // If outer miter is over the miter limit the inner miter may reach through the\n        // center and be longer than the bevel, same calculation as above but swap r1 / r2.\n        var aa = r1 * Math.sin(alpha);\n        var bb = Math.sqrt(r1 * r1 - aa * aa);\n        var dd = r2 - bb;\n        var ee = Math.sqrt(aa * aa + dd * dd);\n        var innerMiterRatio = ee / aa;\n        if (innerMiterRatio <= miterLimit) {\n            var innerLength = (innerMiterRatio * strokeWidth) / 2 - r2 - r1;\n            return 2 * Math.max(bevelAdd, innerLength);\n        }\n        return bevelAdd * 2;\n    };\n    /**\n     * @return {RenderOptions}  The render options\n     * @protected\n     */\n    RegularShape.prototype.createRenderOptions = function () {\n        var lineJoin = defaultLineJoin;\n        var miterLimit = 0;\n        var lineDash = null;\n        var lineDashOffset = 0;\n        var strokeStyle;\n        var strokeWidth = 0;\n        if (this.stroke_) {\n            strokeStyle = this.stroke_.getColor();\n            if (strokeStyle === null) {\n                strokeStyle = defaultStrokeStyle;\n            }\n            strokeStyle = asColorLike(strokeStyle);\n            strokeWidth = this.stroke_.getWidth();\n            if (strokeWidth === undefined) {\n                strokeWidth = defaultLineWidth;\n            }\n            lineDash = this.stroke_.getLineDash();\n            lineDashOffset = this.stroke_.getLineDashOffset();\n            lineJoin = this.stroke_.getLineJoin();\n            if (lineJoin === undefined) {\n                lineJoin = defaultLineJoin;\n            }\n            miterLimit = this.stroke_.getMiterLimit();\n            if (miterLimit === undefined) {\n                miterLimit = defaultMiterLimit;\n            }\n        }\n        var add = this.calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit);\n        var maxRadius = Math.max(this.radius_, this.radius2_ || 0);\n        var size = Math.ceil(2 * maxRadius + add);\n        return {\n            strokeStyle: strokeStyle,\n            strokeWidth: strokeWidth,\n            size: size,\n            lineDash: lineDash,\n            lineDashOffset: lineDashOffset,\n            lineJoin: lineJoin,\n            miterLimit: miterLimit,\n        };\n    };\n    /**\n     * @protected\n     */\n    RegularShape.prototype.render = function () {\n        this.renderOptions_ = this.createRenderOptions();\n        var size = this.renderOptions_.size;\n        this.canvas_ = {};\n        this.size_ = [size, size];\n    };\n    /**\n     * @private\n     * @param {RenderOptions} renderOptions Render options.\n     * @param {CanvasRenderingContext2D} context The rendering context.\n     * @param {number} pixelRatio The pixel ratio.\n     */\n    RegularShape.prototype.draw_ = function (renderOptions, context, pixelRatio) {\n        context.scale(pixelRatio, pixelRatio);\n        // set origin to canvas center\n        context.translate(renderOptions.size / 2, renderOptions.size / 2);\n        this.createPath_(context);\n        if (this.fill_) {\n            var color = this.fill_.getColor();\n            if (color === null) {\n                color = defaultFillStyle;\n            }\n            context.fillStyle = asColorLike(color);\n            context.fill();\n        }\n        if (this.stroke_) {\n            context.strokeStyle = renderOptions.strokeStyle;\n            context.lineWidth = renderOptions.strokeWidth;\n            if (context.setLineDash && renderOptions.lineDash) {\n                context.setLineDash(renderOptions.lineDash);\n                context.lineDashOffset = renderOptions.lineDashOffset;\n            }\n            context.lineJoin = renderOptions.lineJoin;\n            context.miterLimit = renderOptions.miterLimit;\n            context.stroke();\n        }\n    };\n    /**\n     * @private\n     * @param {RenderOptions} renderOptions Render options.\n     */\n    RegularShape.prototype.createHitDetectionCanvas_ = function (renderOptions) {\n        if (this.fill_) {\n            var color = this.fill_.getColor();\n            // determine if fill is transparent (or pattern or gradient)\n            var opacity = 0;\n            if (typeof color === 'string') {\n                color = asArray(color);\n            }\n            if (color === null) {\n                opacity = 1;\n            }\n            else if (Array.isArray(color)) {\n                opacity = color.length === 4 ? color[3] : 1;\n            }\n            if (opacity === 0) {\n                // if a transparent fill style is set, create an extra hit-detection image\n                // with a default fill style\n                var context = createCanvasContext2D(renderOptions.size, renderOptions.size);\n                this.hitDetectionCanvas_ = context.canvas;\n                this.drawHitDetectionCanvas_(renderOptions, context);\n            }\n        }\n        if (!this.hitDetectionCanvas_) {\n            this.hitDetectionCanvas_ = this.getImage(1);\n        }\n    };\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} context The context to draw in.\n     */\n    RegularShape.prototype.createPath_ = function (context) {\n        var points = this.points_;\n        var radius = this.radius_;\n        if (points === Infinity) {\n            context.arc(0, 0, radius, 0, 2 * Math.PI);\n        }\n        else {\n            var radius2 = this.radius2_ === undefined ? radius : this.radius2_;\n            if (this.radius2_ !== undefined) {\n                points *= 2;\n            }\n            var startAngle = this.angle_ - Math.PI / 2;\n            var step = (2 * Math.PI) / points;\n            for (var i = 0; i < points; i++) {\n                var angle0 = startAngle + i * step;\n                var radiusC = i % 2 === 0 ? radius : radius2;\n                context.lineTo(radiusC * Math.cos(angle0), radiusC * Math.sin(angle0));\n            }\n            context.closePath();\n        }\n    };\n    /**\n     * @private\n     * @param {RenderOptions} renderOptions Render options.\n     * @param {CanvasRenderingContext2D} context The context.\n     */\n    RegularShape.prototype.drawHitDetectionCanvas_ = function (renderOptions, context) {\n        // set origin to canvas center\n        context.translate(renderOptions.size / 2, renderOptions.size / 2);\n        this.createPath_(context);\n        context.fillStyle = defaultFillStyle;\n        context.fill();\n        if (this.stroke_) {\n            context.strokeStyle = renderOptions.strokeStyle;\n            context.lineWidth = renderOptions.strokeWidth;\n            if (renderOptions.lineDash) {\n                context.setLineDash(renderOptions.lineDash);\n                context.lineDashOffset = renderOptions.lineDashOffset;\n            }\n            context.lineJoin = renderOptions.lineJoin;\n            context.miterLimit = renderOptions.miterLimit;\n            context.stroke();\n        }\n    };\n    return RegularShape;\n}(ImageStyle));\nexport default RegularShape;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}