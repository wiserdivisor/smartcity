{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/proj/epsg3857\n */\n\n\nimport Projection from './Projection.js';\nimport Units from './Units.js';\nimport { cosh } from '../math.js';\n/**\n * Radius of WGS84 sphere\n *\n * @const\n * @type {number}\n */\n\nexport var RADIUS = 6378137;\n/**\n * @const\n * @type {number}\n */\n\nexport var HALF_SIZE = Math.PI * RADIUS;\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\n\nexport var EXTENT = [-HALF_SIZE, -HALF_SIZE, HALF_SIZE, HALF_SIZE];\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\n\nexport var WORLD_EXTENT = [-180, -85, 180, 85];\n/**\n * Maximum safe value in y direction\n * @const\n * @type {number}\n */\n\nexport var MAX_SAFE_Y = RADIUS * Math.log(Math.tan(Math.PI / 2));\n/**\n * @classdesc\n * Projection object for web/spherical Mercator (EPSG:3857).\n */\n\nvar EPSG3857Projection =\n/** @class */\nfunction (_super) {\n  __extends(EPSG3857Projection, _super);\n  /**\n   * @param {string} code Code.\n   */\n\n\n  function EPSG3857Projection(code) {\n    return _super.call(this, {\n      code: code,\n      units: Units.METERS,\n      extent: EXTENT,\n      global: true,\n      worldExtent: WORLD_EXTENT,\n      getPointResolution: function (resolution, point) {\n        return resolution / cosh(point[1] / RADIUS);\n      }\n    }) || this;\n  }\n\n  return EPSG3857Projection;\n}(Projection);\n/**\n * Projections equal to EPSG:3857.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */\n\n\nexport var PROJECTIONS = [new EPSG3857Projection('EPSG:3857'), new EPSG3857Projection('EPSG:102100'), new EPSG3857Projection('EPSG:102113'), new EPSG3857Projection('EPSG:900913'), new EPSG3857Projection('http://www.opengis.net/def/crs/EPSG/0/3857'), new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857')];\n/**\n * Transformation from EPSG:4326 to EPSG:3857.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>} [opt_output] Output array of coordinate values.\n * @param {number} [opt_dimension] Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\n\nexport function fromEPSG4326(input, opt_output, opt_dimension) {\n  var length = input.length;\n  var dimension = opt_dimension > 1 ? opt_dimension : 2;\n  var output = opt_output;\n\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n\n  for (var i = 0; i < length; i += dimension) {\n    output[i] = HALF_SIZE * input[i] / 180;\n    var y = RADIUS * Math.log(Math.tan(Math.PI * (+input[i + 1] + 90) / 360));\n\n    if (y > MAX_SAFE_Y) {\n      y = MAX_SAFE_Y;\n    } else if (y < -MAX_SAFE_Y) {\n      y = -MAX_SAFE_Y;\n    }\n\n    output[i + 1] = y;\n  }\n\n  return output;\n}\n/**\n * Transformation from EPSG:3857 to EPSG:4326.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>} [opt_output] Output array of coordinate values.\n * @param {number} [opt_dimension] Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\n\nexport function toEPSG4326(input, opt_output, opt_dimension) {\n  var length = input.length;\n  var dimension = opt_dimension > 1 ? opt_dimension : 2;\n  var output = opt_output;\n\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n\n  for (var i = 0; i < length; i += dimension) {\n    output[i] = 180 * input[i] / HALF_SIZE;\n    output[i + 1] = 360 * Math.atan(Math.exp(input[i + 1] / RADIUS)) / Math.PI - 90;\n  }\n\n  return output;\n}","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","Projection","Units","cosh","RADIUS","HALF_SIZE","Math","PI","EXTENT","WORLD_EXTENT","MAX_SAFE_Y","log","tan","EPSG3857Projection","_super","code","units","METERS","extent","global","worldExtent","getPointResolution","resolution","point","PROJECTIONS","fromEPSG4326","input","opt_output","opt_dimension","length","dimension","output","undefined","slice","i","y","toEPSG4326","atan","exp"],"sources":["/home/asura/github/smartcity/node_modules/ol/proj/epsg3857.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/proj/epsg3857\n */\nimport Projection from './Projection.js';\nimport Units from './Units.js';\nimport { cosh } from '../math.js';\n/**\n * Radius of WGS84 sphere\n *\n * @const\n * @type {number}\n */\nexport var RADIUS = 6378137;\n/**\n * @const\n * @type {number}\n */\nexport var HALF_SIZE = Math.PI * RADIUS;\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport var EXTENT = [-HALF_SIZE, -HALF_SIZE, HALF_SIZE, HALF_SIZE];\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport var WORLD_EXTENT = [-180, -85, 180, 85];\n/**\n * Maximum safe value in y direction\n * @const\n * @type {number}\n */\nexport var MAX_SAFE_Y = RADIUS * Math.log(Math.tan(Math.PI / 2));\n/**\n * @classdesc\n * Projection object for web/spherical Mercator (EPSG:3857).\n */\nvar EPSG3857Projection = /** @class */ (function (_super) {\n    __extends(EPSG3857Projection, _super);\n    /**\n     * @param {string} code Code.\n     */\n    function EPSG3857Projection(code) {\n        return _super.call(this, {\n            code: code,\n            units: Units.METERS,\n            extent: EXTENT,\n            global: true,\n            worldExtent: WORLD_EXTENT,\n            getPointResolution: function (resolution, point) {\n                return resolution / cosh(point[1] / RADIUS);\n            },\n        }) || this;\n    }\n    return EPSG3857Projection;\n}(Projection));\n/**\n * Projections equal to EPSG:3857.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */\nexport var PROJECTIONS = [\n    new EPSG3857Projection('EPSG:3857'),\n    new EPSG3857Projection('EPSG:102100'),\n    new EPSG3857Projection('EPSG:102113'),\n    new EPSG3857Projection('EPSG:900913'),\n    new EPSG3857Projection('http://www.opengis.net/def/crs/EPSG/0/3857'),\n    new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857'),\n];\n/**\n * Transformation from EPSG:4326 to EPSG:3857.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>} [opt_output] Output array of coordinate values.\n * @param {number} [opt_dimension] Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function fromEPSG4326(input, opt_output, opt_dimension) {\n    var length = input.length;\n    var dimension = opt_dimension > 1 ? opt_dimension : 2;\n    var output = opt_output;\n    if (output === undefined) {\n        if (dimension > 2) {\n            // preserve values beyond second dimension\n            output = input.slice();\n        }\n        else {\n            output = new Array(length);\n        }\n    }\n    for (var i = 0; i < length; i += dimension) {\n        output[i] = (HALF_SIZE * input[i]) / 180;\n        var y = RADIUS * Math.log(Math.tan((Math.PI * (+input[i + 1] + 90)) / 360));\n        if (y > MAX_SAFE_Y) {\n            y = MAX_SAFE_Y;\n        }\n        else if (y < -MAX_SAFE_Y) {\n            y = -MAX_SAFE_Y;\n        }\n        output[i + 1] = y;\n    }\n    return output;\n}\n/**\n * Transformation from EPSG:3857 to EPSG:4326.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>} [opt_output] Output array of coordinate values.\n * @param {number} [opt_dimension] Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function toEPSG4326(input, opt_output, opt_dimension) {\n    var length = input.length;\n    var dimension = opt_dimension > 1 ? opt_dimension : 2;\n    var output = opt_output;\n    if (output === undefined) {\n        if (dimension > 2) {\n            // preserve values beyond second dimension\n            output = input.slice();\n        }\n        else {\n            output = new Array(length);\n        }\n    }\n    for (var i = 0; i < length; i += dimension) {\n        output[i] = (180 * input[i]) / HALF_SIZE;\n        output[i + 1] =\n            (360 * Math.atan(Math.exp(input[i + 1] / RADIUS))) / Math.PI - 90;\n    }\n    return output;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}