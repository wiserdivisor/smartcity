{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/layer/Layer\n */\n\n\nimport BaseLayer from './Base.js';\nimport EventType from '../events/EventType.js';\nimport LayerProperty from './Property.js';\nimport RenderEventType from '../render/EventType.js';\nimport { assert } from '../asserts.js';\nimport { assign } from '../obj.js';\nimport { listen, unlistenByKey } from '../events.js';\n/**\n * @typedef {function(import(\"../PluggableMap.js\").FrameState):HTMLElement} RenderFunction\n */\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\n *     'change:source', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|'change:source'|\n *     import(\"../render/EventType\").LayerRenderEventTypes, Return>} LayerOnSignature\n */\n\n/**\n * @template {import(\"../source/Source.js\").default} [SourceType=import(\"../source/Source.js\").default]\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {SourceType} [source] Source for this layer.  If not provided to the constructor,\n * the source can be set by calling {@link module:ol/layer/Layer~Layer#setSource layer.setSource(source)} after\n * construction.\n * @property {import(\"../PluggableMap.js\").default|null} [map] Map.\n * @property {RenderFunction} [render] Render function. Takes the frame state as input and is expected to return an\n * HTML element. Will overwrite the default rendering for the layer.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @typedef {Object} State\n * @property {import(\"./Layer.js\").default} layer Layer.\n * @property {number} opacity Opacity, the value is rounded to two digits to appear after the decimal point.\n * @property {boolean} visible Visible.\n * @property {boolean} managed Managed.\n * @property {import(\"../extent.js\").Extent} [extent] Extent.\n * @property {number} zIndex ZIndex.\n * @property {number} maxResolution Maximum resolution.\n * @property {number} minResolution Minimum resolution.\n * @property {number} minZoom Minimum zoom.\n * @property {number} maxZoom Maximum zoom.\n */\n\n/**\n * @classdesc\n * Base class from which all layer types are derived. This should only be instantiated\n * in the case where a custom layer is added to the map with a custom `render` function.\n * Such a function can be specified in the `options` object, and is expected to return an HTML element.\n *\n * A visual representation of raster or vector map data.\n * Layers group together those properties that pertain to how the data is to be\n * displayed, irrespective of the source of that data.\n *\n * Layers are usually added to a map with {@link import(\"../PluggableMap.js\").default#addLayer map.addLayer()}. Components\n * like {@link module:ol/interaction/Draw~Draw} use unmanaged layers\n * internally. These unmanaged layers are associated with the map using\n * {@link module:ol/layer/Layer~Layer#setMap} instead.\n *\n * A generic `change` event is fired when the state of the source changes.\n *\n * Please note that for performance reasons several layers might get rendered to\n * the same HTML element, which will cause {@link import(\"../PluggableMap.js\").default#forEachLayerAtPixel map.forEachLayerAtPixel()} to\n * give false positives. To avoid this, apply different `className` properties to the\n * layers at creation time.\n *\n * @fires import(\"../render/Event.js\").RenderEvent#prerender\n * @fires import(\"../render/Event.js\").RenderEvent#postrender\n *\n * @template {import(\"../source/Source.js\").default} [SourceType=import(\"../source/Source.js\").default]\n * @template {import(\"../renderer/Layer.js\").default} [RendererType=import(\"../renderer/Layer.js\").default]\n * @api\n */\n\nvar Layer =\n/** @class */\nfunction (_super) {\n  __extends(Layer, _super);\n  /**\n   * @param {Options<SourceType>} options Layer options.\n   */\n\n\n  function Layer(options) {\n    var _this = this;\n\n    var baseOptions = assign({}, options);\n    delete baseOptions.source;\n    _this = _super.call(this, baseOptions) || this;\n    /***\n     * @type {LayerOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    _this.on;\n    /***\n     * @type {LayerOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    _this.once;\n    /***\n     * @type {LayerOnSignature<void>}\n     */\n\n    _this.un;\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n\n    _this.mapPrecomposeKey_ = null;\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n\n    _this.mapRenderKey_ = null;\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n\n    _this.sourceChangeKey_ = null;\n    /**\n     * @private\n     * @type {RendererType}\n     */\n\n    _this.renderer_ = null;\n    /**\n     * @protected\n     * @type {boolean}\n     */\n\n    _this.rendered = false; // Overwrite default render method with a custom one\n\n    if (options.render) {\n      _this.render = options.render;\n    }\n\n    if (options.map) {\n      _this.setMap(options.map);\n    }\n\n    _this.addChangeListener(LayerProperty.SOURCE, _this.handleSourcePropertyChange_);\n\n    var source = options.source ?\n    /** @type {SourceType} */\n    options.source : null;\n\n    _this.setSource(source);\n\n    return _this;\n  }\n  /**\n   * @param {Array<import(\"./Layer.js\").default>} [opt_array] Array of layers (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n   */\n\n\n  Layer.prototype.getLayersArray = function (opt_array) {\n    var array = opt_array ? opt_array : [];\n    array.push(this);\n    return array;\n  };\n  /**\n   * @param {Array<import(\"./Layer.js\").State>} [opt_states] Optional list of layer states (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n   */\n\n\n  Layer.prototype.getLayerStatesArray = function (opt_states) {\n    var states = opt_states ? opt_states : [];\n    states.push(this.getLayerState());\n    return states;\n  };\n  /**\n   * Get the layer source.\n   * @return {SourceType|null} The layer source (or `null` if not yet set).\n   * @observable\n   * @api\n   */\n\n\n  Layer.prototype.getSource = function () {\n    return (\n      /** @type {SourceType} */\n      this.get(LayerProperty.SOURCE) || null\n    );\n  };\n  /**\n   * @return {SourceType|null} The source being rendered.\n   */\n\n\n  Layer.prototype.getRenderSource = function () {\n    return this.getSource();\n  };\n  /**\n   * @return {import(\"../source/Source.js\").State} Source state.\n   */\n\n\n  Layer.prototype.getSourceState = function () {\n    var source = this.getSource();\n    return !source ? 'undefined' : source.getState();\n  };\n  /**\n   * @private\n   */\n\n\n  Layer.prototype.handleSourceChange_ = function () {\n    this.changed();\n  };\n  /**\n   * @private\n   */\n\n\n  Layer.prototype.handleSourcePropertyChange_ = function () {\n    if (this.sourceChangeKey_) {\n      unlistenByKey(this.sourceChangeKey_);\n      this.sourceChangeKey_ = null;\n    }\n\n    var source = this.getSource();\n\n    if (source) {\n      this.sourceChangeKey_ = listen(source, EventType.CHANGE, this.handleSourceChange_, this);\n    }\n\n    this.changed();\n  };\n  /**\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../Feature\").default>>} Promise that resolves with\n   * an array of features.\n   */\n\n\n  Layer.prototype.getFeatures = function (pixel) {\n    if (!this.renderer_) {\n      return new Promise(function (resolve) {\n        return resolve([]);\n      });\n    }\n\n    return this.renderer_.getFeatures(pixel);\n  };\n  /**\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   */\n\n\n  Layer.prototype.getData = function (pixel) {\n    if (!this.renderer_ || !this.rendered) {\n      return null;\n    }\n\n    return this.renderer_.getData(pixel);\n  };\n  /**\n   * In charge to manage the rendering of the layer. One layer type is\n   * bounded with one layer renderer.\n   * @param {?import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target which the renderer may (but need not) use\n   * for rendering its content.\n   * @return {HTMLElement} The rendered element.\n   */\n\n\n  Layer.prototype.render = function (frameState, target) {\n    var layerRenderer = this.getRenderer();\n\n    if (layerRenderer.prepareFrame(frameState)) {\n      this.rendered = true;\n      return layerRenderer.renderFrame(frameState, target);\n    }\n  };\n  /**\n   * Called when a layer is not visible during a map render.\n   */\n\n\n  Layer.prototype.unrender = function () {\n    this.rendered = false;\n  };\n  /**\n   * For use inside the library only.\n   * @param {import(\"../PluggableMap.js\").default|null} map Map.\n   */\n\n\n  Layer.prototype.setMapInternal = function (map) {\n    if (!map) {\n      this.unrender();\n    }\n\n    this.set(LayerProperty.MAP, map);\n  };\n  /**\n   * For use inside the library only.\n   * @return {import(\"../PluggableMap.js\").default|null} Map.\n   */\n\n\n  Layer.prototype.getMapInternal = function () {\n    return this.get(LayerProperty.MAP);\n  };\n  /**\n   * Sets the layer to be rendered on top of other layers on a map. The map will\n   * not manage this layer in its layers collection, and the callback in\n   * {@link module:ol/Map~Map#forEachLayerAtPixel} will receive `null` as layer. This\n   * is useful for temporary layers. To remove an unmanaged layer from the map,\n   * use `#setMap(null)`.\n   *\n   * To add the layer to a map and have it managed by the map, use\n   * {@link module:ol/Map~Map#addLayer} instead.\n   * @param {import(\"../PluggableMap.js\").default|null} map Map.\n   * @api\n   */\n\n\n  Layer.prototype.setMap = function (map) {\n    if (this.mapPrecomposeKey_) {\n      unlistenByKey(this.mapPrecomposeKey_);\n      this.mapPrecomposeKey_ = null;\n    }\n\n    if (!map) {\n      this.changed();\n    }\n\n    if (this.mapRenderKey_) {\n      unlistenByKey(this.mapRenderKey_);\n      this.mapRenderKey_ = null;\n    }\n\n    if (map) {\n      this.mapPrecomposeKey_ = listen(map, RenderEventType.PRECOMPOSE, function (evt) {\n        var renderEvent =\n        /** @type {import(\"../render/Event.js\").default} */\n        evt;\n        var layerStatesArray = renderEvent.frameState.layerStatesArray;\n        var layerState = this.getLayerState(false); // A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both.\n\n        assert(!layerStatesArray.some(function (arrayLayerState) {\n          return arrayLayerState.layer === layerState.layer;\n        }), 67);\n        layerStatesArray.push(layerState);\n      }, this);\n      this.mapRenderKey_ = listen(this, EventType.CHANGE, map.render, map);\n      this.changed();\n    }\n  };\n  /**\n   * Set the layer source.\n   * @param {SourceType|null} source The layer source.\n   * @observable\n   * @api\n   */\n\n\n  Layer.prototype.setSource = function (source) {\n    this.set(LayerProperty.SOURCE, source);\n  };\n  /**\n   * Get the renderer for this layer.\n   * @return {RendererType|null} The layer renderer.\n   */\n\n\n  Layer.prototype.getRenderer = function () {\n    if (!this.renderer_) {\n      this.renderer_ = this.createRenderer();\n    }\n\n    return this.renderer_;\n  };\n  /**\n   * @return {boolean} The layer has a renderer.\n   */\n\n\n  Layer.prototype.hasRenderer = function () {\n    return !!this.renderer_;\n  };\n  /**\n   * Create a renderer for this layer.\n   * @return {RendererType} A layer renderer.\n   * @protected\n   */\n\n\n  Layer.prototype.createRenderer = function () {\n    return null;\n  };\n  /**\n   * Clean up.\n   */\n\n\n  Layer.prototype.disposeInternal = function () {\n    if (this.renderer_) {\n      this.renderer_.dispose();\n      delete this.renderer_;\n    }\n\n    this.setSource(null);\n\n    _super.prototype.disposeInternal.call(this);\n  };\n\n  return Layer;\n}(BaseLayer);\n/**\n * Return `true` if the layer is visible and if the provided view state\n * has resolution and zoom levels that are in range of the layer's min/max.\n * @param {State} layerState Layer state.\n * @param {import(\"../View.js\").State} viewState View state.\n * @return {boolean} The layer is visible at the given view state.\n */\n\n\nexport function inView(layerState, viewState) {\n  if (!layerState.visible) {\n    return false;\n  }\n\n  var resolution = viewState.resolution;\n\n  if (resolution < layerState.minResolution || resolution >= layerState.maxResolution) {\n    return false;\n  }\n\n  var zoom = viewState.zoom;\n  return zoom > layerState.minZoom && zoom <= layerState.maxZoom;\n}\nexport default Layer;","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","BaseLayer","EventType","LayerProperty","RenderEventType","assert","assign","listen","unlistenByKey","Layer","_super","options","_this","baseOptions","source","on","once","un","mapPrecomposeKey_","mapRenderKey_","sourceChangeKey_","renderer_","rendered","render","map","setMap","addChangeListener","SOURCE","handleSourcePropertyChange_","setSource","getLayersArray","opt_array","array","push","getLayerStatesArray","opt_states","states","getLayerState","getSource","get","getRenderSource","getSourceState","getState","handleSourceChange_","changed","CHANGE","getFeatures","pixel","Promise","resolve","getData","frameState","target","layerRenderer","getRenderer","prepareFrame","renderFrame","unrender","setMapInternal","set","MAP","getMapInternal","PRECOMPOSE","evt","renderEvent","layerStatesArray","layerState","some","arrayLayerState","layer","createRenderer","hasRenderer","disposeInternal","dispose","inView","viewState","visible","resolution","minResolution","maxResolution","zoom","minZoom","maxZoom"],"sources":["/home/asura/github/smartcity/node_modules/ol/layer/Layer.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/layer/Layer\n */\nimport BaseLayer from './Base.js';\nimport EventType from '../events/EventType.js';\nimport LayerProperty from './Property.js';\nimport RenderEventType from '../render/EventType.js';\nimport { assert } from '../asserts.js';\nimport { assign } from '../obj.js';\nimport { listen, unlistenByKey } from '../events.js';\n/**\n * @typedef {function(import(\"../PluggableMap.js\").FrameState):HTMLElement} RenderFunction\n */\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\n *     'change:source', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|'change:source'|\n *     import(\"../render/EventType\").LayerRenderEventTypes, Return>} LayerOnSignature\n */\n/**\n * @template {import(\"../source/Source.js\").default} [SourceType=import(\"../source/Source.js\").default]\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {SourceType} [source] Source for this layer.  If not provided to the constructor,\n * the source can be set by calling {@link module:ol/layer/Layer~Layer#setSource layer.setSource(source)} after\n * construction.\n * @property {import(\"../PluggableMap.js\").default|null} [map] Map.\n * @property {RenderFunction} [render] Render function. Takes the frame state as input and is expected to return an\n * HTML element. Will overwrite the default rendering for the layer.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n/**\n * @typedef {Object} State\n * @property {import(\"./Layer.js\").default} layer Layer.\n * @property {number} opacity Opacity, the value is rounded to two digits to appear after the decimal point.\n * @property {boolean} visible Visible.\n * @property {boolean} managed Managed.\n * @property {import(\"../extent.js\").Extent} [extent] Extent.\n * @property {number} zIndex ZIndex.\n * @property {number} maxResolution Maximum resolution.\n * @property {number} minResolution Minimum resolution.\n * @property {number} minZoom Minimum zoom.\n * @property {number} maxZoom Maximum zoom.\n */\n/**\n * @classdesc\n * Base class from which all layer types are derived. This should only be instantiated\n * in the case where a custom layer is added to the map with a custom `render` function.\n * Such a function can be specified in the `options` object, and is expected to return an HTML element.\n *\n * A visual representation of raster or vector map data.\n * Layers group together those properties that pertain to how the data is to be\n * displayed, irrespective of the source of that data.\n *\n * Layers are usually added to a map with {@link import(\"../PluggableMap.js\").default#addLayer map.addLayer()}. Components\n * like {@link module:ol/interaction/Draw~Draw} use unmanaged layers\n * internally. These unmanaged layers are associated with the map using\n * {@link module:ol/layer/Layer~Layer#setMap} instead.\n *\n * A generic `change` event is fired when the state of the source changes.\n *\n * Please note that for performance reasons several layers might get rendered to\n * the same HTML element, which will cause {@link import(\"../PluggableMap.js\").default#forEachLayerAtPixel map.forEachLayerAtPixel()} to\n * give false positives. To avoid this, apply different `className` properties to the\n * layers at creation time.\n *\n * @fires import(\"../render/Event.js\").RenderEvent#prerender\n * @fires import(\"../render/Event.js\").RenderEvent#postrender\n *\n * @template {import(\"../source/Source.js\").default} [SourceType=import(\"../source/Source.js\").default]\n * @template {import(\"../renderer/Layer.js\").default} [RendererType=import(\"../renderer/Layer.js\").default]\n * @api\n */\nvar Layer = /** @class */ (function (_super) {\n    __extends(Layer, _super);\n    /**\n     * @param {Options<SourceType>} options Layer options.\n     */\n    function Layer(options) {\n        var _this = this;\n        var baseOptions = assign({}, options);\n        delete baseOptions.source;\n        _this = _super.call(this, baseOptions) || this;\n        /***\n         * @type {LayerOnSignature<import(\"../events\").EventsKey>}\n         */\n        _this.on;\n        /***\n         * @type {LayerOnSignature<import(\"../events\").EventsKey>}\n         */\n        _this.once;\n        /***\n         * @type {LayerOnSignature<void>}\n         */\n        _this.un;\n        /**\n         * @private\n         * @type {?import(\"../events.js\").EventsKey}\n         */\n        _this.mapPrecomposeKey_ = null;\n        /**\n         * @private\n         * @type {?import(\"../events.js\").EventsKey}\n         */\n        _this.mapRenderKey_ = null;\n        /**\n         * @private\n         * @type {?import(\"../events.js\").EventsKey}\n         */\n        _this.sourceChangeKey_ = null;\n        /**\n         * @private\n         * @type {RendererType}\n         */\n        _this.renderer_ = null;\n        /**\n         * @protected\n         * @type {boolean}\n         */\n        _this.rendered = false;\n        // Overwrite default render method with a custom one\n        if (options.render) {\n            _this.render = options.render;\n        }\n        if (options.map) {\n            _this.setMap(options.map);\n        }\n        _this.addChangeListener(LayerProperty.SOURCE, _this.handleSourcePropertyChange_);\n        var source = options.source\n            ? /** @type {SourceType} */ (options.source)\n            : null;\n        _this.setSource(source);\n        return _this;\n    }\n    /**\n     * @param {Array<import(\"./Layer.js\").default>} [opt_array] Array of layers (to be modified in place).\n     * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n     */\n    Layer.prototype.getLayersArray = function (opt_array) {\n        var array = opt_array ? opt_array : [];\n        array.push(this);\n        return array;\n    };\n    /**\n     * @param {Array<import(\"./Layer.js\").State>} [opt_states] Optional list of layer states (to be modified in place).\n     * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n     */\n    Layer.prototype.getLayerStatesArray = function (opt_states) {\n        var states = opt_states ? opt_states : [];\n        states.push(this.getLayerState());\n        return states;\n    };\n    /**\n     * Get the layer source.\n     * @return {SourceType|null} The layer source (or `null` if not yet set).\n     * @observable\n     * @api\n     */\n    Layer.prototype.getSource = function () {\n        return /** @type {SourceType} */ (this.get(LayerProperty.SOURCE)) || null;\n    };\n    /**\n     * @return {SourceType|null} The source being rendered.\n     */\n    Layer.prototype.getRenderSource = function () {\n        return this.getSource();\n    };\n    /**\n     * @return {import(\"../source/Source.js\").State} Source state.\n     */\n    Layer.prototype.getSourceState = function () {\n        var source = this.getSource();\n        return !source ? 'undefined' : source.getState();\n    };\n    /**\n     * @private\n     */\n    Layer.prototype.handleSourceChange_ = function () {\n        this.changed();\n    };\n    /**\n     * @private\n     */\n    Layer.prototype.handleSourcePropertyChange_ = function () {\n        if (this.sourceChangeKey_) {\n            unlistenByKey(this.sourceChangeKey_);\n            this.sourceChangeKey_ = null;\n        }\n        var source = this.getSource();\n        if (source) {\n            this.sourceChangeKey_ = listen(source, EventType.CHANGE, this.handleSourceChange_, this);\n        }\n        this.changed();\n    };\n    /**\n     * @param {import(\"../pixel\").Pixel} pixel Pixel.\n     * @return {Promise<Array<import(\"../Feature\").default>>} Promise that resolves with\n     * an array of features.\n     */\n    Layer.prototype.getFeatures = function (pixel) {\n        if (!this.renderer_) {\n            return new Promise(function (resolve) { return resolve([]); });\n        }\n        return this.renderer_.getFeatures(pixel);\n    };\n    /**\n     * @param {import(\"../pixel\").Pixel} pixel Pixel.\n     * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n     */\n    Layer.prototype.getData = function (pixel) {\n        if (!this.renderer_ || !this.rendered) {\n            return null;\n        }\n        return this.renderer_.getData(pixel);\n    };\n    /**\n     * In charge to manage the rendering of the layer. One layer type is\n     * bounded with one layer renderer.\n     * @param {?import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {HTMLElement} target Target which the renderer may (but need not) use\n     * for rendering its content.\n     * @return {HTMLElement} The rendered element.\n     */\n    Layer.prototype.render = function (frameState, target) {\n        var layerRenderer = this.getRenderer();\n        if (layerRenderer.prepareFrame(frameState)) {\n            this.rendered = true;\n            return layerRenderer.renderFrame(frameState, target);\n        }\n    };\n    /**\n     * Called when a layer is not visible during a map render.\n     */\n    Layer.prototype.unrender = function () {\n        this.rendered = false;\n    };\n    /**\n     * For use inside the library only.\n     * @param {import(\"../PluggableMap.js\").default|null} map Map.\n     */\n    Layer.prototype.setMapInternal = function (map) {\n        if (!map) {\n            this.unrender();\n        }\n        this.set(LayerProperty.MAP, map);\n    };\n    /**\n     * For use inside the library only.\n     * @return {import(\"../PluggableMap.js\").default|null} Map.\n     */\n    Layer.prototype.getMapInternal = function () {\n        return this.get(LayerProperty.MAP);\n    };\n    /**\n     * Sets the layer to be rendered on top of other layers on a map. The map will\n     * not manage this layer in its layers collection, and the callback in\n     * {@link module:ol/Map~Map#forEachLayerAtPixel} will receive `null` as layer. This\n     * is useful for temporary layers. To remove an unmanaged layer from the map,\n     * use `#setMap(null)`.\n     *\n     * To add the layer to a map and have it managed by the map, use\n     * {@link module:ol/Map~Map#addLayer} instead.\n     * @param {import(\"../PluggableMap.js\").default|null} map Map.\n     * @api\n     */\n    Layer.prototype.setMap = function (map) {\n        if (this.mapPrecomposeKey_) {\n            unlistenByKey(this.mapPrecomposeKey_);\n            this.mapPrecomposeKey_ = null;\n        }\n        if (!map) {\n            this.changed();\n        }\n        if (this.mapRenderKey_) {\n            unlistenByKey(this.mapRenderKey_);\n            this.mapRenderKey_ = null;\n        }\n        if (map) {\n            this.mapPrecomposeKey_ = listen(map, RenderEventType.PRECOMPOSE, function (evt) {\n                var renderEvent = \n                /** @type {import(\"../render/Event.js\").default} */ (evt);\n                var layerStatesArray = renderEvent.frameState.layerStatesArray;\n                var layerState = this.getLayerState(false);\n                // A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both.\n                assert(!layerStatesArray.some(function (arrayLayerState) {\n                    return arrayLayerState.layer === layerState.layer;\n                }), 67);\n                layerStatesArray.push(layerState);\n            }, this);\n            this.mapRenderKey_ = listen(this, EventType.CHANGE, map.render, map);\n            this.changed();\n        }\n    };\n    /**\n     * Set the layer source.\n     * @param {SourceType|null} source The layer source.\n     * @observable\n     * @api\n     */\n    Layer.prototype.setSource = function (source) {\n        this.set(LayerProperty.SOURCE, source);\n    };\n    /**\n     * Get the renderer for this layer.\n     * @return {RendererType|null} The layer renderer.\n     */\n    Layer.prototype.getRenderer = function () {\n        if (!this.renderer_) {\n            this.renderer_ = this.createRenderer();\n        }\n        return this.renderer_;\n    };\n    /**\n     * @return {boolean} The layer has a renderer.\n     */\n    Layer.prototype.hasRenderer = function () {\n        return !!this.renderer_;\n    };\n    /**\n     * Create a renderer for this layer.\n     * @return {RendererType} A layer renderer.\n     * @protected\n     */\n    Layer.prototype.createRenderer = function () {\n        return null;\n    };\n    /**\n     * Clean up.\n     */\n    Layer.prototype.disposeInternal = function () {\n        if (this.renderer_) {\n            this.renderer_.dispose();\n            delete this.renderer_;\n        }\n        this.setSource(null);\n        _super.prototype.disposeInternal.call(this);\n    };\n    return Layer;\n}(BaseLayer));\n/**\n * Return `true` if the layer is visible and if the provided view state\n * has resolution and zoom levels that are in range of the layer's min/max.\n * @param {State} layerState Layer state.\n * @param {import(\"../View.js\").State} viewState View state.\n * @return {boolean} The layer is visible at the given view state.\n */\nexport function inView(layerState, viewState) {\n    if (!layerState.visible) {\n        return false;\n    }\n    var resolution = viewState.resolution;\n    if (resolution < layerState.minResolution ||\n        resolution >= layerState.maxResolution) {\n        return false;\n    }\n    var zoom = viewState.zoom;\n    return zoom > layerState.minZoom && zoom <= layerState.maxZoom;\n}\nexport default Layer;\n"],"mappings":"AAAA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA6B,YAAY;EACrD,IAAIC,aAAa,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;IAChCF,aAAa,GAAGG,MAAM,CAACC,cAAP,IACX;MAAEC,SAAS,EAAE;IAAb,aAA6BC,KAA7B,IAAsC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;MAAED,CAAC,CAACI,SAAF,GAAcH,CAAd;IAAkB,CAD/D,IAEZ,UAAUD,CAAV,EAAaC,CAAb,EAAgB;MAAE,KAAK,IAAIK,CAAT,IAAcL,CAAd,EAAiB,IAAIC,MAAM,CAACK,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EAAgDN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;IAAc,CAFrG;;IAGA,OAAOP,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAApB;EACH,CALD;;EAMA,OAAO,UAAUD,CAAV,EAAaC,CAAb,EAAgB;IACnB,IAAI,OAAOA,CAAP,KAAa,UAAb,IAA2BA,CAAC,KAAK,IAArC,EACI,MAAM,IAAIS,SAAJ,CAAc,yBAAyBC,MAAM,CAACV,CAAD,CAA/B,GAAqC,+BAAnD,CAAN;IACJF,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAAb;;IACA,SAASW,EAAT,GAAc;MAAE,KAAKC,WAAL,GAAmBb,CAAnB;IAAuB;;IACvCA,CAAC,CAACO,SAAF,GAAcN,CAAC,KAAK,IAAN,GAAaC,MAAM,CAACY,MAAP,CAAcb,CAAd,CAAb,IAAiCW,EAAE,CAACL,SAAH,GAAeN,CAAC,CAACM,SAAjB,EAA4B,IAAIK,EAAJ,EAA7D,CAAd;EACH,CAND;AAOH,CAd2C,EAA5C;AAeA;AACA;AACA;;;AACA,OAAOG,SAAP,MAAsB,WAAtB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,aAAP,MAA0B,eAA1B;AACA,OAAOC,eAAP,MAA4B,wBAA5B;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,MAAT,EAAiBC,aAAjB,QAAsC,cAAtC;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,KAAK;AAAG;AAAe,UAAUC,MAAV,EAAkB;EACzC1B,SAAS,CAACyB,KAAD,EAAQC,MAAR,CAAT;EACA;AACJ;AACA;;;EACI,SAASD,KAAT,CAAeE,OAAf,EAAwB;IACpB,IAAIC,KAAK,GAAG,IAAZ;;IACA,IAAIC,WAAW,GAAGP,MAAM,CAAC,EAAD,EAAKK,OAAL,CAAxB;IACA,OAAOE,WAAW,CAACC,MAAnB;IACAF,KAAK,GAAGF,MAAM,CAACf,IAAP,CAAY,IAAZ,EAAkBkB,WAAlB,KAAkC,IAA1C;IACA;AACR;AACA;;IACQD,KAAK,CAACG,EAAN;IACA;AACR;AACA;;IACQH,KAAK,CAACI,IAAN;IACA;AACR;AACA;;IACQJ,KAAK,CAACK,EAAN;IACA;AACR;AACA;AACA;;IACQL,KAAK,CAACM,iBAAN,GAA0B,IAA1B;IACA;AACR;AACA;AACA;;IACQN,KAAK,CAACO,aAAN,GAAsB,IAAtB;IACA;AACR;AACA;AACA;;IACQP,KAAK,CAACQ,gBAAN,GAAyB,IAAzB;IACA;AACR;AACA;AACA;;IACQR,KAAK,CAACS,SAAN,GAAkB,IAAlB;IACA;AACR;AACA;AACA;;IACQT,KAAK,CAACU,QAAN,GAAiB,KAAjB,CAzCoB,CA0CpB;;IACA,IAAIX,OAAO,CAACY,MAAZ,EAAoB;MAChBX,KAAK,CAACW,MAAN,GAAeZ,OAAO,CAA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"},"metadata":{},"sourceType":"module"}