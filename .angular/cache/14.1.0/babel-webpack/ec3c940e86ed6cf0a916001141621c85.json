{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/geom/MultiPolygon\n */\n\n\nimport GeometryLayout from './GeometryLayout.js';\nimport MultiPoint from './MultiPoint.js';\nimport Polygon from './Polygon.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { assignClosestMultiArrayPoint, multiArrayMaxSquaredDelta } from './flat/closest.js';\nimport { closestSquaredDistanceXY } from '../extent.js';\nimport { deflateMultiCoordinatesArray } from './flat/deflate.js';\nimport { extend } from '../array.js';\nimport { getInteriorPointsOfMultiArray } from './flat/interiorpoint.js';\nimport { inflateMultiCoordinatesArray } from './flat/inflate.js';\nimport { intersectsLinearRingMultiArray } from './flat/intersectsextent.js';\nimport { linearRingssAreOriented, orientLinearRingsArray } from './flat/orient.js';\nimport { linearRingss as linearRingssArea } from './flat/area.js';\nimport { linearRingss as linearRingssCenter } from './flat/center.js';\nimport { linearRingssContainsXY } from './flat/contains.js';\nimport { quantizeMultiArray } from './flat/simplify.js';\n/**\n * @classdesc\n * Multi-polygon geometry.\n *\n * @api\n */\n\nvar MultiPolygon =\n/** @class */\nfunction (_super) {\n  __extends(MultiPolygon, _super);\n  /**\n   * @param {Array<Array<Array<import(\"../coordinate.js\").Coordinate>>|Polygon>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `opt_layout` and `opt_endss` are also accepted.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   * @param {Array<Array<number>>} [opt_endss] Array of ends for internal use with flat coordinates.\n   */\n\n\n  function MultiPolygon(coordinates, opt_layout, opt_endss) {\n    var _this = _super.call(this) || this;\n    /**\n     * @type {Array<Array<number>>}\n     * @private\n     */\n\n\n    _this.endss_ = [];\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.flatInteriorPointsRevision_ = -1;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    _this.flatInteriorPoints_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.maxDelta_ = -1;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.maxDeltaRevision_ = -1;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.orientedRevision_ = -1;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    _this.orientedFlatCoordinates_ = null;\n\n    if (!opt_endss && !Array.isArray(coordinates[0])) {\n      var layout = _this.getLayout();\n\n      var polygons =\n      /** @type {Array<Polygon>} */\n      coordinates;\n      var flatCoordinates = [];\n      var endss = [];\n\n      for (var i = 0, ii = polygons.length; i < ii; ++i) {\n        var polygon = polygons[i];\n\n        if (i === 0) {\n          layout = polygon.getLayout();\n        }\n\n        var offset = flatCoordinates.length;\n        var ends = polygon.getEnds();\n\n        for (var j = 0, jj = ends.length; j < jj; ++j) {\n          ends[j] += offset;\n        }\n\n        extend(flatCoordinates, polygon.getFlatCoordinates());\n        endss.push(ends);\n      }\n\n      opt_layout = layout;\n      coordinates = flatCoordinates;\n      opt_endss = endss;\n    }\n\n    if (opt_layout !== undefined && opt_endss) {\n      _this.setFlatCoordinates(opt_layout,\n      /** @type {Array<number>} */\n      coordinates);\n\n      _this.endss_ = opt_endss;\n    } else {\n      _this.setCoordinates(\n      /** @type {Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>} */\n      coordinates, opt_layout);\n    }\n\n    return _this;\n  }\n  /**\n   * Append the passed polygon to this multipolygon.\n   * @param {Polygon} polygon Polygon.\n   * @api\n   */\n\n\n  MultiPolygon.prototype.appendPolygon = function (polygon) {\n    /** @type {Array<number>} */\n    var ends;\n\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = polygon.getFlatCoordinates().slice();\n      ends = polygon.getEnds().slice();\n      this.endss_.push();\n    } else {\n      var offset = this.flatCoordinates.length;\n      extend(this.flatCoordinates, polygon.getFlatCoordinates());\n      ends = polygon.getEnds().slice();\n\n      for (var i = 0, ii = ends.length; i < ii; ++i) {\n        ends[i] += offset;\n      }\n    }\n\n    this.endss_.push(ends);\n    this.changed();\n  };\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!MultiPolygon} Clone.\n   * @api\n   */\n\n\n  MultiPolygon.prototype.clone = function () {\n    var len = this.endss_.length;\n    var newEndss = new Array(len);\n\n    for (var i = 0; i < len; ++i) {\n      newEndss[i] = this.endss_[i].slice();\n    }\n\n    var multiPolygon = new MultiPolygon(this.flatCoordinates.slice(), this.layout, newEndss);\n    multiPolygon.applyProperties(this);\n    return multiPolygon;\n  };\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n\n\n  MultiPolygon.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(multiArrayMaxSquaredDelta(this.flatCoordinates, 0, this.endss_, this.stride, 0));\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n\n    return assignClosestMultiArrayPoint(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\n  };\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n\n\n  MultiPolygon.prototype.containsXY = function (x, y) {\n    return linearRingssContainsXY(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, x, y);\n  };\n  /**\n   * Return the area of the multipolygon on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n\n\n  MultiPolygon.prototype.getArea = function () {\n    return linearRingssArea(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride);\n  };\n  /**\n   * Get the coordinate array for this geometry.  This array has the structure\n   * of a GeoJSON coordinate array for multi-polygons.\n   *\n   * @param {boolean} [opt_right] Orient coordinates according to the right-hand\n   *     rule (counter-clockwise for exterior and clockwise for interior rings).\n   *     If `false`, coordinates will be oriented according to the left-hand rule\n   *     (clockwise for exterior and counter-clockwise for interior rings).\n   *     By default, coordinate orientation will depend on how the geometry was\n   *     constructed.\n   * @return {Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>} Coordinates.\n   * @api\n   */\n\n\n  MultiPolygon.prototype.getCoordinates = function (opt_right) {\n    var flatCoordinates;\n\n    if (opt_right !== undefined) {\n      flatCoordinates = this.getOrientedFlatCoordinates().slice();\n      orientLinearRingsArray(flatCoordinates, 0, this.endss_, this.stride, opt_right);\n    } else {\n      flatCoordinates = this.flatCoordinates;\n    }\n\n    return inflateMultiCoordinatesArray(flatCoordinates, 0, this.endss_, this.stride);\n  };\n  /**\n   * @return {Array<Array<number>>} Endss.\n   */\n\n\n  MultiPolygon.prototype.getEndss = function () {\n    return this.endss_;\n  };\n  /**\n   * @return {Array<number>} Flat interior points.\n   */\n\n\n  MultiPolygon.prototype.getFlatInteriorPoints = function () {\n    if (this.flatInteriorPointsRevision_ != this.getRevision()) {\n      var flatCenters = linearRingssCenter(this.flatCoordinates, 0, this.endss_, this.stride);\n      this.flatInteriorPoints_ = getInteriorPointsOfMultiArray(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, flatCenters);\n      this.flatInteriorPointsRevision_ = this.getRevision();\n    }\n\n    return this.flatInteriorPoints_;\n  };\n  /**\n   * Return the interior points as {@link module:ol/geom/MultiPoint~MultiPoint multipoint}.\n   * @return {MultiPoint} Interior points as XYM coordinates, where M is\n   * the length of the horizontal intersection that the point belongs to.\n   * @api\n   */\n\n\n  MultiPolygon.prototype.getInteriorPoints = function () {\n    return new MultiPoint(this.getFlatInteriorPoints().slice(), GeometryLayout.XYM);\n  };\n  /**\n   * @return {Array<number>} Oriented flat coordinates.\n   */\n\n\n  MultiPolygon.prototype.getOrientedFlatCoordinates = function () {\n    if (this.orientedRevision_ != this.getRevision()) {\n      var flatCoordinates = this.flatCoordinates;\n\n      if (linearRingssAreOriented(flatCoordinates, 0, this.endss_, this.stride)) {\n        this.orientedFlatCoordinates_ = flatCoordinates;\n      } else {\n        this.orientedFlatCoordinates_ = flatCoordinates.slice();\n        this.orientedFlatCoordinates_.length = orientLinearRingsArray(this.orientedFlatCoordinates_, 0, this.endss_, this.stride);\n      }\n\n      this.orientedRevision_ = this.getRevision();\n    }\n\n    return this.orientedFlatCoordinates_;\n  };\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {MultiPolygon} Simplified MultiPolygon.\n   * @protected\n   */\n\n\n  MultiPolygon.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {\n    var simplifiedFlatCoordinates = [];\n    var simplifiedEndss = [];\n    simplifiedFlatCoordinates.length = quantizeMultiArray(this.flatCoordinates, 0, this.endss_, this.stride, Math.sqrt(squaredTolerance), simplifiedFlatCoordinates, 0, simplifiedEndss);\n    return new MultiPolygon(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEndss);\n  };\n  /**\n   * Return the polygon at the specified index.\n   * @param {number} index Index.\n   * @return {Polygon} Polygon.\n   * @api\n   */\n\n\n  MultiPolygon.prototype.getPolygon = function (index) {\n    if (index < 0 || this.endss_.length <= index) {\n      return null;\n    }\n\n    var offset;\n\n    if (index === 0) {\n      offset = 0;\n    } else {\n      var prevEnds = this.endss_[index - 1];\n      offset = prevEnds[prevEnds.length - 1];\n    }\n\n    var ends = this.endss_[index].slice();\n    var end = ends[ends.length - 1];\n\n    if (offset !== 0) {\n      for (var i = 0, ii = ends.length; i < ii; ++i) {\n        ends[i] -= offset;\n      }\n    }\n\n    return new Polygon(this.flatCoordinates.slice(offset, end), this.layout, ends);\n  };\n  /**\n   * Return the polygons of this multipolygon.\n   * @return {Array<Polygon>} Polygons.\n   * @api\n   */\n\n\n  MultiPolygon.prototype.getPolygons = function () {\n    var layout = this.layout;\n    var flatCoordinates = this.flatCoordinates;\n    var endss = this.endss_;\n    var polygons = [];\n    var offset = 0;\n\n    for (var i = 0, ii = endss.length; i < ii; ++i) {\n      var ends = endss[i].slice();\n      var end = ends[ends.length - 1];\n\n      if (offset !== 0) {\n        for (var j = 0, jj = ends.length; j < jj; ++j) {\n          ends[j] -= offset;\n        }\n      }\n\n      var polygon = new Polygon(flatCoordinates.slice(offset, end), layout, ends);\n      polygons.push(polygon);\n      offset = end;\n    }\n\n    return polygons;\n  };\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n\n\n  MultiPolygon.prototype.getType = function () {\n    return 'MultiPolygon';\n  };\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n\n\n  MultiPolygon.prototype.intersectsExtent = function (extent) {\n    return intersectsLinearRingMultiArray(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, extent);\n  };\n  /**\n   * Set the coordinates of the multipolygon.\n   * @param {!Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>} coordinates Coordinates.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   * @api\n   */\n\n\n  MultiPolygon.prototype.setCoordinates = function (coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 3);\n\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n\n    var endss = deflateMultiCoordinatesArray(this.flatCoordinates, 0, coordinates, this.stride, this.endss_);\n\n    if (endss.length === 0) {\n      this.flatCoordinates.length = 0;\n    } else {\n      var lastEnds = endss[endss.length - 1];\n      this.flatCoordinates.length = lastEnds.length === 0 ? 0 : lastEnds[lastEnds.length - 1];\n    }\n\n    this.changed();\n  };\n\n  return MultiPolygon;\n}(SimpleGeometry);\n\nexport default MultiPolygon;","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","GeometryLayout","MultiPoint","Polygon","SimpleGeometry","assignClosestMultiArrayPoint","multiArrayMaxSquaredDelta","closestSquaredDistanceXY","deflateMultiCoordinatesArray","extend","getInteriorPointsOfMultiArray","inflateMultiCoordinatesArray","intersectsLinearRingMultiArray","linearRingssAreOriented","orientLinearRingsArray","linearRingss","linearRingssArea","linearRingssCenter","linearRingssContainsXY","quantizeMultiArray","MultiPolygon","_super","coordinates","opt_layout","opt_endss","_this","endss_","flatInteriorPointsRevision_","flatInteriorPoints_","maxDelta_","maxDeltaRevision_","orientedRevision_","orientedFlatCoordinates_","isArray","layout","getLayout","polygons","flatCoordinates","endss","i","ii","length","polygon","offset","ends","getEnds","j","jj","getFlatCoordinates","push","undefined","setFlatCoordinates","setCoordinates","appendPolygon","slice","changed","clone","len","newEndss","multiPolygon","applyProperties","closestPointXY","x","y","closestPoint","minSquaredDistance","getExtent","getRevision","Math","sqrt","stride","getOrientedFlatCoordinates","containsXY","getArea","getCoordinates","opt_right","getEndss","getFlatInteriorPoints","flatCenters","getInteriorPoints","XYM","getSimplifiedGeometryInternal","squaredTolerance","simplifiedFlatCoordinates","simplifiedEndss","XY","getPolygon","index","prevEnds","end","getPolygons","getType","intersectsExtent","extent","setLayout","lastEnds"],"sources":["/home/asura/github/smartcity/node_modules/ol/geom/MultiPolygon.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/geom/MultiPolygon\n */\nimport GeometryLayout from './GeometryLayout.js';\nimport MultiPoint from './MultiPoint.js';\nimport Polygon from './Polygon.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { assignClosestMultiArrayPoint, multiArrayMaxSquaredDelta, } from './flat/closest.js';\nimport { closestSquaredDistanceXY } from '../extent.js';\nimport { deflateMultiCoordinatesArray } from './flat/deflate.js';\nimport { extend } from '../array.js';\nimport { getInteriorPointsOfMultiArray } from './flat/interiorpoint.js';\nimport { inflateMultiCoordinatesArray } from './flat/inflate.js';\nimport { intersectsLinearRingMultiArray } from './flat/intersectsextent.js';\nimport { linearRingssAreOriented, orientLinearRingsArray, } from './flat/orient.js';\nimport { linearRingss as linearRingssArea } from './flat/area.js';\nimport { linearRingss as linearRingssCenter } from './flat/center.js';\nimport { linearRingssContainsXY } from './flat/contains.js';\nimport { quantizeMultiArray } from './flat/simplify.js';\n/**\n * @classdesc\n * Multi-polygon geometry.\n *\n * @api\n */\nvar MultiPolygon = /** @class */ (function (_super) {\n    __extends(MultiPolygon, _super);\n    /**\n     * @param {Array<Array<Array<import(\"../coordinate.js\").Coordinate>>|Polygon>|Array<number>} coordinates Coordinates.\n     *     For internal use, flat coordinates in combination with `opt_layout` and `opt_endss` are also accepted.\n     * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n     * @param {Array<Array<number>>} [opt_endss] Array of ends for internal use with flat coordinates.\n     */\n    function MultiPolygon(coordinates, opt_layout, opt_endss) {\n        var _this = _super.call(this) || this;\n        /**\n         * @type {Array<Array<number>>}\n         * @private\n         */\n        _this.endss_ = [];\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.flatInteriorPointsRevision_ = -1;\n        /**\n         * @private\n         * @type {Array<number>}\n         */\n        _this.flatInteriorPoints_ = null;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.maxDelta_ = -1;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.maxDeltaRevision_ = -1;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.orientedRevision_ = -1;\n        /**\n         * @private\n         * @type {Array<number>}\n         */\n        _this.orientedFlatCoordinates_ = null;\n        if (!opt_endss && !Array.isArray(coordinates[0])) {\n            var layout = _this.getLayout();\n            var polygons = /** @type {Array<Polygon>} */ (coordinates);\n            var flatCoordinates = [];\n            var endss = [];\n            for (var i = 0, ii = polygons.length; i < ii; ++i) {\n                var polygon = polygons[i];\n                if (i === 0) {\n                    layout = polygon.getLayout();\n                }\n                var offset = flatCoordinates.length;\n                var ends = polygon.getEnds();\n                for (var j = 0, jj = ends.length; j < jj; ++j) {\n                    ends[j] += offset;\n                }\n                extend(flatCoordinates, polygon.getFlatCoordinates());\n                endss.push(ends);\n            }\n            opt_layout = layout;\n            coordinates = flatCoordinates;\n            opt_endss = endss;\n        }\n        if (opt_layout !== undefined && opt_endss) {\n            _this.setFlatCoordinates(opt_layout, \n            /** @type {Array<number>} */ (coordinates));\n            _this.endss_ = opt_endss;\n        }\n        else {\n            _this.setCoordinates(\n            /** @type {Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>} */ (coordinates), opt_layout);\n        }\n        return _this;\n    }\n    /**\n     * Append the passed polygon to this multipolygon.\n     * @param {Polygon} polygon Polygon.\n     * @api\n     */\n    MultiPolygon.prototype.appendPolygon = function (polygon) {\n        /** @type {Array<number>} */\n        var ends;\n        if (!this.flatCoordinates) {\n            this.flatCoordinates = polygon.getFlatCoordinates().slice();\n            ends = polygon.getEnds().slice();\n            this.endss_.push();\n        }\n        else {\n            var offset = this.flatCoordinates.length;\n            extend(this.flatCoordinates, polygon.getFlatCoordinates());\n            ends = polygon.getEnds().slice();\n            for (var i = 0, ii = ends.length; i < ii; ++i) {\n                ends[i] += offset;\n            }\n        }\n        this.endss_.push(ends);\n        this.changed();\n    };\n    /**\n     * Make a complete copy of the geometry.\n     * @return {!MultiPolygon} Clone.\n     * @api\n     */\n    MultiPolygon.prototype.clone = function () {\n        var len = this.endss_.length;\n        var newEndss = new Array(len);\n        for (var i = 0; i < len; ++i) {\n            newEndss[i] = this.endss_[i].slice();\n        }\n        var multiPolygon = new MultiPolygon(this.flatCoordinates.slice(), this.layout, newEndss);\n        multiPolygon.applyProperties(this);\n        return multiPolygon;\n    };\n    /**\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n     * @param {number} minSquaredDistance Minimum squared distance.\n     * @return {number} Minimum squared distance.\n     */\n    MultiPolygon.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n        if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n            return minSquaredDistance;\n        }\n        if (this.maxDeltaRevision_ != this.getRevision()) {\n            this.maxDelta_ = Math.sqrt(multiArrayMaxSquaredDelta(this.flatCoordinates, 0, this.endss_, this.stride, 0));\n            this.maxDeltaRevision_ = this.getRevision();\n        }\n        return assignClosestMultiArrayPoint(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\n    };\n    /**\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @return {boolean} Contains (x, y).\n     */\n    MultiPolygon.prototype.containsXY = function (x, y) {\n        return linearRingssContainsXY(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, x, y);\n    };\n    /**\n     * Return the area of the multipolygon on projected plane.\n     * @return {number} Area (on projected plane).\n     * @api\n     */\n    MultiPolygon.prototype.getArea = function () {\n        return linearRingssArea(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride);\n    };\n    /**\n     * Get the coordinate array for this geometry.  This array has the structure\n     * of a GeoJSON coordinate array for multi-polygons.\n     *\n     * @param {boolean} [opt_right] Orient coordinates according to the right-hand\n     *     rule (counter-clockwise for exterior and clockwise for interior rings).\n     *     If `false`, coordinates will be oriented according to the left-hand rule\n     *     (clockwise for exterior and counter-clockwise for interior rings).\n     *     By default, coordinate orientation will depend on how the geometry was\n     *     constructed.\n     * @return {Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>} Coordinates.\n     * @api\n     */\n    MultiPolygon.prototype.getCoordinates = function (opt_right) {\n        var flatCoordinates;\n        if (opt_right !== undefined) {\n            flatCoordinates = this.getOrientedFlatCoordinates().slice();\n            orientLinearRingsArray(flatCoordinates, 0, this.endss_, this.stride, opt_right);\n        }\n        else {\n            flatCoordinates = this.flatCoordinates;\n        }\n        return inflateMultiCoordinatesArray(flatCoordinates, 0, this.endss_, this.stride);\n    };\n    /**\n     * @return {Array<Array<number>>} Endss.\n     */\n    MultiPolygon.prototype.getEndss = function () {\n        return this.endss_;\n    };\n    /**\n     * @return {Array<number>} Flat interior points.\n     */\n    MultiPolygon.prototype.getFlatInteriorPoints = function () {\n        if (this.flatInteriorPointsRevision_ != this.getRevision()) {\n            var flatCenters = linearRingssCenter(this.flatCoordinates, 0, this.endss_, this.stride);\n            this.flatInteriorPoints_ = getInteriorPointsOfMultiArray(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, flatCenters);\n            this.flatInteriorPointsRevision_ = this.getRevision();\n        }\n        return this.flatInteriorPoints_;\n    };\n    /**\n     * Return the interior points as {@link module:ol/geom/MultiPoint~MultiPoint multipoint}.\n     * @return {MultiPoint} Interior points as XYM coordinates, where M is\n     * the length of the horizontal intersection that the point belongs to.\n     * @api\n     */\n    MultiPolygon.prototype.getInteriorPoints = function () {\n        return new MultiPoint(this.getFlatInteriorPoints().slice(), GeometryLayout.XYM);\n    };\n    /**\n     * @return {Array<number>} Oriented flat coordinates.\n     */\n    MultiPolygon.prototype.getOrientedFlatCoordinates = function () {\n        if (this.orientedRevision_ != this.getRevision()) {\n            var flatCoordinates = this.flatCoordinates;\n            if (linearRingssAreOriented(flatCoordinates, 0, this.endss_, this.stride)) {\n                this.orientedFlatCoordinates_ = flatCoordinates;\n            }\n            else {\n                this.orientedFlatCoordinates_ = flatCoordinates.slice();\n                this.orientedFlatCoordinates_.length = orientLinearRingsArray(this.orientedFlatCoordinates_, 0, this.endss_, this.stride);\n            }\n            this.orientedRevision_ = this.getRevision();\n        }\n        return this.orientedFlatCoordinates_;\n    };\n    /**\n     * @param {number} squaredTolerance Squared tolerance.\n     * @return {MultiPolygon} Simplified MultiPolygon.\n     * @protected\n     */\n    MultiPolygon.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {\n        var simplifiedFlatCoordinates = [];\n        var simplifiedEndss = [];\n        simplifiedFlatCoordinates.length = quantizeMultiArray(this.flatCoordinates, 0, this.endss_, this.stride, Math.sqrt(squaredTolerance), simplifiedFlatCoordinates, 0, simplifiedEndss);\n        return new MultiPolygon(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEndss);\n    };\n    /**\n     * Return the polygon at the specified index.\n     * @param {number} index Index.\n     * @return {Polygon} Polygon.\n     * @api\n     */\n    MultiPolygon.prototype.getPolygon = function (index) {\n        if (index < 0 || this.endss_.length <= index) {\n            return null;\n        }\n        var offset;\n        if (index === 0) {\n            offset = 0;\n        }\n        else {\n            var prevEnds = this.endss_[index - 1];\n            offset = prevEnds[prevEnds.length - 1];\n        }\n        var ends = this.endss_[index].slice();\n        var end = ends[ends.length - 1];\n        if (offset !== 0) {\n            for (var i = 0, ii = ends.length; i < ii; ++i) {\n                ends[i] -= offset;\n            }\n        }\n        return new Polygon(this.flatCoordinates.slice(offset, end), this.layout, ends);\n    };\n    /**\n     * Return the polygons of this multipolygon.\n     * @return {Array<Polygon>} Polygons.\n     * @api\n     */\n    MultiPolygon.prototype.getPolygons = function () {\n        var layout = this.layout;\n        var flatCoordinates = this.flatCoordinates;\n        var endss = this.endss_;\n        var polygons = [];\n        var offset = 0;\n        for (var i = 0, ii = endss.length; i < ii; ++i) {\n            var ends = endss[i].slice();\n            var end = ends[ends.length - 1];\n            if (offset !== 0) {\n                for (var j = 0, jj = ends.length; j < jj; ++j) {\n                    ends[j] -= offset;\n                }\n            }\n            var polygon = new Polygon(flatCoordinates.slice(offset, end), layout, ends);\n            polygons.push(polygon);\n            offset = end;\n        }\n        return polygons;\n    };\n    /**\n     * Get the type of this geometry.\n     * @return {import(\"./Geometry.js\").Type} Geometry type.\n     * @api\n     */\n    MultiPolygon.prototype.getType = function () {\n        return 'MultiPolygon';\n    };\n    /**\n     * Test if the geometry and the passed extent intersect.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @return {boolean} `true` if the geometry and the extent intersect.\n     * @api\n     */\n    MultiPolygon.prototype.intersectsExtent = function (extent) {\n        return intersectsLinearRingMultiArray(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, extent);\n    };\n    /**\n     * Set the coordinates of the multipolygon.\n     * @param {!Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>} coordinates Coordinates.\n     * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n     * @api\n     */\n    MultiPolygon.prototype.setCoordinates = function (coordinates, opt_layout) {\n        this.setLayout(opt_layout, coordinates, 3);\n        if (!this.flatCoordinates) {\n            this.flatCoordinates = [];\n        }\n        var endss = deflateMultiCoordinatesArray(this.flatCoordinates, 0, coordinates, this.stride, this.endss_);\n        if (endss.length === 0) {\n            this.flatCoordinates.length = 0;\n        }\n        else {\n            var lastEnds = endss[endss.length - 1];\n            this.flatCoordinates.length =\n                lastEnds.length === 0 ? 0 : lastEnds[lastEnds.length - 1];\n        }\n        this.changed();\n    };\n    return MultiPolygon;\n}(SimpleGeometry));\nexport default MultiPolygon;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}