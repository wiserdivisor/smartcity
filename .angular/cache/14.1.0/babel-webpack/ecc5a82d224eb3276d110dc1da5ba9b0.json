{"ast":null,"code":"/**\n * @module ol/style/Text\n */\nimport Fill from './Fill.js';\nimport TextPlacement from './TextPlacement.js';\nimport { toSize } from '../size.js';\n/**\n * The default fill color to use if no fill was set at construction time; a\n * blackish `#333`.\n *\n * @const {string}\n */\n\nvar DEFAULT_FILL_COLOR = '#333';\n/**\n * @typedef {Object} Options\n * @property {string} [font] Font style as CSS 'font' value, see:\n * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font. Default is '10px sans-serif'\n * @property {number} [maxAngle=Math.PI/4] When `placement` is set to `'line'`, allow a maximum angle between adjacent characters.\n * The expected value is in radians, and the default is 45Â° (`Math.PI / 4`).\n * @property {number} [offsetX=0] Horizontal text offset in pixels. A positive will shift the text right.\n * @property {number} [offsetY=0] Vertical text offset in pixels. A positive will shift the text down.\n * @property {boolean} [overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed\n * the width of the polygon at the label position or the length of the path that it follows.\n * @property {import(\"./TextPlacement.js\").default|string} [placement='point'] Text placement.\n * @property {number|import(\"../size.js\").Size} [scale] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the text with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {string|Array<string>} [text] Text content or rich text content. For plain text provide a string, which can\n * contain line breaks (`\\n`). For rich text provide an array of text/font tuples. A tuple consists of the text to\n * render and the font to use (or `''` to use the text style's font). A line break has to be a separate tuple (i.e. `'\\n', ''`).\n * **Example:** `['foo', 'bold 10px sans-serif', ' bar', 'italic 10px sans-serif', ' baz', '']` will yield \"**foo** *bar* baz\".\n * **Note:** Rich text is not supported for the immediate rendering API.\n * @property {string} [textAlign] Text alignment. Possible values: 'left', 'right', 'center', 'end' or 'start'.\n * Default is 'center' for `placement: 'point'`. For `placement: 'line'`, the default is to let the renderer choose a\n * placement where `maxAngle` is not exceeded.\n * @property {string} [justify] Text justification within the text box.\n * If not set, text is justified towards the `textAlign` anchor.\n * Otherwise, use options `'left'`, `'center'`, or `'right'` to justify the text within the text box.\n * **Note:** `justify` is ignored for immediate rendering and also for `placement: 'line'`.\n * @property {string} [textBaseline='middle'] Text base line. Possible values: 'bottom', 'top', 'middle', 'alphabetic',\n * 'hanging', 'ideographic'.\n * @property {import(\"./Fill.js\").default} [fill] Fill style. If none is provided, we'll use a dark fill-style (#333).\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {import(\"./Fill.js\").default} [backgroundFill] Fill style for the text background when `placement` is\n * `'point'`. Default is no fill.\n * @property {import(\"./Stroke.js\").default} [backgroundStroke] Stroke style for the text background  when `placement`\n * is `'point'`. Default is no stroke.\n * @property {Array<number>} [padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of\n * values in the array is `[top, right, bottom, left]`.\n */\n\n/**\n * @classdesc\n * Set text style for vector features.\n * @api\n */\n\nvar Text =\n/** @class */\nfunction () {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  function Text(opt_options) {\n    var options = opt_options || {};\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n\n    this.font_ = options.font;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.rotation_ = options.rotation;\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n\n    this.rotateWithView_ = options.rotateWithView;\n    /**\n     * @private\n     * @type {number|import(\"../size.js\").Size|undefined}\n     */\n\n    this.scale_ = options.scale;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n\n    this.scaleArray_ = toSize(options.scale !== undefined ? options.scale : 1);\n    /**\n     * @private\n     * @type {string|Array<string>|undefined}\n     */\n\n    this.text_ = options.text;\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n\n    this.textAlign_ = options.textAlign;\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n\n    this.justify_ = options.justify;\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n\n    this.textBaseline_ = options.textBaseline;\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n\n    this.fill_ = options.fill !== undefined ? options.fill : new Fill({\n      color: DEFAULT_FILL_COLOR\n    });\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.maxAngle_ = options.maxAngle !== undefined ? options.maxAngle : Math.PI / 4;\n    /**\n     * @private\n     * @type {import(\"./TextPlacement.js\").default|string}\n     */\n\n    this.placement_ = options.placement !== undefined ? options.placement : TextPlacement.POINT;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.overflow_ = !!options.overflow;\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.offsetX_ = options.offsetX !== undefined ? options.offsetX : 0;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.offsetY_ = options.offsetY !== undefined ? options.offsetY : 0;\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n\n    this.backgroundFill_ = options.backgroundFill ? options.backgroundFill : null;\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n\n    this.backgroundStroke_ = options.backgroundStroke ? options.backgroundStroke : null;\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n\n    this.padding_ = options.padding === undefined ? null : options.padding;\n  }\n  /**\n   * Clones the style.\n   * @return {Text} The cloned style.\n   * @api\n   */\n\n\n  Text.prototype.clone = function () {\n    var scale = this.getScale();\n    return new Text({\n      font: this.getFont(),\n      placement: this.getPlacement(),\n      maxAngle: this.getMaxAngle(),\n      overflow: this.getOverflow(),\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      text: this.getText(),\n      textAlign: this.getTextAlign(),\n      justify: this.getJustify(),\n      textBaseline: this.getTextBaseline(),\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      offsetX: this.getOffsetX(),\n      offsetY: this.getOffsetY(),\n      backgroundFill: this.getBackgroundFill() ? this.getBackgroundFill().clone() : undefined,\n      backgroundStroke: this.getBackgroundStroke() ? this.getBackgroundStroke().clone() : undefined,\n      padding: this.getPadding() || undefined\n    });\n  };\n  /**\n   * Get the `overflow` configuration.\n   * @return {boolean} Let text overflow the length of the path they follow.\n   * @api\n   */\n\n\n  Text.prototype.getOverflow = function () {\n    return this.overflow_;\n  };\n  /**\n   * Get the font name.\n   * @return {string|undefined} Font.\n   * @api\n   */\n\n\n  Text.prototype.getFont = function () {\n    return this.font_;\n  };\n  /**\n   * Get the maximum angle between adjacent characters.\n   * @return {number} Angle in radians.\n   * @api\n   */\n\n\n  Text.prototype.getMaxAngle = function () {\n    return this.maxAngle_;\n  };\n  /**\n   * Get the label placement.\n   * @return {import(\"./TextPlacement.js\").default|string} Text placement.\n   * @api\n   */\n\n\n  Text.prototype.getPlacement = function () {\n    return this.placement_;\n  };\n  /**\n   * Get the x-offset for the text.\n   * @return {number} Horizontal text offset.\n   * @api\n   */\n\n\n  Text.prototype.getOffsetX = function () {\n    return this.offsetX_;\n  };\n  /**\n   * Get the y-offset for the text.\n   * @return {number} Vertical text offset.\n   * @api\n   */\n\n\n  Text.prototype.getOffsetY = function () {\n    return this.offsetY_;\n  };\n  /**\n   * Get the fill style for the text.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n\n\n  Text.prototype.getFill = function () {\n    return this.fill_;\n  };\n  /**\n   * Determine whether the text rotates with the map.\n   * @return {boolean|undefined} Rotate with map.\n   * @api\n   */\n\n\n  Text.prototype.getRotateWithView = function () {\n    return this.rotateWithView_;\n  };\n  /**\n   * Get the text rotation.\n   * @return {number|undefined} Rotation.\n   * @api\n   */\n\n\n  Text.prototype.getRotation = function () {\n    return this.rotation_;\n  };\n  /**\n   * Get the text scale.\n   * @return {number|import(\"../size.js\").Size|undefined} Scale.\n   * @api\n   */\n\n\n  Text.prototype.getScale = function () {\n    return this.scale_;\n  };\n  /**\n   * Get the symbolizer scale array.\n   * @return {import(\"../size.js\").Size} Scale array.\n   */\n\n\n  Text.prototype.getScaleArray = function () {\n    return this.scaleArray_;\n  };\n  /**\n   * Get the stroke style for the text.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n\n\n  Text.prototype.getStroke = function () {\n    return this.stroke_;\n  };\n  /**\n   * Get the text to be rendered.\n   * @return {string|Array<string>|undefined} Text.\n   * @api\n   */\n\n\n  Text.prototype.getText = function () {\n    return this.text_;\n  };\n  /**\n   * Get the text alignment.\n   * @return {string|undefined} Text align.\n   * @api\n   */\n\n\n  Text.prototype.getTextAlign = function () {\n    return this.textAlign_;\n  };\n  /**\n   * Get the justification.\n   * @return {string|undefined} Justification.\n   * @api\n   */\n\n\n  Text.prototype.getJustify = function () {\n    return this.justify_;\n  };\n  /**\n   * Get the text baseline.\n   * @return {string|undefined} Text baseline.\n   * @api\n   */\n\n\n  Text.prototype.getTextBaseline = function () {\n    return this.textBaseline_;\n  };\n  /**\n   * Get the background fill style for the text.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n\n\n  Text.prototype.getBackgroundFill = function () {\n    return this.backgroundFill_;\n  };\n  /**\n   * Get the background stroke style for the text.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n\n\n  Text.prototype.getBackgroundStroke = function () {\n    return this.backgroundStroke_;\n  };\n  /**\n   * Get the padding for the text.\n   * @return {Array<number>|null} Padding.\n   * @api\n   */\n\n\n  Text.prototype.getPadding = function () {\n    return this.padding_;\n  };\n  /**\n   * Set the `overflow` property.\n   *\n   * @param {boolean} overflow Let text overflow the path that it follows.\n   * @api\n   */\n\n\n  Text.prototype.setOverflow = function (overflow) {\n    this.overflow_ = overflow;\n  };\n  /**\n   * Set the font.\n   *\n   * @param {string|undefined} font Font.\n   * @api\n   */\n\n\n  Text.prototype.setFont = function (font) {\n    this.font_ = font;\n  };\n  /**\n   * Set the maximum angle between adjacent characters.\n   *\n   * @param {number} maxAngle Angle in radians.\n   * @api\n   */\n\n\n  Text.prototype.setMaxAngle = function (maxAngle) {\n    this.maxAngle_ = maxAngle;\n  };\n  /**\n   * Set the x offset.\n   *\n   * @param {number} offsetX Horizontal text offset.\n   * @api\n   */\n\n\n  Text.prototype.setOffsetX = function (offsetX) {\n    this.offsetX_ = offsetX;\n  };\n  /**\n   * Set the y offset.\n   *\n   * @param {number} offsetY Vertical text offset.\n   * @api\n   */\n\n\n  Text.prototype.setOffsetY = function (offsetY) {\n    this.offsetY_ = offsetY;\n  };\n  /**\n   * Set the text placement.\n   *\n   * @param {import(\"./TextPlacement.js\").default|string} placement Placement.\n   * @api\n   */\n\n\n  Text.prototype.setPlacement = function (placement) {\n    this.placement_ = placement;\n  };\n  /**\n   * Set whether to rotate the text with the view.\n   *\n   * @param {boolean} rotateWithView Rotate with map.\n   * @api\n   */\n\n\n  Text.prototype.setRotateWithView = function (rotateWithView) {\n    this.rotateWithView_ = rotateWithView;\n  };\n  /**\n   * Set the fill.\n   *\n   * @param {import(\"./Fill.js\").default} fill Fill style.\n   * @api\n   */\n\n\n  Text.prototype.setFill = function (fill) {\n    this.fill_ = fill;\n  };\n  /**\n   * Set the rotation.\n   *\n   * @param {number|undefined} rotation Rotation.\n   * @api\n   */\n\n\n  Text.prototype.setRotation = function (rotation) {\n    this.rotation_ = rotation;\n  };\n  /**\n   * Set the scale.\n   *\n   * @param {number|import(\"../size.js\").Size|undefined} scale Scale.\n   * @api\n   */\n\n\n  Text.prototype.setScale = function (scale) {\n    this.scale_ = scale;\n    this.scaleArray_ = toSize(scale !== undefined ? scale : 1);\n  };\n  /**\n   * Set the stroke.\n   *\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n   * @api\n   */\n\n\n  Text.prototype.setStroke = function (stroke) {\n    this.stroke_ = stroke;\n  };\n  /**\n   * Set the text.\n   *\n   * @param {string|Array<string>|undefined} text Text.\n   * @api\n   */\n\n\n  Text.prototype.setText = function (text) {\n    this.text_ = text;\n  };\n  /**\n   * Set the text alignment.\n   *\n   * @param {string|undefined} textAlign Text align.\n   * @api\n   */\n\n\n  Text.prototype.setTextAlign = function (textAlign) {\n    this.textAlign_ = textAlign;\n  };\n  /**\n   * Set the justification.\n   *\n   * @param {string|undefined} justify Justification.\n   * @api\n   */\n\n\n  Text.prototype.setJustify = function (justify) {\n    this.justify_ = justify;\n  };\n  /**\n   * Set the text baseline.\n   *\n   * @param {string|undefined} textBaseline Text baseline.\n   * @api\n   */\n\n\n  Text.prototype.setTextBaseline = function (textBaseline) {\n    this.textBaseline_ = textBaseline;\n  };\n  /**\n   * Set the background fill.\n   *\n   * @param {import(\"./Fill.js\").default} fill Fill style.\n   * @api\n   */\n\n\n  Text.prototype.setBackgroundFill = function (fill) {\n    this.backgroundFill_ = fill;\n  };\n  /**\n   * Set the background stroke.\n   *\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n   * @api\n   */\n\n\n  Text.prototype.setBackgroundStroke = function (stroke) {\n    this.backgroundStroke_ = stroke;\n  };\n  /**\n   * Set the padding (`[top, right, bottom, left]`).\n   *\n   * @param {Array<number>|null} padding Padding.\n   * @api\n   */\n\n\n  Text.prototype.setPadding = function (padding) {\n    this.padding_ = padding;\n  };\n\n  return Text;\n}();\n\nexport default Text;","map":{"version":3,"names":["Fill","TextPlacement","toSize","DEFAULT_FILL_COLOR","Text","opt_options","options","font_","font","rotation_","rotation","rotateWithView_","rotateWithView","scale_","scale","scaleArray_","undefined","text_","text","textAlign_","textAlign","justify_","justify","textBaseline_","textBaseline","fill_","fill","color","maxAngle_","maxAngle","Math","PI","placement_","placement","POINT","overflow_","overflow","stroke_","stroke","offsetX_","offsetX","offsetY_","offsetY","backgroundFill_","backgroundFill","backgroundStroke_","backgroundStroke","padding_","padding","prototype","clone","getScale","getFont","getPlacement","getMaxAngle","getOverflow","getRotation","getRotateWithView","Array","isArray","slice","getText","getTextAlign","getJustify","getTextBaseline","getFill","getStroke","getOffsetX","getOffsetY","getBackgroundFill","getBackgroundStroke","getPadding","getScaleArray","setOverflow","setFont","setMaxAngle","setOffsetX","setOffsetY","setPlacement","setRotateWithView","setFill","setRotation","setScale","setStroke","setText","setTextAlign","setJustify","setTextBaseline","setBackgroundFill","setBackgroundStroke","setPadding"],"sources":["/home/asura/github/smartcity/node_modules/ol/style/Text.js"],"sourcesContent":["/**\n * @module ol/style/Text\n */\nimport Fill from './Fill.js';\nimport TextPlacement from './TextPlacement.js';\nimport { toSize } from '../size.js';\n/**\n * The default fill color to use if no fill was set at construction time; a\n * blackish `#333`.\n *\n * @const {string}\n */\nvar DEFAULT_FILL_COLOR = '#333';\n/**\n * @typedef {Object} Options\n * @property {string} [font] Font style as CSS 'font' value, see:\n * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font. Default is '10px sans-serif'\n * @property {number} [maxAngle=Math.PI/4] When `placement` is set to `'line'`, allow a maximum angle between adjacent characters.\n * The expected value is in radians, and the default is 45Â° (`Math.PI / 4`).\n * @property {number} [offsetX=0] Horizontal text offset in pixels. A positive will shift the text right.\n * @property {number} [offsetY=0] Vertical text offset in pixels. A positive will shift the text down.\n * @property {boolean} [overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed\n * the width of the polygon at the label position or the length of the path that it follows.\n * @property {import(\"./TextPlacement.js\").default|string} [placement='point'] Text placement.\n * @property {number|import(\"../size.js\").Size} [scale] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the text with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {string|Array<string>} [text] Text content or rich text content. For plain text provide a string, which can\n * contain line breaks (`\\n`). For rich text provide an array of text/font tuples. A tuple consists of the text to\n * render and the font to use (or `''` to use the text style's font). A line break has to be a separate tuple (i.e. `'\\n', ''`).\n * **Example:** `['foo', 'bold 10px sans-serif', ' bar', 'italic 10px sans-serif', ' baz', '']` will yield \"**foo** *bar* baz\".\n * **Note:** Rich text is not supported for the immediate rendering API.\n * @property {string} [textAlign] Text alignment. Possible values: 'left', 'right', 'center', 'end' or 'start'.\n * Default is 'center' for `placement: 'point'`. For `placement: 'line'`, the default is to let the renderer choose a\n * placement where `maxAngle` is not exceeded.\n * @property {string} [justify] Text justification within the text box.\n * If not set, text is justified towards the `textAlign` anchor.\n * Otherwise, use options `'left'`, `'center'`, or `'right'` to justify the text within the text box.\n * **Note:** `justify` is ignored for immediate rendering and also for `placement: 'line'`.\n * @property {string} [textBaseline='middle'] Text base line. Possible values: 'bottom', 'top', 'middle', 'alphabetic',\n * 'hanging', 'ideographic'.\n * @property {import(\"./Fill.js\").default} [fill] Fill style. If none is provided, we'll use a dark fill-style (#333).\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {import(\"./Fill.js\").default} [backgroundFill] Fill style for the text background when `placement` is\n * `'point'`. Default is no fill.\n * @property {import(\"./Stroke.js\").default} [backgroundStroke] Stroke style for the text background  when `placement`\n * is `'point'`. Default is no stroke.\n * @property {Array<number>} [padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of\n * values in the array is `[top, right, bottom, left]`.\n */\n/**\n * @classdesc\n * Set text style for vector features.\n * @api\n */\nvar Text = /** @class */ (function () {\n    /**\n     * @param {Options} [opt_options] Options.\n     */\n    function Text(opt_options) {\n        var options = opt_options || {};\n        /**\n         * @private\n         * @type {string|undefined}\n         */\n        this.font_ = options.font;\n        /**\n         * @private\n         * @type {number|undefined}\n         */\n        this.rotation_ = options.rotation;\n        /**\n         * @private\n         * @type {boolean|undefined}\n         */\n        this.rotateWithView_ = options.rotateWithView;\n        /**\n         * @private\n         * @type {number|import(\"../size.js\").Size|undefined}\n         */\n        this.scale_ = options.scale;\n        /**\n         * @private\n         * @type {import(\"../size.js\").Size}\n         */\n        this.scaleArray_ = toSize(options.scale !== undefined ? options.scale : 1);\n        /**\n         * @private\n         * @type {string|Array<string>|undefined}\n         */\n        this.text_ = options.text;\n        /**\n         * @private\n         * @type {string|undefined}\n         */\n        this.textAlign_ = options.textAlign;\n        /**\n         * @private\n         * @type {string|undefined}\n         */\n        this.justify_ = options.justify;\n        /**\n         * @private\n         * @type {string|undefined}\n         */\n        this.textBaseline_ = options.textBaseline;\n        /**\n         * @private\n         * @type {import(\"./Fill.js\").default}\n         */\n        this.fill_ =\n            options.fill !== undefined\n                ? options.fill\n                : new Fill({ color: DEFAULT_FILL_COLOR });\n        /**\n         * @private\n         * @type {number}\n         */\n        this.maxAngle_ =\n            options.maxAngle !== undefined ? options.maxAngle : Math.PI / 4;\n        /**\n         * @private\n         * @type {import(\"./TextPlacement.js\").default|string}\n         */\n        this.placement_ =\n            options.placement !== undefined ? options.placement : TextPlacement.POINT;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this.overflow_ = !!options.overflow;\n        /**\n         * @private\n         * @type {import(\"./Stroke.js\").default}\n         */\n        this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n        /**\n         * @private\n         * @type {number}\n         */\n        this.offsetX_ = options.offsetX !== undefined ? options.offsetX : 0;\n        /**\n         * @private\n         * @type {number}\n         */\n        this.offsetY_ = options.offsetY !== undefined ? options.offsetY : 0;\n        /**\n         * @private\n         * @type {import(\"./Fill.js\").default}\n         */\n        this.backgroundFill_ = options.backgroundFill\n            ? options.backgroundFill\n            : null;\n        /**\n         * @private\n         * @type {import(\"./Stroke.js\").default}\n         */\n        this.backgroundStroke_ = options.backgroundStroke\n            ? options.backgroundStroke\n            : null;\n        /**\n         * @private\n         * @type {Array<number>|null}\n         */\n        this.padding_ = options.padding === undefined ? null : options.padding;\n    }\n    /**\n     * Clones the style.\n     * @return {Text} The cloned style.\n     * @api\n     */\n    Text.prototype.clone = function () {\n        var scale = this.getScale();\n        return new Text({\n            font: this.getFont(),\n            placement: this.getPlacement(),\n            maxAngle: this.getMaxAngle(),\n            overflow: this.getOverflow(),\n            rotation: this.getRotation(),\n            rotateWithView: this.getRotateWithView(),\n            scale: Array.isArray(scale) ? scale.slice() : scale,\n            text: this.getText(),\n            textAlign: this.getTextAlign(),\n            justify: this.getJustify(),\n            textBaseline: this.getTextBaseline(),\n            fill: this.getFill() ? this.getFill().clone() : undefined,\n            stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n            offsetX: this.getOffsetX(),\n            offsetY: this.getOffsetY(),\n            backgroundFill: this.getBackgroundFill()\n                ? this.getBackgroundFill().clone()\n                : undefined,\n            backgroundStroke: this.getBackgroundStroke()\n                ? this.getBackgroundStroke().clone()\n                : undefined,\n            padding: this.getPadding() || undefined,\n        });\n    };\n    /**\n     * Get the `overflow` configuration.\n     * @return {boolean} Let text overflow the length of the path they follow.\n     * @api\n     */\n    Text.prototype.getOverflow = function () {\n        return this.overflow_;\n    };\n    /**\n     * Get the font name.\n     * @return {string|undefined} Font.\n     * @api\n     */\n    Text.prototype.getFont = function () {\n        return this.font_;\n    };\n    /**\n     * Get the maximum angle between adjacent characters.\n     * @return {number} Angle in radians.\n     * @api\n     */\n    Text.prototype.getMaxAngle = function () {\n        return this.maxAngle_;\n    };\n    /**\n     * Get the label placement.\n     * @return {import(\"./TextPlacement.js\").default|string} Text placement.\n     * @api\n     */\n    Text.prototype.getPlacement = function () {\n        return this.placement_;\n    };\n    /**\n     * Get the x-offset for the text.\n     * @return {number} Horizontal text offset.\n     * @api\n     */\n    Text.prototype.getOffsetX = function () {\n        return this.offsetX_;\n    };\n    /**\n     * Get the y-offset for the text.\n     * @return {number} Vertical text offset.\n     * @api\n     */\n    Text.prototype.getOffsetY = function () {\n        return this.offsetY_;\n    };\n    /**\n     * Get the fill style for the text.\n     * @return {import(\"./Fill.js\").default} Fill style.\n     * @api\n     */\n    Text.prototype.getFill = function () {\n        return this.fill_;\n    };\n    /**\n     * Determine whether the text rotates with the map.\n     * @return {boolean|undefined} Rotate with map.\n     * @api\n     */\n    Text.prototype.getRotateWithView = function () {\n        return this.rotateWithView_;\n    };\n    /**\n     * Get the text rotation.\n     * @return {number|undefined} Rotation.\n     * @api\n     */\n    Text.prototype.getRotation = function () {\n        return this.rotation_;\n    };\n    /**\n     * Get the text scale.\n     * @return {number|import(\"../size.js\").Size|undefined} Scale.\n     * @api\n     */\n    Text.prototype.getScale = function () {\n        return this.scale_;\n    };\n    /**\n     * Get the symbolizer scale array.\n     * @return {import(\"../size.js\").Size} Scale array.\n     */\n    Text.prototype.getScaleArray = function () {\n        return this.scaleArray_;\n    };\n    /**\n     * Get the stroke style for the text.\n     * @return {import(\"./Stroke.js\").default} Stroke style.\n     * @api\n     */\n    Text.prototype.getStroke = function () {\n        return this.stroke_;\n    };\n    /**\n     * Get the text to be rendered.\n     * @return {string|Array<string>|undefined} Text.\n     * @api\n     */\n    Text.prototype.getText = function () {\n        return this.text_;\n    };\n    /**\n     * Get the text alignment.\n     * @return {string|undefined} Text align.\n     * @api\n     */\n    Text.prototype.getTextAlign = function () {\n        return this.textAlign_;\n    };\n    /**\n     * Get the justification.\n     * @return {string|undefined} Justification.\n     * @api\n     */\n    Text.prototype.getJustify = function () {\n        return this.justify_;\n    };\n    /**\n     * Get the text baseline.\n     * @return {string|undefined} Text baseline.\n     * @api\n     */\n    Text.prototype.getTextBaseline = function () {\n        return this.textBaseline_;\n    };\n    /**\n     * Get the background fill style for the text.\n     * @return {import(\"./Fill.js\").default} Fill style.\n     * @api\n     */\n    Text.prototype.getBackgroundFill = function () {\n        return this.backgroundFill_;\n    };\n    /**\n     * Get the background stroke style for the text.\n     * @return {import(\"./Stroke.js\").default} Stroke style.\n     * @api\n     */\n    Text.prototype.getBackgroundStroke = function () {\n        return this.backgroundStroke_;\n    };\n    /**\n     * Get the padding for the text.\n     * @return {Array<number>|null} Padding.\n     * @api\n     */\n    Text.prototype.getPadding = function () {\n        return this.padding_;\n    };\n    /**\n     * Set the `overflow` property.\n     *\n     * @param {boolean} overflow Let text overflow the path that it follows.\n     * @api\n     */\n    Text.prototype.setOverflow = function (overflow) {\n        this.overflow_ = overflow;\n    };\n    /**\n     * Set the font.\n     *\n     * @param {string|undefined} font Font.\n     * @api\n     */\n    Text.prototype.setFont = function (font) {\n        this.font_ = font;\n    };\n    /**\n     * Set the maximum angle between adjacent characters.\n     *\n     * @param {number} maxAngle Angle in radians.\n     * @api\n     */\n    Text.prototype.setMaxAngle = function (maxAngle) {\n        this.maxAngle_ = maxAngle;\n    };\n    /**\n     * Set the x offset.\n     *\n     * @param {number} offsetX Horizontal text offset.\n     * @api\n     */\n    Text.prototype.setOffsetX = function (offsetX) {\n        this.offsetX_ = offsetX;\n    };\n    /**\n     * Set the y offset.\n     *\n     * @param {number} offsetY Vertical text offset.\n     * @api\n     */\n    Text.prototype.setOffsetY = function (offsetY) {\n        this.offsetY_ = offsetY;\n    };\n    /**\n     * Set the text placement.\n     *\n     * @param {import(\"./TextPlacement.js\").default|string} placement Placement.\n     * @api\n     */\n    Text.prototype.setPlacement = function (placement) {\n        this.placement_ = placement;\n    };\n    /**\n     * Set whether to rotate the text with the view.\n     *\n     * @param {boolean} rotateWithView Rotate with map.\n     * @api\n     */\n    Text.prototype.setRotateWithView = function (rotateWithView) {\n        this.rotateWithView_ = rotateWithView;\n    };\n    /**\n     * Set the fill.\n     *\n     * @param {import(\"./Fill.js\").default} fill Fill style.\n     * @api\n     */\n    Text.prototype.setFill = function (fill) {\n        this.fill_ = fill;\n    };\n    /**\n     * Set the rotation.\n     *\n     * @param {number|undefined} rotation Rotation.\n     * @api\n     */\n    Text.prototype.setRotation = function (rotation) {\n        this.rotation_ = rotation;\n    };\n    /**\n     * Set the scale.\n     *\n     * @param {number|import(\"../size.js\").Size|undefined} scale Scale.\n     * @api\n     */\n    Text.prototype.setScale = function (scale) {\n        this.scale_ = scale;\n        this.scaleArray_ = toSize(scale !== undefined ? scale : 1);\n    };\n    /**\n     * Set the stroke.\n     *\n     * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n     * @api\n     */\n    Text.prototype.setStroke = function (stroke) {\n        this.stroke_ = stroke;\n    };\n    /**\n     * Set the text.\n     *\n     * @param {string|Array<string>|undefined} text Text.\n     * @api\n     */\n    Text.prototype.setText = function (text) {\n        this.text_ = text;\n    };\n    /**\n     * Set the text alignment.\n     *\n     * @param {string|undefined} textAlign Text align.\n     * @api\n     */\n    Text.prototype.setTextAlign = function (textAlign) {\n        this.textAlign_ = textAlign;\n    };\n    /**\n     * Set the justification.\n     *\n     * @param {string|undefined} justify Justification.\n     * @api\n     */\n    Text.prototype.setJustify = function (justify) {\n        this.justify_ = justify;\n    };\n    /**\n     * Set the text baseline.\n     *\n     * @param {string|undefined} textBaseline Text baseline.\n     * @api\n     */\n    Text.prototype.setTextBaseline = function (textBaseline) {\n        this.textBaseline_ = textBaseline;\n    };\n    /**\n     * Set the background fill.\n     *\n     * @param {import(\"./Fill.js\").default} fill Fill style.\n     * @api\n     */\n    Text.prototype.setBackgroundFill = function (fill) {\n        this.backgroundFill_ = fill;\n    };\n    /**\n     * Set the background stroke.\n     *\n     * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n     * @api\n     */\n    Text.prototype.setBackgroundStroke = function (stroke) {\n        this.backgroundStroke_ = stroke;\n    };\n    /**\n     * Set the padding (`[top, right, bottom, left]`).\n     *\n     * @param {Array<number>|null} padding Padding.\n     * @api\n     */\n    Text.prototype.setPadding = function (padding) {\n        this.padding_ = padding;\n    };\n    return Text;\n}());\nexport default Text;\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,kBAAkB,GAAG,MAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,IAAI;AAAG;AAAe,YAAY;EAClC;AACJ;AACA;EACI,SAASA,IAAT,CAAcC,WAAd,EAA2B;IACvB,IAAIC,OAAO,GAAGD,WAAW,IAAI,EAA7B;IACA;AACR;AACA;AACA;;IACQ,KAAKE,KAAL,GAAaD,OAAO,CAACE,IAArB;IACA;AACR;AACA;AACA;;IACQ,KAAKC,SAAL,GAAiBH,OAAO,CAACI,QAAzB;IACA;AACR;AACA;AACA;;IACQ,KAAKC,eAAL,GAAuBL,OAAO,CAACM,cAA/B;IACA;AACR;AACA;AACA;;IACQ,KAAKC,MAAL,GAAcP,OAAO,CAACQ,KAAtB;IACA;AACR;AACA;AACA;;IACQ,KAAKC,WAAL,GAAmBb,MAAM,CAACI,OAAO,CAACQ,KAAR,KAAkBE,SAAlB,GAA8BV,OAAO,CAACQ,KAAtC,GAA8C,CAA/C,CAAzB;IACA;AACR;AACA;AACA;;IACQ,KAAKG,KAAL,GAAaX,OAAO,CAACY,IAArB;IACA;AACR;AACA;AACA;;IACQ,KAAKC,UAAL,GAAkBb,OAAO,CAACc,SAA1B;IACA;AACR;AACA;AACA;;IACQ,KAAKC,QAAL,GAAgBf,OAAO,CAACgB,OAAxB;IACA;AACR;AACA;AACA;;IACQ,KAAKC,aAAL,GAAqBjB,OAAO,CAACkB,YAA7B;IACA;AACR;AACA;AACA;;IACQ,KAAKC,KAAL,GACInB,OAAO,CAACoB,IAAR,KAAiBV,SAAjB,GACMV,OAAO,CAACoB,IAD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"},"metadata":{},"sourceType":"module"}