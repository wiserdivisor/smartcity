{"ast":null,"code":"/**\n * @module ol/structs/LRUCache\n */\nimport { assert } from '../asserts.js';\n/**\n * @typedef {Object} Entry\n * @property {string} key_ Key.\n * @property {Object} newer Newer.\n * @property {Object} older Older.\n * @property {*} value_ Value.\n */\n\n/**\n * @classdesc\n * Implements a Least-Recently-Used cache where the keys do not conflict with\n * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring\n * items from the cache is the responsibility of the user.\n *\n * @fires import(\"../events/Event.js\").default\n * @template T\n */\n\nvar LRUCache =\n/** @class */\nfunction () {\n  /**\n   * @param {number} [opt_highWaterMark] High water mark.\n   */\n  function LRUCache(opt_highWaterMark) {\n    /**\n     * Desired max cache size after expireCache(). If set to 0, no cache entries\n     * will be pruned at all.\n     * @type {number}\n     */\n    this.highWaterMark = opt_highWaterMark !== undefined ? opt_highWaterMark : 2048;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.count_ = 0;\n    /**\n     * @private\n     * @type {!Object<string, Entry>}\n     */\n\n    this.entries_ = {};\n    /**\n     * @private\n     * @type {?Entry}\n     */\n\n    this.oldest_ = null;\n    /**\n     * @private\n     * @type {?Entry}\n     */\n\n    this.newest_ = null;\n  }\n  /**\n   * @return {boolean} Can expire cache.\n   */\n\n\n  LRUCache.prototype.canExpireCache = function () {\n    return this.highWaterMark > 0 && this.getCount() > this.highWaterMark;\n  };\n  /**\n   * Expire the cache.\n   * @param {!Object<string, boolean>} [keep] Keys to keep. To be implemented by subclasses.\n   */\n\n\n  LRUCache.prototype.expireCache = function (keep) {\n    while (this.canExpireCache()) {\n      this.pop();\n    }\n  };\n  /**\n   * FIXME empty description for jsdoc\n   */\n\n\n  LRUCache.prototype.clear = function () {\n    this.count_ = 0;\n    this.entries_ = {};\n    this.oldest_ = null;\n    this.newest_ = null;\n  };\n  /**\n   * @param {string} key Key.\n   * @return {boolean} Contains key.\n   */\n\n\n  LRUCache.prototype.containsKey = function (key) {\n    return this.entries_.hasOwnProperty(key);\n  };\n  /**\n   * @param {function(T, string, LRUCache<T>): ?} f The function\n   *     to call for every entry from the oldest to the newer. This function takes\n   *     3 arguments (the entry value, the entry key and the LRUCache object).\n   *     The return value is ignored.\n   */\n\n\n  LRUCache.prototype.forEach = function (f) {\n    var entry = this.oldest_;\n\n    while (entry) {\n      f(entry.value_, entry.key_, this);\n      entry = entry.newer;\n    }\n  };\n  /**\n   * @param {string} key Key.\n   * @param {*} [opt_options] Options (reserved for subclasses).\n   * @return {T} Value.\n   */\n\n\n  LRUCache.prototype.get = function (key, opt_options) {\n    var entry = this.entries_[key];\n    assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache\n\n    if (entry === this.newest_) {\n      return entry.value_;\n    } else if (entry === this.oldest_) {\n      this.oldest_ =\n      /** @type {Entry} */\n      this.oldest_.newer;\n      this.oldest_.older = null;\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n\n    entry.newer = null;\n    entry.older = this.newest_;\n    this.newest_.newer = entry;\n    this.newest_ = entry;\n    return entry.value_;\n  };\n  /**\n   * Remove an entry from the cache.\n   * @param {string} key The entry key.\n   * @return {T} The removed entry.\n   */\n\n\n  LRUCache.prototype.remove = function (key) {\n    var entry = this.entries_[key];\n    assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache\n\n    if (entry === this.newest_) {\n      this.newest_ =\n      /** @type {Entry} */\n      entry.older;\n\n      if (this.newest_) {\n        this.newest_.newer = null;\n      }\n    } else if (entry === this.oldest_) {\n      this.oldest_ =\n      /** @type {Entry} */\n      entry.newer;\n\n      if (this.oldest_) {\n        this.oldest_.older = null;\n      }\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n\n    delete this.entries_[key];\n    --this.count_;\n    return entry.value_;\n  };\n  /**\n   * @return {number} Count.\n   */\n\n\n  LRUCache.prototype.getCount = function () {\n    return this.count_;\n  };\n  /**\n   * @return {Array<string>} Keys.\n   */\n\n\n  LRUCache.prototype.getKeys = function () {\n    var keys = new Array(this.count_);\n    var i = 0;\n    var entry;\n\n    for (entry = this.newest_; entry; entry = entry.older) {\n      keys[i++] = entry.key_;\n    }\n\n    return keys;\n  };\n  /**\n   * @return {Array<T>} Values.\n   */\n\n\n  LRUCache.prototype.getValues = function () {\n    var values = new Array(this.count_);\n    var i = 0;\n    var entry;\n\n    for (entry = this.newest_; entry; entry = entry.older) {\n      values[i++] = entry.value_;\n    }\n\n    return values;\n  };\n  /**\n   * @return {T} Last value.\n   */\n\n\n  LRUCache.prototype.peekLast = function () {\n    return this.oldest_.value_;\n  };\n  /**\n   * @return {string} Last key.\n   */\n\n\n  LRUCache.prototype.peekLastKey = function () {\n    return this.oldest_.key_;\n  };\n  /**\n   * Get the key of the newest item in the cache.  Throws if the cache is empty.\n   * @return {string} The newest key.\n   */\n\n\n  LRUCache.prototype.peekFirstKey = function () {\n    return this.newest_.key_;\n  };\n  /**\n   * Return an entry without updating least recently used time.\n   * @param {string} key Key.\n   * @return {T} Value.\n   */\n\n\n  LRUCache.prototype.peek = function (key) {\n    if (!this.containsKey(key)) {\n      return undefined;\n    }\n\n    return this.entries_[key].value_;\n  };\n  /**\n   * @return {T} value Value.\n   */\n\n\n  LRUCache.prototype.pop = function () {\n    var entry = this.oldest_;\n    delete this.entries_[entry.key_];\n\n    if (entry.newer) {\n      entry.newer.older = null;\n    }\n\n    this.oldest_ =\n    /** @type {Entry} */\n    entry.newer;\n\n    if (!this.oldest_) {\n      this.newest_ = null;\n    }\n\n    --this.count_;\n    return entry.value_;\n  };\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n\n\n  LRUCache.prototype.replace = function (key, value) {\n    this.get(key); // update `newest_`\n\n    this.entries_[key].value_ = value;\n  };\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n\n\n  LRUCache.prototype.set = function (key, value) {\n    assert(!(key in this.entries_), 16); // Tried to set a value for a key that is used already\n\n    var entry = {\n      key_: key,\n      newer: null,\n      older: this.newest_,\n      value_: value\n    };\n\n    if (!this.newest_) {\n      this.oldest_ = entry;\n    } else {\n      this.newest_.newer = entry;\n    }\n\n    this.newest_ = entry;\n    this.entries_[key] = entry;\n    ++this.count_;\n  };\n  /**\n   * Set a maximum number of entries for the cache.\n   * @param {number} size Cache size.\n   * @api\n   */\n\n\n  LRUCache.prototype.setSize = function (size) {\n    this.highWaterMark = size;\n  };\n\n  return LRUCache;\n}();\n\nexport default LRUCache;","map":{"version":3,"names":["assert","LRUCache","opt_highWaterMark","highWaterMark","undefined","count_","entries_","oldest_","newest_","prototype","canExpireCache","getCount","expireCache","keep","pop","clear","containsKey","key","hasOwnProperty","forEach","f","entry","value_","key_","newer","get","opt_options","older","remove","getKeys","keys","Array","i","getValues","values","peekLast","peekLastKey","peekFirstKey","peek","replace","value","set","setSize","size"],"sources":["/home/asura/github/smartcity/source/node_modules/ol/structs/LRUCache.js"],"sourcesContent":["/**\n * @module ol/structs/LRUCache\n */\nimport { assert } from '../asserts.js';\n/**\n * @typedef {Object} Entry\n * @property {string} key_ Key.\n * @property {Object} newer Newer.\n * @property {Object} older Older.\n * @property {*} value_ Value.\n */\n/**\n * @classdesc\n * Implements a Least-Recently-Used cache where the keys do not conflict with\n * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring\n * items from the cache is the responsibility of the user.\n *\n * @fires import(\"../events/Event.js\").default\n * @template T\n */\nvar LRUCache = /** @class */ (function () {\n    /**\n     * @param {number} [opt_highWaterMark] High water mark.\n     */\n    function LRUCache(opt_highWaterMark) {\n        /**\n         * Desired max cache size after expireCache(). If set to 0, no cache entries\n         * will be pruned at all.\n         * @type {number}\n         */\n        this.highWaterMark =\n            opt_highWaterMark !== undefined ? opt_highWaterMark : 2048;\n        /**\n         * @private\n         * @type {number}\n         */\n        this.count_ = 0;\n        /**\n         * @private\n         * @type {!Object<string, Entry>}\n         */\n        this.entries_ = {};\n        /**\n         * @private\n         * @type {?Entry}\n         */\n        this.oldest_ = null;\n        /**\n         * @private\n         * @type {?Entry}\n         */\n        this.newest_ = null;\n    }\n    /**\n     * @return {boolean} Can expire cache.\n     */\n    LRUCache.prototype.canExpireCache = function () {\n        return this.highWaterMark > 0 && this.getCount() > this.highWaterMark;\n    };\n    /**\n     * Expire the cache.\n     * @param {!Object<string, boolean>} [keep] Keys to keep. To be implemented by subclasses.\n     */\n    LRUCache.prototype.expireCache = function (keep) {\n        while (this.canExpireCache()) {\n            this.pop();\n        }\n    };\n    /**\n     * FIXME empty description for jsdoc\n     */\n    LRUCache.prototype.clear = function () {\n        this.count_ = 0;\n        this.entries_ = {};\n        this.oldest_ = null;\n        this.newest_ = null;\n    };\n    /**\n     * @param {string} key Key.\n     * @return {boolean} Contains key.\n     */\n    LRUCache.prototype.containsKey = function (key) {\n        return this.entries_.hasOwnProperty(key);\n    };\n    /**\n     * @param {function(T, string, LRUCache<T>): ?} f The function\n     *     to call for every entry from the oldest to the newer. This function takes\n     *     3 arguments (the entry value, the entry key and the LRUCache object).\n     *     The return value is ignored.\n     */\n    LRUCache.prototype.forEach = function (f) {\n        var entry = this.oldest_;\n        while (entry) {\n            f(entry.value_, entry.key_, this);\n            entry = entry.newer;\n        }\n    };\n    /**\n     * @param {string} key Key.\n     * @param {*} [opt_options] Options (reserved for subclasses).\n     * @return {T} Value.\n     */\n    LRUCache.prototype.get = function (key, opt_options) {\n        var entry = this.entries_[key];\n        assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache\n        if (entry === this.newest_) {\n            return entry.value_;\n        }\n        else if (entry === this.oldest_) {\n            this.oldest_ = /** @type {Entry} */ (this.oldest_.newer);\n            this.oldest_.older = null;\n        }\n        else {\n            entry.newer.older = entry.older;\n            entry.older.newer = entry.newer;\n        }\n        entry.newer = null;\n        entry.older = this.newest_;\n        this.newest_.newer = entry;\n        this.newest_ = entry;\n        return entry.value_;\n    };\n    /**\n     * Remove an entry from the cache.\n     * @param {string} key The entry key.\n     * @return {T} The removed entry.\n     */\n    LRUCache.prototype.remove = function (key) {\n        var entry = this.entries_[key];\n        assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache\n        if (entry === this.newest_) {\n            this.newest_ = /** @type {Entry} */ (entry.older);\n            if (this.newest_) {\n                this.newest_.newer = null;\n            }\n        }\n        else if (entry === this.oldest_) {\n            this.oldest_ = /** @type {Entry} */ (entry.newer);\n            if (this.oldest_) {\n                this.oldest_.older = null;\n            }\n        }\n        else {\n            entry.newer.older = entry.older;\n            entry.older.newer = entry.newer;\n        }\n        delete this.entries_[key];\n        --this.count_;\n        return entry.value_;\n    };\n    /**\n     * @return {number} Count.\n     */\n    LRUCache.prototype.getCount = function () {\n        return this.count_;\n    };\n    /**\n     * @return {Array<string>} Keys.\n     */\n    LRUCache.prototype.getKeys = function () {\n        var keys = new Array(this.count_);\n        var i = 0;\n        var entry;\n        for (entry = this.newest_; entry; entry = entry.older) {\n            keys[i++] = entry.key_;\n        }\n        return keys;\n    };\n    /**\n     * @return {Array<T>} Values.\n     */\n    LRUCache.prototype.getValues = function () {\n        var values = new Array(this.count_);\n        var i = 0;\n        var entry;\n        for (entry = this.newest_; entry; entry = entry.older) {\n            values[i++] = entry.value_;\n        }\n        return values;\n    };\n    /**\n     * @return {T} Last value.\n     */\n    LRUCache.prototype.peekLast = function () {\n        return this.oldest_.value_;\n    };\n    /**\n     * @return {string} Last key.\n     */\n    LRUCache.prototype.peekLastKey = function () {\n        return this.oldest_.key_;\n    };\n    /**\n     * Get the key of the newest item in the cache.  Throws if the cache is empty.\n     * @return {string} The newest key.\n     */\n    LRUCache.prototype.peekFirstKey = function () {\n        return this.newest_.key_;\n    };\n    /**\n     * Return an entry without updating least recently used time.\n     * @param {string} key Key.\n     * @return {T} Value.\n     */\n    LRUCache.prototype.peek = function (key) {\n        if (!this.containsKey(key)) {\n            return undefined;\n        }\n        return this.entries_[key].value_;\n    };\n    /**\n     * @return {T} value Value.\n     */\n    LRUCache.prototype.pop = function () {\n        var entry = this.oldest_;\n        delete this.entries_[entry.key_];\n        if (entry.newer) {\n            entry.newer.older = null;\n        }\n        this.oldest_ = /** @type {Entry} */ (entry.newer);\n        if (!this.oldest_) {\n            this.newest_ = null;\n        }\n        --this.count_;\n        return entry.value_;\n    };\n    /**\n     * @param {string} key Key.\n     * @param {T} value Value.\n     */\n    LRUCache.prototype.replace = function (key, value) {\n        this.get(key); // update `newest_`\n        this.entries_[key].value_ = value;\n    };\n    /**\n     * @param {string} key Key.\n     * @param {T} value Value.\n     */\n    LRUCache.prototype.set = function (key, value) {\n        assert(!(key in this.entries_), 16); // Tried to set a value for a key that is used already\n        var entry = {\n            key_: key,\n            newer: null,\n            older: this.newest_,\n            value_: value,\n        };\n        if (!this.newest_) {\n            this.oldest_ = entry;\n        }\n        else {\n            this.newest_.newer = entry;\n        }\n        this.newest_ = entry;\n        this.entries_[key] = entry;\n        ++this.count_;\n    };\n    /**\n     * Set a maximum number of entries for the cache.\n     * @param {number} size Cache size.\n     * @api\n     */\n    LRUCache.prototype.setSize = function (size) {\n        this.highWaterMark = size;\n    };\n    return LRUCache;\n}());\nexport default LRUCache;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}