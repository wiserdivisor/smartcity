{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/renderer/canvas/Layer\n */\n\n\nimport LayerRenderer from '../Layer.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport { apply as applyTransform, compose as composeTransform, create as createTransform } from '../../transform.js';\nimport { asArray } from '../../color.js';\nimport { containsCoordinate, getBottomLeft, getBottomRight, getTopLeft, getTopRight } from '../../extent.js';\nimport { createCanvasContext2D } from '../../dom.js';\nimport { equals } from '../../array.js';\n/**\n * @type {Array<HTMLCanvasElement>}\n */\n\nexport var canvasPool = [];\n/**\n * @type {CanvasRenderingContext2D}\n */\n\nvar pixelContext = null;\n\nfunction createPixelContext() {\n  var canvas = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  pixelContext = canvas.getContext('2d');\n}\n/**\n * @abstract\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n * @extends {LayerRenderer<LayerType>}\n */\n\n\nvar CanvasLayerRenderer =\n/** @class */\nfunction (_super) {\n  __extends(CanvasLayerRenderer, _super);\n  /**\n   * @param {LayerType} layer Layer.\n   */\n\n\n  function CanvasLayerRenderer(layer) {\n    var _this = _super.call(this, layer) || this;\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n\n\n    _this.container = null;\n    /**\n     * @protected\n     * @type {number}\n     */\n\n    _this.renderedResolution;\n    /**\n     * A temporary transform.  The values in this transform should only be used in a\n     * function that sets the values.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n\n    _this.tempTransform = createTransform();\n    /**\n     * The transform for rendered pixels to viewport CSS pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n\n    _this.pixelTransform = createTransform();\n    /**\n     * The transform for viewport CSS pixels to rendered pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n\n    _this.inversePixelTransform = createTransform();\n    /**\n     * @type {CanvasRenderingContext2D}\n     */\n\n    _this.context = null;\n    /**\n     * @type {boolean}\n     */\n\n    _this.containerReused = false;\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n\n    _this.pixelContext_ = null;\n    /**\n     * @protected\n     * @type {import(\"../../PluggableMap.js\").FrameState|null}\n     */\n\n    _this.frameState = null;\n    return _this;\n  }\n  /**\n   * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\n   * @param {number} col The column index.\n   * @param {number} row The row index.\n   * @return {Uint8ClampedArray|null} The image data.\n   */\n\n\n  CanvasLayerRenderer.prototype.getImageData = function (image, col, row) {\n    if (!pixelContext) {\n      createPixelContext();\n    }\n\n    pixelContext.clearRect(0, 0, 1, 1);\n    var data;\n\n    try {\n      pixelContext.drawImage(image, col, row, 1, 1, 0, 0, 1, 1);\n      data = pixelContext.getImageData(0, 0, 1, 1).data;\n    } catch (err) {\n      pixelContext = null;\n      return null;\n    }\n\n    return data;\n  };\n  /**\n   * @param {import('../../PluggableMap.js').FrameState} frameState Frame state.\n   * @return {string} Background color.\n   */\n\n\n  CanvasLayerRenderer.prototype.getBackground = function (frameState) {\n    var layer = this.getLayer();\n    var background = layer.getBackground();\n\n    if (typeof background === 'function') {\n      background = background(frameState.viewState.resolution);\n    }\n\n    return background || undefined;\n  };\n  /**\n   * Get a rendering container from an existing target, if compatible.\n   * @param {HTMLElement} target Potential render target.\n   * @param {string} transform CSS Transform.\n   * @param {string} [opt_backgroundColor] Background color.\n   */\n\n\n  CanvasLayerRenderer.prototype.useContainer = function (target, transform, opt_backgroundColor) {\n    var layerClassName = this.getLayer().getClassName();\n    var container, context;\n\n    if (target && target.className === layerClassName && (!opt_backgroundColor || target && target.style.backgroundColor && equals(asArray(target.style.backgroundColor), asArray(opt_backgroundColor)))) {\n      var canvas = target.firstElementChild;\n\n      if (canvas instanceof HTMLCanvasElement) {\n        context = canvas.getContext('2d');\n      }\n    }\n\n    if (context && context.canvas.style.transform === transform) {\n      // Container of the previous layer renderer can be used.\n      this.container = target;\n      this.context = context;\n      this.containerReused = true;\n    } else if (this.containerReused) {\n      // Previously reused container cannot be used any more.\n      this.container = null;\n      this.context = null;\n      this.containerReused = false;\n    }\n\n    if (!this.container) {\n      container = document.createElement('div');\n      container.className = layerClassName;\n      var style = container.style;\n      style.position = 'absolute';\n      style.width = '100%';\n      style.height = '100%';\n      context = createCanvasContext2D();\n      var canvas = context.canvas;\n      container.appendChild(canvas);\n      style = canvas.style;\n      style.position = 'absolute';\n      style.left = '0';\n      style.transformOrigin = 'top left';\n      this.container = container;\n      this.context = context;\n    }\n\n    if (!this.containerReused && opt_backgroundColor && !this.container.style.backgroundColor) {\n      this.container.style.backgroundColor = opt_backgroundColor;\n    }\n  };\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../extent.js\").Extent} extent Clip extent.\n   * @protected\n   */\n\n\n  CanvasLayerRenderer.prototype.clipUnrotated = function (context, frameState, extent) {\n    var topLeft = getTopLeft(extent);\n    var topRight = getTopRight(extent);\n    var bottomRight = getBottomRight(extent);\n    var bottomLeft = getBottomLeft(extent);\n    applyTransform(frameState.coordinateToPixelTransform, topLeft);\n    applyTransform(frameState.coordinateToPixelTransform, topRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomLeft);\n    var inverted = this.inversePixelTransform;\n    applyTransform(inverted, topLeft);\n    applyTransform(inverted, topRight);\n    applyTransform(inverted, bottomRight);\n    applyTransform(inverted, bottomLeft);\n    context.save();\n    context.beginPath();\n    context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));\n    context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));\n    context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));\n    context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));\n    context.clip();\n  };\n  /**\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @private\n   */\n\n\n  CanvasLayerRenderer.prototype.dispatchRenderEvent_ = function (type, context, frameState) {\n    var layer = this.getLayer();\n\n    if (layer.hasListener(type)) {\n      var event_1 = new RenderEvent(type, this.inversePixelTransform, frameState, context);\n      layer.dispatchEvent(event_1);\n    }\n  };\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n\n\n  CanvasLayerRenderer.prototype.preRender = function (context, frameState) {\n    this.frameState = frameState;\n    this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\n  };\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n\n\n  CanvasLayerRenderer.prototype.postRender = function (context, frameState) {\n    this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\n  };\n  /**\n   * Creates a transform for rendering to an element that will be rotated after rendering.\n   * @param {import(\"../../coordinate.js\").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {number} width Width of the rendered element (in pixels).\n   * @param {number} height Height of the rendered element (in pixels).\n   * @param {number} offsetX Offset on the x-axis in view coordinates.\n   * @protected\n   * @return {!import(\"../../transform.js\").Transform} Transform.\n   */\n\n\n  CanvasLayerRenderer.prototype.getRenderTransform = function (center, resolution, rotation, pixelRatio, width, height, offsetX) {\n    var dx1 = width / 2;\n    var dy1 = height / 2;\n    var sx = pixelRatio / resolution;\n    var sy = -sx;\n    var dx2 = -center[0] + offsetX;\n    var dy2 = -center[1];\n    return composeTransform(this.tempTransform, dx1, dy1, sx, sy, -rotation, dx2, dy2);\n  };\n  /**\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState FrameState.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @return {Uint8ClampedArray|Uint8Array} The result.  If there is no data at the pixel\n   *    location, null will be returned.  If there is data, but pixel values cannot be\n   *    returned, and empty array will be returned.\n   */\n\n\n  CanvasLayerRenderer.prototype.getDataAtPixel = function (pixel, frameState, hitTolerance) {\n    var renderPixel = applyTransform(this.inversePixelTransform, pixel.slice());\n    var context = this.context;\n    var layer = this.getLayer();\n    var layerExtent = layer.getExtent();\n\n    if (layerExtent) {\n      var renderCoordinate = applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n      /** get only data inside of the layer extent */\n\n      if (!containsCoordinate(layerExtent, renderCoordinate)) {\n        return null;\n      }\n    }\n\n    var x = Math.round(renderPixel[0]);\n    var y = Math.round(renderPixel[1]);\n    var pixelContext = this.pixelContext_;\n\n    if (!pixelContext) {\n      var pixelCanvas = document.createElement('canvas');\n      pixelCanvas.width = 1;\n      pixelCanvas.height = 1;\n      pixelContext = pixelCanvas.getContext('2d');\n      this.pixelContext_ = pixelContext;\n    }\n\n    pixelContext.clearRect(0, 0, 1, 1);\n    var data;\n\n    try {\n      pixelContext.drawImage(context.canvas, x, y, 1, 1, 0, 0, 1, 1);\n      data = pixelContext.getImageData(0, 0, 1, 1).data;\n    } catch (err) {\n      if (err.name === 'SecurityError') {\n        // tainted canvas, we assume there is data at the given pixel (although there might not be)\n        this.pixelContext_ = null;\n        return new Uint8Array();\n      }\n\n      return data;\n    }\n\n    if (data[3] === 0) {\n      return null;\n    }\n\n    return data;\n  };\n  /**\n   * Clean up.\n   */\n\n\n  CanvasLayerRenderer.prototype.disposeInternal = function () {\n    delete this.frameState;\n\n    _super.prototype.disposeInternal.call(this);\n  };\n\n  return CanvasLayerRenderer;\n}(LayerRenderer);\n\nexport default CanvasLayerRenderer;","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","LayerRenderer","RenderEvent","RenderEventType","apply","applyTransform","compose","composeTransform","createTransform","asArray","containsCoordinate","getBottomLeft","getBottomRight","getTopLeft","getTopRight","createCanvasContext2D","equals","canvasPool","pixelContext","createPixelContext","canvas","document","createElement","width","height","getContext","CanvasLayerRenderer","_super","layer","_this","container","renderedResolution","tempTransform","pixelTransform","inversePixelTransform","context","containerReused","pixelContext_","frameState","getImageData","image","col","row","clearRect","data","drawImage","err","getBackground","getLayer","background","viewState","resolution","undefined","useContainer","target","transform","opt_backgroundColor","layerClassName","getClassName","className","style","backgroundColor","firstElementChild","HTMLCanvasElement","position","appendChild","left","transformOrigin","clipUnrotated","extent","topLeft","topRight","bottomRight","bottomLeft","coordinateToPixelTransform","inverted","save","beginPath","moveTo","Math","round","lineTo","clip","dispatchRenderEvent_","type","hasListener","event_1","dispatchEvent","preRender","PRERENDER","postRender","POSTRENDER","getRenderTransform","center","rotation","pixelRatio","offsetX","dx1","dy1","sx","sy","dx2","dy2","getDataAtPixel","pixel","hitTolerance","renderPixel","slice","layerExtent","getExtent","renderCoordinate","pixelToCoordinateTransform","x","y","pixelCanvas","name","Uint8Array","disposeInternal"],"sources":["/home/asura/github/smartcity/source/node_modules/ol/renderer/canvas/Layer.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/renderer/canvas/Layer\n */\nimport LayerRenderer from '../Layer.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport { apply as applyTransform, compose as composeTransform, create as createTransform, } from '../../transform.js';\nimport { asArray } from '../../color.js';\nimport { containsCoordinate, getBottomLeft, getBottomRight, getTopLeft, getTopRight, } from '../../extent.js';\nimport { createCanvasContext2D } from '../../dom.js';\nimport { equals } from '../../array.js';\n/**\n * @type {Array<HTMLCanvasElement>}\n */\nexport var canvasPool = [];\n/**\n * @type {CanvasRenderingContext2D}\n */\nvar pixelContext = null;\nfunction createPixelContext() {\n    var canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = 1;\n    pixelContext = canvas.getContext('2d');\n}\n/**\n * @abstract\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n * @extends {LayerRenderer<LayerType>}\n */\nvar CanvasLayerRenderer = /** @class */ (function (_super) {\n    __extends(CanvasLayerRenderer, _super);\n    /**\n     * @param {LayerType} layer Layer.\n     */\n    function CanvasLayerRenderer(layer) {\n        var _this = _super.call(this, layer) || this;\n        /**\n         * @protected\n         * @type {HTMLElement}\n         */\n        _this.container = null;\n        /**\n         * @protected\n         * @type {number}\n         */\n        _this.renderedResolution;\n        /**\n         * A temporary transform.  The values in this transform should only be used in a\n         * function that sets the values.\n         * @protected\n         * @type {import(\"../../transform.js\").Transform}\n         */\n        _this.tempTransform = createTransform();\n        /**\n         * The transform for rendered pixels to viewport CSS pixels.  This transform must\n         * be set when rendering a frame and may be used by other functions after rendering.\n         * @protected\n         * @type {import(\"../../transform.js\").Transform}\n         */\n        _this.pixelTransform = createTransform();\n        /**\n         * The transform for viewport CSS pixels to rendered pixels.  This transform must\n         * be set when rendering a frame and may be used by other functions after rendering.\n         * @protected\n         * @type {import(\"../../transform.js\").Transform}\n         */\n        _this.inversePixelTransform = createTransform();\n        /**\n         * @type {CanvasRenderingContext2D}\n         */\n        _this.context = null;\n        /**\n         * @type {boolean}\n         */\n        _this.containerReused = false;\n        /**\n         * @private\n         * @type {CanvasRenderingContext2D}\n         */\n        _this.pixelContext_ = null;\n        /**\n         * @protected\n         * @type {import(\"../../PluggableMap.js\").FrameState|null}\n         */\n        _this.frameState = null;\n        return _this;\n    }\n    /**\n     * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\n     * @param {number} col The column index.\n     * @param {number} row The row index.\n     * @return {Uint8ClampedArray|null} The image data.\n     */\n    CanvasLayerRenderer.prototype.getImageData = function (image, col, row) {\n        if (!pixelContext) {\n            createPixelContext();\n        }\n        pixelContext.clearRect(0, 0, 1, 1);\n        var data;\n        try {\n            pixelContext.drawImage(image, col, row, 1, 1, 0, 0, 1, 1);\n            data = pixelContext.getImageData(0, 0, 1, 1).data;\n        }\n        catch (err) {\n            pixelContext = null;\n            return null;\n        }\n        return data;\n    };\n    /**\n     * @param {import('../../PluggableMap.js').FrameState} frameState Frame state.\n     * @return {string} Background color.\n     */\n    CanvasLayerRenderer.prototype.getBackground = function (frameState) {\n        var layer = this.getLayer();\n        var background = layer.getBackground();\n        if (typeof background === 'function') {\n            background = background(frameState.viewState.resolution);\n        }\n        return background || undefined;\n    };\n    /**\n     * Get a rendering container from an existing target, if compatible.\n     * @param {HTMLElement} target Potential render target.\n     * @param {string} transform CSS Transform.\n     * @param {string} [opt_backgroundColor] Background color.\n     */\n    CanvasLayerRenderer.prototype.useContainer = function (target, transform, opt_backgroundColor) {\n        var layerClassName = this.getLayer().getClassName();\n        var container, context;\n        if (target &&\n            target.className === layerClassName &&\n            (!opt_backgroundColor ||\n                (target &&\n                    target.style.backgroundColor &&\n                    equals(asArray(target.style.backgroundColor), asArray(opt_backgroundColor))))) {\n            var canvas = target.firstElementChild;\n            if (canvas instanceof HTMLCanvasElement) {\n                context = canvas.getContext('2d');\n            }\n        }\n        if (context && context.canvas.style.transform === transform) {\n            // Container of the previous layer renderer can be used.\n            this.container = target;\n            this.context = context;\n            this.containerReused = true;\n        }\n        else if (this.containerReused) {\n            // Previously reused container cannot be used any more.\n            this.container = null;\n            this.context = null;\n            this.containerReused = false;\n        }\n        if (!this.container) {\n            container = document.createElement('div');\n            container.className = layerClassName;\n            var style = container.style;\n            style.position = 'absolute';\n            style.width = '100%';\n            style.height = '100%';\n            context = createCanvasContext2D();\n            var canvas = context.canvas;\n            container.appendChild(canvas);\n            style = canvas.style;\n            style.position = 'absolute';\n            style.left = '0';\n            style.transformOrigin = 'top left';\n            this.container = container;\n            this.context = context;\n        }\n        if (!this.containerReused &&\n            opt_backgroundColor &&\n            !this.container.style.backgroundColor) {\n            this.container.style.backgroundColor = opt_backgroundColor;\n        }\n    };\n    /**\n     * @param {CanvasRenderingContext2D} context Context.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {import(\"../../extent.js\").Extent} extent Clip extent.\n     * @protected\n     */\n    CanvasLayerRenderer.prototype.clipUnrotated = function (context, frameState, extent) {\n        var topLeft = getTopLeft(extent);\n        var topRight = getTopRight(extent);\n        var bottomRight = getBottomRight(extent);\n        var bottomLeft = getBottomLeft(extent);\n        applyTransform(frameState.coordinateToPixelTransform, topLeft);\n        applyTransform(frameState.coordinateToPixelTransform, topRight);\n        applyTransform(frameState.coordinateToPixelTransform, bottomRight);\n        applyTransform(frameState.coordinateToPixelTransform, bottomLeft);\n        var inverted = this.inversePixelTransform;\n        applyTransform(inverted, topLeft);\n        applyTransform(inverted, topRight);\n        applyTransform(inverted, bottomRight);\n        applyTransform(inverted, bottomLeft);\n        context.save();\n        context.beginPath();\n        context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));\n        context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));\n        context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));\n        context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));\n        context.clip();\n    };\n    /**\n     * @param {import(\"../../render/EventType.js\").default} type Event type.\n     * @param {CanvasRenderingContext2D} context Context.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @private\n     */\n    CanvasLayerRenderer.prototype.dispatchRenderEvent_ = function (type, context, frameState) {\n        var layer = this.getLayer();\n        if (layer.hasListener(type)) {\n            var event_1 = new RenderEvent(type, this.inversePixelTransform, frameState, context);\n            layer.dispatchEvent(event_1);\n        }\n    };\n    /**\n     * @param {CanvasRenderingContext2D} context Context.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @protected\n     */\n    CanvasLayerRenderer.prototype.preRender = function (context, frameState) {\n        this.frameState = frameState;\n        this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\n    };\n    /**\n     * @param {CanvasRenderingContext2D} context Context.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @protected\n     */\n    CanvasLayerRenderer.prototype.postRender = function (context, frameState) {\n        this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\n    };\n    /**\n     * Creates a transform for rendering to an element that will be rotated after rendering.\n     * @param {import(\"../../coordinate.js\").Coordinate} center Center.\n     * @param {number} resolution Resolution.\n     * @param {number} rotation Rotation.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {number} width Width of the rendered element (in pixels).\n     * @param {number} height Height of the rendered element (in pixels).\n     * @param {number} offsetX Offset on the x-axis in view coordinates.\n     * @protected\n     * @return {!import(\"../../transform.js\").Transform} Transform.\n     */\n    CanvasLayerRenderer.prototype.getRenderTransform = function (center, resolution, rotation, pixelRatio, width, height, offsetX) {\n        var dx1 = width / 2;\n        var dy1 = height / 2;\n        var sx = pixelRatio / resolution;\n        var sy = -sx;\n        var dx2 = -center[0] + offsetX;\n        var dy2 = -center[1];\n        return composeTransform(this.tempTransform, dx1, dy1, sx, sy, -rotation, dx2, dy2);\n    };\n    /**\n     * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState FrameState.\n     * @param {number} hitTolerance Hit tolerance in pixels.\n     * @return {Uint8ClampedArray|Uint8Array} The result.  If there is no data at the pixel\n     *    location, null will be returned.  If there is data, but pixel values cannot be\n     *    returned, and empty array will be returned.\n     */\n    CanvasLayerRenderer.prototype.getDataAtPixel = function (pixel, frameState, hitTolerance) {\n        var renderPixel = applyTransform(this.inversePixelTransform, pixel.slice());\n        var context = this.context;\n        var layer = this.getLayer();\n        var layerExtent = layer.getExtent();\n        if (layerExtent) {\n            var renderCoordinate = applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n            /** get only data inside of the layer extent */\n            if (!containsCoordinate(layerExtent, renderCoordinate)) {\n                return null;\n            }\n        }\n        var x = Math.round(renderPixel[0]);\n        var y = Math.round(renderPixel[1]);\n        var pixelContext = this.pixelContext_;\n        if (!pixelContext) {\n            var pixelCanvas = document.createElement('canvas');\n            pixelCanvas.width = 1;\n            pixelCanvas.height = 1;\n            pixelContext = pixelCanvas.getContext('2d');\n            this.pixelContext_ = pixelContext;\n        }\n        pixelContext.clearRect(0, 0, 1, 1);\n        var data;\n        try {\n            pixelContext.drawImage(context.canvas, x, y, 1, 1, 0, 0, 1, 1);\n            data = pixelContext.getImageData(0, 0, 1, 1).data;\n        }\n        catch (err) {\n            if (err.name === 'SecurityError') {\n                // tainted canvas, we assume there is data at the given pixel (although there might not be)\n                this.pixelContext_ = null;\n                return new Uint8Array();\n            }\n            return data;\n        }\n        if (data[3] === 0) {\n            return null;\n        }\n        return data;\n    };\n    /**\n     * Clean up.\n     */\n    CanvasLayerRenderer.prototype.disposeInternal = function () {\n        delete this.frameState;\n        _super.prototype.disposeInternal.call(this);\n    };\n    return CanvasLayerRenderer;\n}(LayerRenderer));\nexport default CanvasLayerRenderer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}