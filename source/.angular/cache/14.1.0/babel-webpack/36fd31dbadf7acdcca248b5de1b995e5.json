{"ast":null,"code":"/**\n * @module ol/geom/flat/segments\n */\n\n/**\n * This function calls `callback` for each segment of the flat coordinates\n * array. If the callback returns a truthy value the function returns that\n * value immediately. Otherwise the function returns `false`.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {function(import(\"../../coordinate.js\").Coordinate, import(\"../../coordinate.js\").Coordinate): T} callback Function\n *     called for each segment.\n * @return {T|boolean} Value.\n * @template T\n */\nexport function forEach(flatCoordinates, offset, end, stride, callback) {\n  var ret;\n  offset += stride;\n\n  for (; offset < end; offset += stride) {\n    ret = callback(flatCoordinates.slice(offset - stride, offset), flatCoordinates.slice(offset, offset + stride));\n\n    if (ret) {\n      return ret;\n    }\n  }\n\n  return false;\n}","map":{"version":3,"names":["forEach","flatCoordinates","offset","end","stride","callback","ret","slice"],"sources":["/home/asura/github/smartcity/source/node_modules/ol/geom/flat/segments.js"],"sourcesContent":["/**\n * @module ol/geom/flat/segments\n */\n/**\n * This function calls `callback` for each segment of the flat coordinates\n * array. If the callback returns a truthy value the function returns that\n * value immediately. Otherwise the function returns `false`.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {function(import(\"../../coordinate.js\").Coordinate, import(\"../../coordinate.js\").Coordinate): T} callback Function\n *     called for each segment.\n * @return {T|boolean} Value.\n * @template T\n */\nexport function forEach(flatCoordinates, offset, end, stride, callback) {\n    var ret;\n    offset += stride;\n    for (; offset < end; offset += stride) {\n        ret = callback(flatCoordinates.slice(offset - stride, offset), flatCoordinates.slice(offset, offset + stride));\n        if (ret) {\n            return ret;\n        }\n    }\n    return false;\n}\n"],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,OAAT,CAAiBC,eAAjB,EAAkCC,MAAlC,EAA0CC,GAA1C,EAA+CC,MAA/C,EAAuDC,QAAvD,EAAiE;EACpE,IAAIC,GAAJ;EACAJ,MAAM,IAAIE,MAAV;;EACA,OAAOF,MAAM,GAAGC,GAAhB,EAAqBD,MAAM,IAAIE,MAA/B,EAAuC;IACnCE,GAAG,GAAGD,QAAQ,CAACJ,eAAe,CAACM,KAAhB,CAAsBL,MAAM,GAAGE,MAA/B,EAAuCF,MAAvC,CAAD,EAAiDD,eAAe,CAACM,KAAhB,CAAsBL,MAAtB,EAA8BA,MAAM,GAAGE,MAAvC,CAAjD,CAAd;;IACA,IAAIE,GAAJ,EAAS;MACL,OAAOA,GAAP;IACH;EACJ;;EACD,OAAO,KAAP;AACH"},"metadata":{},"sourceType":"module"}