{"ast":null,"code":"/**\n * @module ol/format/Feature\n */\nimport Units from '../proj/Units.js';\nimport { abstract } from '../util.js';\nimport { assign } from '../obj.js';\nimport { equivalent as equivalentProjection, get as getProjection, transformExtent } from '../proj.js';\n/**\n * @typedef {Object} ReadOptions\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection] Projection of the data we are reading.\n * If not provided, the projection will be derived from the data (where possible) or\n * the `dataProjection` of the format is assigned (where set). If the projection\n * can not be derived from the data and if no `dataProjection` is set for a format,\n * the features will not be reprojected.\n * @property {import(\"../extent.js\").Extent} [extent] Tile extent in map units of the tile being read.\n * This is only required when reading data with tile pixels as geometry units. When configured,\n * a `dataProjection` with `TILE_PIXELS` as `units` and the tile's pixel extent as `extent` needs to be\n * provided.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection of the feature geometries\n * created by the format reader. If not provided, features will be returned in the\n * `dataProjection`.\n */\n\n/**\n * @typedef {Object} WriteOptions\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection] Projection of the data we are writing.\n * If not provided, the `dataProjection` of the format is assigned (where set).\n * If no `dataProjection` is set for a format, the features will be returned\n * in the `featureProjection`.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection of the feature geometries\n * that will be serialized by the format writer. If not provided, geometries are assumed\n * to be in the `dataProjection` if that is set; in other words, they are not transformed.\n * @property {boolean} [rightHanded] When writing geometries, follow the right-hand\n * rule for linear ring orientation.  This means that polygons will have counter-clockwise\n * exterior rings and clockwise interior rings.  By default, coordinates are serialized\n * as they are provided at construction.  If `true`, the right-hand rule will\n * be applied.  If `false`, the left-hand rule will be applied (clockwise for\n * exterior and counter-clockwise for interior rings).  Note that not all\n * formats support this.  The GeoJSON format does use this property when writing\n * geometries.\n * @property {number} [decimals] Maximum number of decimal places for coordinates.\n * Coordinates are stored internally as floats, but floating-point arithmetic can create\n * coordinates with a large number of decimal places, not generally wanted on output.\n * Set a number here to round coordinates. Can also be used to ensure that\n * coordinates read in can be written back out with the same number of decimals.\n * Default is no rounding.\n */\n\n/**\n * @typedef {'arraybuffer' | 'json' | 'text' | 'xml'} Type\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for feature formats.\n * {@link module:ol/format/Feature~FeatureFormat} subclasses provide the ability to decode and encode\n * {@link module:ol/Feature~Feature} objects from a variety of commonly used geospatial\n * file formats.  See the documentation for each format for more details.\n *\n * @abstract\n * @api\n */\n\nvar FeatureFormat =\n/** @class */\nfunction () {\n  function FeatureFormat() {\n    /**\n     * @protected\n     * @type {import(\"../proj/Projection.js\").default|undefined}\n     */\n    this.dataProjection = undefined;\n    /**\n     * @protected\n     * @type {import(\"../proj/Projection.js\").default|undefined}\n     */\n\n    this.defaultFeatureProjection = undefined;\n    /**\n     * A list media types supported by the format in descending order of preference.\n     * @type {Array<string>}\n     */\n\n    this.supportedMediaTypes = null;\n  }\n  /**\n   * Adds the data projection to the read options.\n   * @param {Document|Element|Object|string} source Source.\n   * @param {ReadOptions} [opt_options] Options.\n   * @return {ReadOptions|undefined} Options.\n   * @protected\n   */\n\n\n  FeatureFormat.prototype.getReadOptions = function (source, opt_options) {\n    var options;\n\n    if (opt_options) {\n      var dataProjection = opt_options.dataProjection ? getProjection(opt_options.dataProjection) : this.readProjection(source);\n\n      if (opt_options.extent && dataProjection && dataProjection.getUnits() === Units.TILE_PIXELS) {\n        dataProjection = getProjection(dataProjection);\n        dataProjection.setWorldExtent(opt_options.extent);\n      }\n\n      options = {\n        dataProjection: dataProjection,\n        featureProjection: opt_options.featureProjection\n      };\n    }\n\n    return this.adaptOptions(options);\n  };\n  /**\n   * Sets the `dataProjection` on the options, if no `dataProjection`\n   * is set.\n   * @param {WriteOptions|ReadOptions|undefined} options\n   *     Options.\n   * @protected\n   * @return {WriteOptions|ReadOptions|undefined}\n   *     Updated options.\n   */\n\n\n  FeatureFormat.prototype.adaptOptions = function (options) {\n    return assign({\n      dataProjection: this.dataProjection,\n      featureProjection: this.defaultFeatureProjection\n    }, options);\n  };\n  /**\n   * @abstract\n   * @return {Type} The format type.\n   */\n\n\n  FeatureFormat.prototype.getType = function () {\n    return abstract();\n  };\n  /**\n   * Read a single feature from a source.\n   *\n   * @abstract\n   * @param {Document|Element|Object|string} source Source.\n   * @param {ReadOptions} [opt_options] Read options.\n   * @return {import(\"../Feature.js\").FeatureLike} Feature.\n   */\n\n\n  FeatureFormat.prototype.readFeature = function (source, opt_options) {\n    return abstract();\n  };\n  /**\n   * Read all features from a source.\n   *\n   * @abstract\n   * @param {Document|Element|ArrayBuffer|Object|string} source Source.\n   * @param {ReadOptions} [opt_options] Read options.\n   * @return {Array<import(\"../Feature.js\").FeatureLike>} Features.\n   */\n\n\n  FeatureFormat.prototype.readFeatures = function (source, opt_options) {\n    return abstract();\n  };\n  /**\n   * Read a single geometry from a source.\n   *\n   * @abstract\n   * @param {Document|Element|Object|string} source Source.\n   * @param {ReadOptions} [opt_options] Read options.\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n\n\n  FeatureFormat.prototype.readGeometry = function (source, opt_options) {\n    return abstract();\n  };\n  /**\n   * Read the projection from a source.\n   *\n   * @abstract\n   * @param {Document|Element|Object|string} source Source.\n   * @return {import(\"../proj/Projection.js\").default|undefined} Projection.\n   */\n\n\n  FeatureFormat.prototype.readProjection = function (source) {\n    return abstract();\n  };\n  /**\n   * Encode a feature in this format.\n   *\n   * @abstract\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {WriteOptions} [opt_options] Write options.\n   * @return {string|ArrayBuffer} Result.\n   */\n\n\n  FeatureFormat.prototype.writeFeature = function (feature, opt_options) {\n    return abstract();\n  };\n  /**\n   * Encode an array of features in this format.\n   *\n   * @abstract\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {WriteOptions} [opt_options] Write options.\n   * @return {string|ArrayBuffer} Result.\n   */\n\n\n  FeatureFormat.prototype.writeFeatures = function (features, opt_options) {\n    return abstract();\n  };\n  /**\n   * Write a single geometry in this format.\n   *\n   * @abstract\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {WriteOptions} [opt_options] Write options.\n   * @return {string|ArrayBuffer} Result.\n   */\n\n\n  FeatureFormat.prototype.writeGeometry = function (geometry, opt_options) {\n    return abstract();\n  };\n\n  return FeatureFormat;\n}();\n\nexport default FeatureFormat;\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {boolean} write Set to true for writing, false for reading.\n * @param {WriteOptions|ReadOptions} [opt_options] Options.\n * @return {import(\"../geom/Geometry.js\").default} Transformed geometry.\n */\n\nexport function transformGeometryWithOptions(geometry, write, opt_options) {\n  var featureProjection = opt_options ? getProjection(opt_options.featureProjection) : null;\n  var dataProjection = opt_options ? getProjection(opt_options.dataProjection) : null;\n  var transformed;\n\n  if (featureProjection && dataProjection && !equivalentProjection(featureProjection, dataProjection)) {\n    transformed = (write ? geometry.clone() : geometry).transform(write ? featureProjection : dataProjection, write ? dataProjection : featureProjection);\n  } else {\n    transformed = geometry;\n  }\n\n  if (write && opt_options &&\n  /** @type {WriteOptions} */\n  opt_options.decimals !== undefined) {\n    var power_1 = Math.pow(10,\n    /** @type {WriteOptions} */\n    opt_options.decimals); // if decimals option on write, round each coordinate appropriately\n\n    /**\n     * @param {Array<number>} coordinates Coordinates.\n     * @return {Array<number>} Transformed coordinates.\n     */\n\n    var transform = function (coordinates) {\n      for (var i = 0, ii = coordinates.length; i < ii; ++i) {\n        coordinates[i] = Math.round(coordinates[i] * power_1) / power_1;\n      }\n\n      return coordinates;\n    };\n\n    if (transformed === geometry) {\n      transformed = geometry.clone();\n    }\n\n    transformed.applyTransform(transform);\n  }\n\n  return transformed;\n}\n/**\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {ReadOptions} [opt_options] Read options.\n * @return {import(\"../extent.js\").Extent} Transformed extent.\n */\n\nexport function transformExtentWithOptions(extent, opt_options) {\n  var featureProjection = opt_options ? getProjection(opt_options.featureProjection) : null;\n  var dataProjection = opt_options ? getProjection(opt_options.dataProjection) : null;\n\n  if (featureProjection && dataProjection && !equivalentProjection(featureProjection, dataProjection)) {\n    return transformExtent(extent, dataProjection, featureProjection);\n  } else {\n    return extent;\n  }\n}","map":{"version":3,"names":["Units","abstract","assign","equivalent","equivalentProjection","get","getProjection","transformExtent","FeatureFormat","dataProjection","undefined","defaultFeatureProjection","supportedMediaTypes","prototype","getReadOptions","source","opt_options","options","readProjection","extent","getUnits","TILE_PIXELS","setWorldExtent","featureProjection","adaptOptions","getType","readFeature","readFeatures","readGeometry","writeFeature","feature","writeFeatures","features","writeGeometry","geometry","transformGeometryWithOptions","write","transformed","clone","transform","decimals","power_1","Math","pow","coordinates","i","ii","length","round","applyTransform","transformExtentWithOptions"],"sources":["/home/asura/github/smartcity/source/node_modules/ol/format/Feature.js"],"sourcesContent":["/**\n * @module ol/format/Feature\n */\nimport Units from '../proj/Units.js';\nimport { abstract } from '../util.js';\nimport { assign } from '../obj.js';\nimport { equivalent as equivalentProjection, get as getProjection, transformExtent, } from '../proj.js';\n/**\n * @typedef {Object} ReadOptions\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection] Projection of the data we are reading.\n * If not provided, the projection will be derived from the data (where possible) or\n * the `dataProjection` of the format is assigned (where set). If the projection\n * can not be derived from the data and if no `dataProjection` is set for a format,\n * the features will not be reprojected.\n * @property {import(\"../extent.js\").Extent} [extent] Tile extent in map units of the tile being read.\n * This is only required when reading data with tile pixels as geometry units. When configured,\n * a `dataProjection` with `TILE_PIXELS` as `units` and the tile's pixel extent as `extent` needs to be\n * provided.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection of the feature geometries\n * created by the format reader. If not provided, features will be returned in the\n * `dataProjection`.\n */\n/**\n * @typedef {Object} WriteOptions\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection] Projection of the data we are writing.\n * If not provided, the `dataProjection` of the format is assigned (where set).\n * If no `dataProjection` is set for a format, the features will be returned\n * in the `featureProjection`.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection of the feature geometries\n * that will be serialized by the format writer. If not provided, geometries are assumed\n * to be in the `dataProjection` if that is set; in other words, they are not transformed.\n * @property {boolean} [rightHanded] When writing geometries, follow the right-hand\n * rule for linear ring orientation.  This means that polygons will have counter-clockwise\n * exterior rings and clockwise interior rings.  By default, coordinates are serialized\n * as they are provided at construction.  If `true`, the right-hand rule will\n * be applied.  If `false`, the left-hand rule will be applied (clockwise for\n * exterior and counter-clockwise for interior rings).  Note that not all\n * formats support this.  The GeoJSON format does use this property when writing\n * geometries.\n * @property {number} [decimals] Maximum number of decimal places for coordinates.\n * Coordinates are stored internally as floats, but floating-point arithmetic can create\n * coordinates with a large number of decimal places, not generally wanted on output.\n * Set a number here to round coordinates. Can also be used to ensure that\n * coordinates read in can be written back out with the same number of decimals.\n * Default is no rounding.\n */\n/**\n * @typedef {'arraybuffer' | 'json' | 'text' | 'xml'} Type\n */\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for feature formats.\n * {@link module:ol/format/Feature~FeatureFormat} subclasses provide the ability to decode and encode\n * {@link module:ol/Feature~Feature} objects from a variety of commonly used geospatial\n * file formats.  See the documentation for each format for more details.\n *\n * @abstract\n * @api\n */\nvar FeatureFormat = /** @class */ (function () {\n    function FeatureFormat() {\n        /**\n         * @protected\n         * @type {import(\"../proj/Projection.js\").default|undefined}\n         */\n        this.dataProjection = undefined;\n        /**\n         * @protected\n         * @type {import(\"../proj/Projection.js\").default|undefined}\n         */\n        this.defaultFeatureProjection = undefined;\n        /**\n         * A list media types supported by the format in descending order of preference.\n         * @type {Array<string>}\n         */\n        this.supportedMediaTypes = null;\n    }\n    /**\n     * Adds the data projection to the read options.\n     * @param {Document|Element|Object|string} source Source.\n     * @param {ReadOptions} [opt_options] Options.\n     * @return {ReadOptions|undefined} Options.\n     * @protected\n     */\n    FeatureFormat.prototype.getReadOptions = function (source, opt_options) {\n        var options;\n        if (opt_options) {\n            var dataProjection = opt_options.dataProjection\n                ? getProjection(opt_options.dataProjection)\n                : this.readProjection(source);\n            if (opt_options.extent &&\n                dataProjection &&\n                dataProjection.getUnits() === Units.TILE_PIXELS) {\n                dataProjection = getProjection(dataProjection);\n                dataProjection.setWorldExtent(opt_options.extent);\n            }\n            options = {\n                dataProjection: dataProjection,\n                featureProjection: opt_options.featureProjection,\n            };\n        }\n        return this.adaptOptions(options);\n    };\n    /**\n     * Sets the `dataProjection` on the options, if no `dataProjection`\n     * is set.\n     * @param {WriteOptions|ReadOptions|undefined} options\n     *     Options.\n     * @protected\n     * @return {WriteOptions|ReadOptions|undefined}\n     *     Updated options.\n     */\n    FeatureFormat.prototype.adaptOptions = function (options) {\n        return assign({\n            dataProjection: this.dataProjection,\n            featureProjection: this.defaultFeatureProjection,\n        }, options);\n    };\n    /**\n     * @abstract\n     * @return {Type} The format type.\n     */\n    FeatureFormat.prototype.getType = function () {\n        return abstract();\n    };\n    /**\n     * Read a single feature from a source.\n     *\n     * @abstract\n     * @param {Document|Element|Object|string} source Source.\n     * @param {ReadOptions} [opt_options] Read options.\n     * @return {import(\"../Feature.js\").FeatureLike} Feature.\n     */\n    FeatureFormat.prototype.readFeature = function (source, opt_options) {\n        return abstract();\n    };\n    /**\n     * Read all features from a source.\n     *\n     * @abstract\n     * @param {Document|Element|ArrayBuffer|Object|string} source Source.\n     * @param {ReadOptions} [opt_options] Read options.\n     * @return {Array<import(\"../Feature.js\").FeatureLike>} Features.\n     */\n    FeatureFormat.prototype.readFeatures = function (source, opt_options) {\n        return abstract();\n    };\n    /**\n     * Read a single geometry from a source.\n     *\n     * @abstract\n     * @param {Document|Element|Object|string} source Source.\n     * @param {ReadOptions} [opt_options] Read options.\n     * @return {import(\"../geom/Geometry.js\").default} Geometry.\n     */\n    FeatureFormat.prototype.readGeometry = function (source, opt_options) {\n        return abstract();\n    };\n    /**\n     * Read the projection from a source.\n     *\n     * @abstract\n     * @param {Document|Element|Object|string} source Source.\n     * @return {import(\"../proj/Projection.js\").default|undefined} Projection.\n     */\n    FeatureFormat.prototype.readProjection = function (source) {\n        return abstract();\n    };\n    /**\n     * Encode a feature in this format.\n     *\n     * @abstract\n     * @param {import(\"../Feature.js\").default} feature Feature.\n     * @param {WriteOptions} [opt_options] Write options.\n     * @return {string|ArrayBuffer} Result.\n     */\n    FeatureFormat.prototype.writeFeature = function (feature, opt_options) {\n        return abstract();\n    };\n    /**\n     * Encode an array of features in this format.\n     *\n     * @abstract\n     * @param {Array<import(\"../Feature.js\").default>} features Features.\n     * @param {WriteOptions} [opt_options] Write options.\n     * @return {string|ArrayBuffer} Result.\n     */\n    FeatureFormat.prototype.writeFeatures = function (features, opt_options) {\n        return abstract();\n    };\n    /**\n     * Write a single geometry in this format.\n     *\n     * @abstract\n     * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n     * @param {WriteOptions} [opt_options] Write options.\n     * @return {string|ArrayBuffer} Result.\n     */\n    FeatureFormat.prototype.writeGeometry = function (geometry, opt_options) {\n        return abstract();\n    };\n    return FeatureFormat;\n}());\nexport default FeatureFormat;\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {boolean} write Set to true for writing, false for reading.\n * @param {WriteOptions|ReadOptions} [opt_options] Options.\n * @return {import(\"../geom/Geometry.js\").default} Transformed geometry.\n */\nexport function transformGeometryWithOptions(geometry, write, opt_options) {\n    var featureProjection = opt_options\n        ? getProjection(opt_options.featureProjection)\n        : null;\n    var dataProjection = opt_options\n        ? getProjection(opt_options.dataProjection)\n        : null;\n    var transformed;\n    if (featureProjection &&\n        dataProjection &&\n        !equivalentProjection(featureProjection, dataProjection)) {\n        transformed = (write ? geometry.clone() : geometry).transform(write ? featureProjection : dataProjection, write ? dataProjection : featureProjection);\n    }\n    else {\n        transformed = geometry;\n    }\n    if (write &&\n        opt_options &&\n        /** @type {WriteOptions} */ (opt_options).decimals !== undefined) {\n        var power_1 = Math.pow(10, \n        /** @type {WriteOptions} */ (opt_options).decimals);\n        // if decimals option on write, round each coordinate appropriately\n        /**\n         * @param {Array<number>} coordinates Coordinates.\n         * @return {Array<number>} Transformed coordinates.\n         */\n        var transform = function (coordinates) {\n            for (var i = 0, ii = coordinates.length; i < ii; ++i) {\n                coordinates[i] = Math.round(coordinates[i] * power_1) / power_1;\n            }\n            return coordinates;\n        };\n        if (transformed === geometry) {\n            transformed = geometry.clone();\n        }\n        transformed.applyTransform(transform);\n    }\n    return transformed;\n}\n/**\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {ReadOptions} [opt_options] Read options.\n * @return {import(\"../extent.js\").Extent} Transformed extent.\n */\nexport function transformExtentWithOptions(extent, opt_options) {\n    var featureProjection = opt_options\n        ? getProjection(opt_options.featureProjection)\n        : null;\n    var dataProjection = opt_options\n        ? getProjection(opt_options.dataProjection)\n        : null;\n    if (featureProjection &&\n        dataProjection &&\n        !equivalentProjection(featureProjection, dataProjection)) {\n        return transformExtent(extent, dataProjection, featureProjection);\n    }\n    else {\n        return extent;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,KAAP,MAAkB,kBAAlB;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,UAAU,IAAIC,oBAAvB,EAA6CC,GAAG,IAAIC,aAApD,EAAmEC,eAAnE,QAA2F,YAA3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,aAAa;AAAG;AAAe,YAAY;EAC3C,SAASA,aAAT,GAAyB;IACrB;AACR;AACA;AACA;IACQ,KAAKC,cAAL,GAAsBC,SAAtB;IACA;AACR;AACA;AACA;;IACQ,KAAKC,wBAAL,GAAgCD,SAAhC;IACA;AACR;AACA;AACA;;IACQ,KAAKE,mBAAL,GAA2B,IAA3B;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIJ,aAAa,CAACK,SAAd,CAAwBC,cAAxB,GAAyC,UAAUC,MAAV,EAAkBC,WAAlB,EAA+B;IACpE,IAAIC,OAAJ;;IACA,IAAID,WAAJ,EAAiB;MACb,IAAIP,cAAc,GAAGO,WAAW,CAACP,cAAZ,GACfH,aAAa,CAACU,WAAW,CAACP,cAAb,CADE,GAEf,KAAKS,cAAL,CAAoBH,MAApB,CAFN;;MAGA,IAAIC,WAAW,CAACG,MAAZ,IACAV,cADA,IAEAA,cAAc,CAACW,QAAf,OAA8BpB,KAAK,CAACqB,WAFxC,EAEqD;QACjDZ,cAAc,GAAGH,aAAa,CAACG,cAAD,CAA9B;QACAA,cAAc,CAACa,cAAf,CAA8BN,WAAW,CAACG,MAA1C;MACH;;MACDF,OAAO,GAAG;QACNR,cAAc,EAAEA,cADV;QAENc,iBAAiB,EAAEP,WAAW,CAACO;MAFzB,CAAV;IAIH;;IACD,OAAO,KAAKC,YAAL,CAAkBP,OAAlB,CAAP;EACH,CAlBD;EAmBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIT,aAAa,CAACK,SAAd,CAAwBW,YAAxB,GAAuC,UAAUP,OAAV,EAAmB;IACtD,OAAOf,MAAM,CAAC;MACVO,cAAc,EAAE,KAAKA,cADX;MAEVc,iBAAiB,EAAE,KAAKZ;IAFd,CAAD,EAGVM,OAHU,CAAb;EAIH,CALD;EAMA;AACJ;AACA;AACA;;;EACIT,aAAa,CAACK,SAAd,CAAwBY,OAAxB,GAAkC,YAAY;IAC1C,OAAOxB,QAAQ,EAAf;EACH,CAFD;EAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIO,aAAa,CAACK,SAAd,CAAwBa,WAAxB,GAAsC,UAAUX,MAAV,EAAkBC,WAAlB,EAA+B;IACjE,OAAOf,QAAQ,EAAf;EACH,CAFD;EAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIO,aAAa,CAACK,SAAd,CAAwBc,YAAxB,GAAuC,UAAUZ,MAAV,EAAkBC,WAAlB,EAA+B;IAClE,OAAOf,QAAQ,EAAf;EACH,CAFD;EAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIO,aAAa,CAACK,SAAd,CAAwBe,YAAxB,GAAuC,UAAUb,MAAV,EAAkBC,WAAlB,EAA+B;IAClE,OAAOf,QAAQ,EAAf;EACH,CAFD;EAGA;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIO,aAAa,CAACK,SAAd,CAAwBK,cAAxB,GAAyC,UAAUH,MAAV,EAAkB;IACvD,OAAOd,QAAQ,EAAf;EACH,CAFD;EAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIO,aAAa,CAACK,SAAd,CAAwBgB,YAAxB,GAAuC,UAAUC,OAAV,EAAmBd,WAAnB,EAAgC;IACnE,OAAOf,QAAQ,EAAf;EACH,CAFD;EAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIO,aAAa,CAACK,SAAd,CAAwBkB,aAAxB,GAAwC,UAAUC,QAAV,EAAoBhB,WAApB,EAAiC;IACrE,OAAOf,QAAQ,EAAf;EACH,CAFD;EAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIO,aAAa,CAACK,SAAd,CAAwBoB,aAAxB,GAAwC,UAAUC,QAAV,EAAoBlB,WAApB,EAAiC;IACrE,OAAOf,QAAQ,EAAf;EACH,CAFD;;EAGA,OAAOO,aAAP;AACH,CA/IkC,EAAnC;;AAgJA,eAAeA,aAAf;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS2B,4BAAT,CAAsCD,QAAtC,EAAgDE,KAAhD,EAAuDpB,WAAvD,EAAoE;EACvE,IAAIO,iBAAiB,GAAGP,WAAW,GAC7BV,aAAa,CAACU,WAAW,CAACO,iBAAb,CADgB,GAE7B,IAFN;EAGA,IAAId,cAAc,GAAGO,WAAW,GAC1BV,aAAa,CAACU,WAAW,CAACP,cAAb,CADa,GAE1B,IAFN;EAGA,IAAI4B,WAAJ;;EACA,IAAId,iBAAiB,IACjBd,cADA,IAEA,CAACL,oBAAoB,CAACmB,iBAAD,EAAoBd,cAApB,CAFzB,EAE8D;IAC1D4B,WAAW,GAAG,CAACD,KAAK,GAAGF,QAAQ,CAACI,KAAT,EAAH,GAAsBJ,QAA5B,EAAsCK,SAAtC,CAAgDH,KAAK,GAAGb,iBAAH,GAAuBd,cAA5E,EAA4F2B,KAAK,GAAG3B,cAAH,GAAoBc,iBAArH,CAAd;EACH,CAJD,MAKK;IACDc,WAAW,GAAGH,QAAd;EACH;;EACD,IAAIE,KAAK,IACLpB,WADA;EAEA;EAA6BA,WAAD,CAAcwB,QAAd,KAA2B9B,SAF3D,EAEsE;IAClE,IAAI+B,OAAO,GAAGC,IAAI,CAACC,GAAL,CAAS,EAAT;IACd;IAA6B3B,WAAD,CAAcwB,QAD5B,CAAd,CADkE,CAGlE;;IACA;AACR;AACA;AACA;;IACQ,IAAID,SAAS,GAAG,UAAUK,WAAV,EAAuB;MACnC,KAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGF,WAAW,CAACG,MAAjC,EAAyCF,CAAC,GAAGC,EAA7C,EAAiD,EAAED,CAAnD,EAAsD;QAClDD,WAAW,CAACC,CAAD,CAAX,GAAiBH,IAAI,CAACM,KAAL,CAAWJ,WAAW,CAACC,CAAD,CAAX,GAAiBJ,OAA5B,IAAuCA,OAAxD;MACH;;MACD,OAAOG,WAAP;IACH,CALD;;IAMA,IAAIP,WAAW,KAAKH,QAApB,EAA8B;MAC1BG,WAAW,GAAGH,QAAQ,CAACI,KAAT,EAAd;IACH;;IACDD,WAAW,CAACY,cAAZ,CAA2BV,SAA3B;EACH;;EACD,OAAOF,WAAP;AACH;AACD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASa,0BAAT,CAAoC/B,MAApC,EAA4CH,WAA5C,EAAyD;EAC5D,IAAIO,iBAAiB,GAAGP,WAAW,GAC7BV,aAAa,CAACU,WAAW,CAACO,iBAAb,CADgB,GAE7B,IAFN;EAGA,IAAId,cAAc,GAAGO,WAAW,GAC1BV,aAAa,CAACU,WAAW,CAACP,cAAb,CADa,GAE1B,IAFN;;EAGA,IAAIc,iBAAiB,IACjBd,cADA,IAEA,CAACL,oBAAoB,CAACmB,iBAAD,EAAoBd,cAApB,CAFzB,EAE8D;IAC1D,OAAOF,eAAe,CAACY,MAAD,EAASV,cAAT,EAAyBc,iBAAzB,CAAtB;EACH,CAJD,MAKK;IACD,OAAOJ,MAAP;EACH;AACJ"},"metadata":{},"sourceType":"module"}