{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/Overlay\n */\n\n\nimport BaseObject from './Object.js';\nimport MapEventType from './MapEventType.js';\nimport { CLASS_SELECTABLE } from './css.js';\nimport { containsExtent } from './extent.js';\nimport { listen, unlistenByKey } from './events.js';\nimport { outerHeight, outerWidth, removeChildren, removeNode } from './dom.js';\n/**\n * @typedef {'bottom-left' | 'bottom-center' | 'bottom-right' | 'center-left' | 'center-center' | 'center-right' | 'top-left' | 'top-center' | 'top-right'} Positioning\n * The overlay position: `'bottom-left'`, `'bottom-center'`,  `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, or `'top-right'`.\n */\n\n/**\n * @typedef {Object} Options\n * @property {number|string} [id] Set the overlay id. The overlay id can be used\n * with the {@link module:ol/Map~Map#getOverlayById} method.\n * @property {HTMLElement} [element] The overlay element.\n * @property {Array<number>} [offset=[0, 0]] Offsets in pixels used when positioning\n * the overlay. The first element in the\n * array is the horizontal offset. A positive value shifts the overlay right.\n * The second element in the array is the vertical offset. A positive value\n * shifts the overlay down.\n * @property {import(\"./coordinate.js\").Coordinate} [position] The overlay position\n * in map projection.\n * @property {Positioning} [positioning='top-left'] Defines how\n * the overlay is actually positioned with respect to its `position` property.\n * Possible values are `'bottom-left'`, `'bottom-center'`, `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, and `'top-right'`.\n * @property {boolean} [stopEvent=true] Whether event propagation to the map\n * viewport should be stopped. If `true` the overlay is placed in the same\n * container as that of the controls (CSS class name\n * `ol-overlaycontainer-stopevent`); if `false` it is placed in the container\n * with CSS class name specified by the `className` property.\n * @property {boolean} [insertFirst=true] Whether the overlay is inserted first\n * in the overlay container, or appended. If the overlay is placed in the same\n * container as that of the controls (see the `stopEvent` option) you will\n * probably set `insertFirst` to `true` so the overlay is displayed below the\n * controls.\n * @property {PanIntoViewOptions|boolean} [autoPan=false] Pan the map when calling\n * `setPosition`, so that the overlay is entirely visible in the current viewport?\n * If `true` (deprecated), then `autoPanAnimation` and `autoPanMargin` will be\n * used to determine the panning parameters; if an object is supplied then other\n * parameters are ignored.\n * @property {PanOptions} [autoPanAnimation] The animation options used to pan\n * the overlay into view. This animation is only used when `autoPan` is enabled.\n * A `duration` and `easing` may be provided to customize the animation.\n * Deprecated and ignored if `autoPan` is supplied as an object.\n * @property {number} [autoPanMargin=20] The margin (in pixels) between the\n * overlay and the borders of the map when autopanning. Deprecated and ignored\n * if `autoPan` is supplied as an object.\n * @property {PanIntoViewOptions} [autoPanOptions] The options to use for the\n * autoPan. This is only used when `autoPan` is enabled and has preference over\n * the individual `autoPanMargin` and `autoPanOptions`.\n * @property {string} [className='ol-overlay-container ol-selectable'] CSS class\n * name.\n */\n\n/**\n * @typedef {Object} PanOptions\n * @property {number} [duration=1000] The duration of the animation in\n * milliseconds.\n * @property {function(number):number} [easing] The easing function to use. Can\n * be one from {@link module:ol/easing} or a custom function.\n * Default is {@link module:ol/easing.inAndOut}.\n */\n\n/**\n * @typedef {Object} PanIntoViewOptions\n * @property {PanOptions} [animation={}] The animation parameters for the pan\n * @property {number} [margin=20] The margin (in pixels) between the\n * overlay and the borders of the map when panning into view.\n */\n\n/**\n * @enum {string}\n * @protected\n */\n\nvar Property = {\n  ELEMENT: 'element',\n  MAP: 'map',\n  OFFSET: 'offset',\n  POSITION: 'position',\n  POSITIONING: 'positioning'\n};\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:element'|'change:map'|'change:offset'|'change:position'|\n *   'change:positioning'} OverlayObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<OverlayObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|OverlayObjectEventTypes, Return>} OverlayOnSignature\n */\n\n/**\n * @classdesc\n * An element to be displayed over the map and attached to a single map\n * location.  Like {@link module:ol/control/Control~Control}, Overlays are\n * visible widgets. Unlike Controls, they are not in a fixed position on the\n * screen, but are tied to a geographical coordinate, so panning the map will\n * move an Overlay but not a Control.\n *\n * Example:\n *\n *     import Overlay from 'ol/Overlay';\n *\n *     var popup = new Overlay({\n *       element: document.getElementById('popup')\n *     });\n *     popup.setPosition(coordinate);\n *     map.addOverlay(popup);\n *\n * @api\n */\n\nvar Overlay =\n/** @class */\nfunction (_super) {\n  __extends(Overlay, _super);\n  /**\n   * @param {Options} options Overlay options.\n   */\n\n\n  function Overlay(options) {\n    var _this = _super.call(this) || this;\n    /***\n     * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\n     */\n\n\n    _this.on;\n    /***\n     * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\n     */\n\n    _this.once;\n    /***\n     * @type {OverlayOnSignature<void>}\n     */\n\n    _this.un;\n    /**\n     * @protected\n     * @type {Options}\n     */\n\n    _this.options = options;\n    /**\n     * @protected\n     * @type {number|string|undefined}\n     */\n\n    _this.id = options.id;\n    /**\n     * @protected\n     * @type {boolean}\n     */\n\n    _this.insertFirst = options.insertFirst !== undefined ? options.insertFirst : true;\n    /**\n     * @protected\n     * @type {boolean}\n     */\n\n    _this.stopEvent = options.stopEvent !== undefined ? options.stopEvent : true;\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n\n    _this.element = document.createElement('div');\n    _this.element.className = options.className !== undefined ? options.className : 'ol-overlay-container ' + CLASS_SELECTABLE;\n    _this.element.style.position = 'absolute';\n    _this.element.style.pointerEvents = 'auto';\n    var autoPan = options.autoPan;\n\n    if (autoPan && 'object' !== typeof autoPan) {\n      autoPan = {\n        animation: options.autoPanAnimation,\n        margin: options.autoPanMargin\n      };\n    }\n    /**\n     * @protected\n     * @type {PanIntoViewOptions|false}\n     */\n\n\n    _this.autoPan =\n    /** @type {PanIntoViewOptions} */\n    autoPan || false;\n    /**\n     * @protected\n     * @type {{transform_: string,\n     *         visible: boolean}}\n     */\n\n    _this.rendered = {\n      transform_: '',\n      visible: true\n    };\n    /**\n     * @protected\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n\n    _this.mapPostrenderListenerKey = null;\n\n    _this.addChangeListener(Property.ELEMENT, _this.handleElementChanged);\n\n    _this.addChangeListener(Property.MAP, _this.handleMapChanged);\n\n    _this.addChangeListener(Property.OFFSET, _this.handleOffsetChanged);\n\n    _this.addChangeListener(Property.POSITION, _this.handlePositionChanged);\n\n    _this.addChangeListener(Property.POSITIONING, _this.handlePositioningChanged);\n\n    if (options.element !== undefined) {\n      _this.setElement(options.element);\n    }\n\n    _this.setOffset(options.offset !== undefined ? options.offset : [0, 0]);\n\n    _this.setPositioning(options.positioning || 'top-left');\n\n    if (options.position !== undefined) {\n      _this.setPosition(options.position);\n    }\n\n    return _this;\n  }\n  /**\n   * Get the DOM element of this overlay.\n   * @return {HTMLElement|undefined} The Element containing the overlay.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.getElement = function () {\n    return (\n      /** @type {HTMLElement|undefined} */\n      this.get(Property.ELEMENT)\n    );\n  };\n  /**\n   * Get the overlay identifier which is set on constructor.\n   * @return {number|string|undefined} Id.\n   * @api\n   */\n\n\n  Overlay.prototype.getId = function () {\n    return this.id;\n  };\n  /**\n   * Get the map associated with this overlay.\n   * @return {import(\"./PluggableMap.js\").default|null} The map that the\n   * overlay is part of.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.getMap = function () {\n    return (\n      /** @type {import(\"./PluggableMap.js\").default|null} */\n      this.get(Property.MAP) || null\n    );\n  };\n  /**\n   * Get the offset of this overlay.\n   * @return {Array<number>} The offset.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.getOffset = function () {\n    return (\n      /** @type {Array<number>} */\n      this.get(Property.OFFSET)\n    );\n  };\n  /**\n   * Get the current position of this overlay.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The spatial point that the overlay is\n   *     anchored at.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.getPosition = function () {\n    return (\n      /** @type {import(\"./coordinate.js\").Coordinate|undefined} */\n      this.get(Property.POSITION)\n    );\n  };\n  /**\n   * Get the current positioning of this overlay.\n   * @return {Positioning} How the overlay is positioned\n   *     relative to its point on the map.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.getPositioning = function () {\n    return (\n      /** @type {Positioning} */\n      this.get(Property.POSITIONING)\n    );\n  };\n  /**\n   * @protected\n   */\n\n\n  Overlay.prototype.handleElementChanged = function () {\n    removeChildren(this.element);\n    var element = this.getElement();\n\n    if (element) {\n      this.element.appendChild(element);\n    }\n  };\n  /**\n   * @protected\n   */\n\n\n  Overlay.prototype.handleMapChanged = function () {\n    if (this.mapPostrenderListenerKey) {\n      removeNode(this.element);\n      unlistenByKey(this.mapPostrenderListenerKey);\n      this.mapPostrenderListenerKey = null;\n    }\n\n    var map = this.getMap();\n\n    if (map) {\n      this.mapPostrenderListenerKey = listen(map, MapEventType.POSTRENDER, this.render, this);\n      this.updatePixelPosition();\n      var container = this.stopEvent ? map.getOverlayContainerStopEvent() : map.getOverlayContainer();\n\n      if (this.insertFirst) {\n        container.insertBefore(this.element, container.childNodes[0] || null);\n      } else {\n        container.appendChild(this.element);\n      }\n\n      this.performAutoPan();\n    }\n  };\n  /**\n   * @protected\n   */\n\n\n  Overlay.prototype.render = function () {\n    this.updatePixelPosition();\n  };\n  /**\n   * @protected\n   */\n\n\n  Overlay.prototype.handleOffsetChanged = function () {\n    this.updatePixelPosition();\n  };\n  /**\n   * @protected\n   */\n\n\n  Overlay.prototype.handlePositionChanged = function () {\n    this.updatePixelPosition();\n    this.performAutoPan();\n  };\n  /**\n   * @protected\n   */\n\n\n  Overlay.prototype.handlePositioningChanged = function () {\n    this.updatePixelPosition();\n  };\n  /**\n   * Set the DOM element to be associated with this overlay.\n   * @param {HTMLElement|undefined} element The Element containing the overlay.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.setElement = function (element) {\n    this.set(Property.ELEMENT, element);\n  };\n  /**\n   * Set the map to be associated with this overlay.\n   * @param {import(\"./PluggableMap.js\").default|null} map The map that the\n   * overlay is part of. Pass `null` to just remove the overlay from the current map.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.setMap = function (map) {\n    this.set(Property.MAP, map);\n  };\n  /**\n   * Set the offset for this overlay.\n   * @param {Array<number>} offset Offset.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.setOffset = function (offset) {\n    this.set(Property.OFFSET, offset);\n  };\n  /**\n   * Set the position for this overlay. If the position is `undefined` the\n   * overlay is hidden.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} position The spatial point that the overlay\n   *     is anchored at.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.setPosition = function (position) {\n    this.set(Property.POSITION, position);\n  };\n  /**\n   * Pan the map so that the overlay is entirely visible in the current viewport\n   * (if necessary) using the configured autoPan parameters\n   * @protected\n   */\n\n\n  Overlay.prototype.performAutoPan = function () {\n    if (this.autoPan) {\n      this.panIntoView(this.autoPan);\n    }\n  };\n  /**\n   * Pan the map so that the overlay is entirely visible in the current viewport\n   * (if necessary).\n   * @param {PanIntoViewOptions} [opt_panIntoViewOptions] Options for the pan action\n   * @api\n   */\n\n\n  Overlay.prototype.panIntoView = function (opt_panIntoViewOptions) {\n    var map = this.getMap();\n\n    if (!map || !map.getTargetElement() || !this.get(Property.POSITION)) {\n      return;\n    }\n\n    var mapRect = this.getRect(map.getTargetElement(), map.getSize());\n    var element = this.getElement();\n    var overlayRect = this.getRect(element, [outerWidth(element), outerHeight(element)]);\n    var panIntoViewOptions = opt_panIntoViewOptions || {};\n    var myMargin = panIntoViewOptions.margin === undefined ? 20 : panIntoViewOptions.margin;\n\n    if (!containsExtent(mapRect, overlayRect)) {\n      // the overlay is not completely inside the viewport, so pan the map\n      var offsetLeft = overlayRect[0] - mapRect[0];\n      var offsetRight = mapRect[2] - overlayRect[2];\n      var offsetTop = overlayRect[1] - mapRect[1];\n      var offsetBottom = mapRect[3] - overlayRect[3];\n      var delta = [0, 0];\n\n      if (offsetLeft < 0) {\n        // move map to the left\n        delta[0] = offsetLeft - myMargin;\n      } else if (offsetRight < 0) {\n        // move map to the right\n        delta[0] = Math.abs(offsetRight) + myMargin;\n      }\n\n      if (offsetTop < 0) {\n        // move map up\n        delta[1] = offsetTop - myMargin;\n      } else if (offsetBottom < 0) {\n        // move map down\n        delta[1] = Math.abs(offsetBottom) + myMargin;\n      }\n\n      if (delta[0] !== 0 || delta[1] !== 0) {\n        var center =\n        /** @type {import(\"./coordinate.js\").Coordinate} */\n        map.getView().getCenterInternal();\n        var centerPx = map.getPixelFromCoordinateInternal(center);\n\n        if (!centerPx) {\n          return;\n        }\n\n        var newCenterPx = [centerPx[0] + delta[0], centerPx[1] + delta[1]];\n        var panOptions = panIntoViewOptions.animation || {};\n        map.getView().animateInternal({\n          center: map.getCoordinateFromPixelInternal(newCenterPx),\n          duration: panOptions.duration,\n          easing: panOptions.easing\n        });\n      }\n    }\n  };\n  /**\n   * Get the extent of an element relative to the document\n   * @param {HTMLElement} element The element.\n   * @param {import(\"./size.js\").Size} size The size of the element.\n   * @return {import(\"./extent.js\").Extent} The extent.\n   * @protected\n   */\n\n\n  Overlay.prototype.getRect = function (element, size) {\n    var box = element.getBoundingClientRect();\n    var offsetX = box.left + window.pageXOffset;\n    var offsetY = box.top + window.pageYOffset;\n    return [offsetX, offsetY, offsetX + size[0], offsetY + size[1]];\n  };\n  /**\n   * Set the positioning for this overlay.\n   * @param {Positioning} positioning how the overlay is\n   *     positioned relative to its point on the map.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.setPositioning = function (positioning) {\n    this.set(Property.POSITIONING, positioning);\n  };\n  /**\n   * Modify the visibility of the element.\n   * @param {boolean} visible Element visibility.\n   * @protected\n   */\n\n\n  Overlay.prototype.setVisible = function (visible) {\n    if (this.rendered.visible !== visible) {\n      this.element.style.display = visible ? '' : 'none';\n      this.rendered.visible = visible;\n    }\n  };\n  /**\n   * Update pixel position.\n   * @protected\n   */\n\n\n  Overlay.prototype.updatePixelPosition = function () {\n    var map = this.getMap();\n    var position = this.getPosition();\n\n    if (!map || !map.isRendered() || !position) {\n      this.setVisible(false);\n      return;\n    }\n\n    var pixel = map.getPixelFromCoordinate(position);\n    var mapSize = map.getSize();\n    this.updateRenderedPosition(pixel, mapSize);\n  };\n  /**\n   * @param {import(\"./pixel.js\").Pixel} pixel The pixel location.\n   * @param {import(\"./size.js\").Size|undefined} mapSize The map size.\n   * @protected\n   */\n\n\n  Overlay.prototype.updateRenderedPosition = function (pixel, mapSize) {\n    var style = this.element.style;\n    var offset = this.getOffset();\n    var positioning = this.getPositioning();\n    this.setVisible(true);\n    var x = Math.round(pixel[0] + offset[0]) + 'px';\n    var y = Math.round(pixel[1] + offset[1]) + 'px';\n    var posX = '0%';\n    var posY = '0%';\n\n    if (positioning == 'bottom-right' || positioning == 'center-right' || positioning == 'top-right') {\n      posX = '-100%';\n    } else if (positioning == 'bottom-center' || positioning == 'center-center' || positioning == 'top-center') {\n      posX = '-50%';\n    }\n\n    if (positioning == 'bottom-left' || positioning == 'bottom-center' || positioning == 'bottom-right') {\n      posY = '-100%';\n    } else if (positioning == 'center-left' || positioning == 'center-center' || positioning == 'center-right') {\n      posY = '-50%';\n    }\n\n    var transform = \"translate(\".concat(posX, \", \").concat(posY, \") translate(\").concat(x, \", \").concat(y, \")\");\n\n    if (this.rendered.transform_ != transform) {\n      this.rendered.transform_ = transform;\n      style.transform = transform; // @ts-ignore IE9\n\n      style.msTransform = transform;\n    }\n  };\n  /**\n   * returns the options this Overlay has been created with\n   * @return {Options} overlay options\n   */\n\n\n  Overlay.prototype.getOptions = function () {\n    return this.options;\n  };\n\n  return Overlay;\n}(BaseObject);\n\nexport default Overlay;","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","BaseObject","MapEventType","CLASS_SELECTABLE","containsExtent","listen","unlistenByKey","outerHeight","outerWidth","removeChildren","removeNode","Property","ELEMENT","MAP","OFFSET","POSITION","POSITIONING","Overlay","_super","options","_this","on","once","un","id","insertFirst","undefined","stopEvent","element","document","createElement","className","style","position","pointerEvents","autoPan","animation","autoPanAnimation","margin","autoPanMargin","rendered","transform_","visible","mapPostrenderListenerKey","addChangeListener","handleElementChanged","handleMapChanged","handleOffsetChanged","handlePositionChanged","handlePositioningChanged","setElement","setOffset","offset","setPositioning","positioning","setPosition","getElement","get","getId","getMap","getOffset","getPosition","getPositioning","appendChild","map","POSTRENDER","render","updatePixelPosition","container","getOverlayContainerStopEvent","getOverlayContainer","insertBefore","childNodes","performAutoPan","set","setMap","panIntoView","opt_panIntoViewOptions","getTargetElement","mapRect","getRect","getSize","overlayRect","panIntoViewOptions","myMargin","offsetLeft","offsetRight","offsetTop","offsetBottom","delta","Math","abs","center","getView","getCenterInternal","centerPx","getPixelFromCoordinateInternal","newCenterPx","panOptions","animateInternal","getCoordinateFromPixelInternal","duration","easing","size","box","getBoundingClientRect","offsetX","left","window","pageXOffset","offsetY","top","pageYOffset","setVisible","display","isRendered","pixel","getPixelFromCoordinate","mapSize","updateRenderedPosition","x","round","y","posX","posY","transform","concat","msTransform","getOptions"],"sources":["/home/asura/github/smartcity/source/node_modules/ol/Overlay.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/Overlay\n */\nimport BaseObject from './Object.js';\nimport MapEventType from './MapEventType.js';\nimport { CLASS_SELECTABLE } from './css.js';\nimport { containsExtent } from './extent.js';\nimport { listen, unlistenByKey } from './events.js';\nimport { outerHeight, outerWidth, removeChildren, removeNode } from './dom.js';\n/**\n * @typedef {'bottom-left' | 'bottom-center' | 'bottom-right' | 'center-left' | 'center-center' | 'center-right' | 'top-left' | 'top-center' | 'top-right'} Positioning\n * The overlay position: `'bottom-left'`, `'bottom-center'`,  `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, or `'top-right'`.\n */\n/**\n * @typedef {Object} Options\n * @property {number|string} [id] Set the overlay id. The overlay id can be used\n * with the {@link module:ol/Map~Map#getOverlayById} method.\n * @property {HTMLElement} [element] The overlay element.\n * @property {Array<number>} [offset=[0, 0]] Offsets in pixels used when positioning\n * the overlay. The first element in the\n * array is the horizontal offset. A positive value shifts the overlay right.\n * The second element in the array is the vertical offset. A positive value\n * shifts the overlay down.\n * @property {import(\"./coordinate.js\").Coordinate} [position] The overlay position\n * in map projection.\n * @property {Positioning} [positioning='top-left'] Defines how\n * the overlay is actually positioned with respect to its `position` property.\n * Possible values are `'bottom-left'`, `'bottom-center'`, `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, and `'top-right'`.\n * @property {boolean} [stopEvent=true] Whether event propagation to the map\n * viewport should be stopped. If `true` the overlay is placed in the same\n * container as that of the controls (CSS class name\n * `ol-overlaycontainer-stopevent`); if `false` it is placed in the container\n * with CSS class name specified by the `className` property.\n * @property {boolean} [insertFirst=true] Whether the overlay is inserted first\n * in the overlay container, or appended. If the overlay is placed in the same\n * container as that of the controls (see the `stopEvent` option) you will\n * probably set `insertFirst` to `true` so the overlay is displayed below the\n * controls.\n * @property {PanIntoViewOptions|boolean} [autoPan=false] Pan the map when calling\n * `setPosition`, so that the overlay is entirely visible in the current viewport?\n * If `true` (deprecated), then `autoPanAnimation` and `autoPanMargin` will be\n * used to determine the panning parameters; if an object is supplied then other\n * parameters are ignored.\n * @property {PanOptions} [autoPanAnimation] The animation options used to pan\n * the overlay into view. This animation is only used when `autoPan` is enabled.\n * A `duration` and `easing` may be provided to customize the animation.\n * Deprecated and ignored if `autoPan` is supplied as an object.\n * @property {number} [autoPanMargin=20] The margin (in pixels) between the\n * overlay and the borders of the map when autopanning. Deprecated and ignored\n * if `autoPan` is supplied as an object.\n * @property {PanIntoViewOptions} [autoPanOptions] The options to use for the\n * autoPan. This is only used when `autoPan` is enabled and has preference over\n * the individual `autoPanMargin` and `autoPanOptions`.\n * @property {string} [className='ol-overlay-container ol-selectable'] CSS class\n * name.\n */\n/**\n * @typedef {Object} PanOptions\n * @property {number} [duration=1000] The duration of the animation in\n * milliseconds.\n * @property {function(number):number} [easing] The easing function to use. Can\n * be one from {@link module:ol/easing} or a custom function.\n * Default is {@link module:ol/easing.inAndOut}.\n */\n/**\n * @typedef {Object} PanIntoViewOptions\n * @property {PanOptions} [animation={}] The animation parameters for the pan\n * @property {number} [margin=20] The margin (in pixels) between the\n * overlay and the borders of the map when panning into view.\n */\n/**\n * @enum {string}\n * @protected\n */\nvar Property = {\n    ELEMENT: 'element',\n    MAP: 'map',\n    OFFSET: 'offset',\n    POSITION: 'position',\n    POSITIONING: 'positioning',\n};\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:element'|'change:map'|'change:offset'|'change:position'|\n *   'change:positioning'} OverlayObjectEventTypes\n */\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<OverlayObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|OverlayObjectEventTypes, Return>} OverlayOnSignature\n */\n/**\n * @classdesc\n * An element to be displayed over the map and attached to a single map\n * location.  Like {@link module:ol/control/Control~Control}, Overlays are\n * visible widgets. Unlike Controls, they are not in a fixed position on the\n * screen, but are tied to a geographical coordinate, so panning the map will\n * move an Overlay but not a Control.\n *\n * Example:\n *\n *     import Overlay from 'ol/Overlay';\n *\n *     var popup = new Overlay({\n *       element: document.getElementById('popup')\n *     });\n *     popup.setPosition(coordinate);\n *     map.addOverlay(popup);\n *\n * @api\n */\nvar Overlay = /** @class */ (function (_super) {\n    __extends(Overlay, _super);\n    /**\n     * @param {Options} options Overlay options.\n     */\n    function Overlay(options) {\n        var _this = _super.call(this) || this;\n        /***\n         * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\n         */\n        _this.on;\n        /***\n         * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\n         */\n        _this.once;\n        /***\n         * @type {OverlayOnSignature<void>}\n         */\n        _this.un;\n        /**\n         * @protected\n         * @type {Options}\n         */\n        _this.options = options;\n        /**\n         * @protected\n         * @type {number|string|undefined}\n         */\n        _this.id = options.id;\n        /**\n         * @protected\n         * @type {boolean}\n         */\n        _this.insertFirst =\n            options.insertFirst !== undefined ? options.insertFirst : true;\n        /**\n         * @protected\n         * @type {boolean}\n         */\n        _this.stopEvent = options.stopEvent !== undefined ? options.stopEvent : true;\n        /**\n         * @protected\n         * @type {HTMLElement}\n         */\n        _this.element = document.createElement('div');\n        _this.element.className =\n            options.className !== undefined\n                ? options.className\n                : 'ol-overlay-container ' + CLASS_SELECTABLE;\n        _this.element.style.position = 'absolute';\n        _this.element.style.pointerEvents = 'auto';\n        var autoPan = options.autoPan;\n        if (autoPan && 'object' !== typeof autoPan) {\n            autoPan = {\n                animation: options.autoPanAnimation,\n                margin: options.autoPanMargin,\n            };\n        }\n        /**\n         * @protected\n         * @type {PanIntoViewOptions|false}\n         */\n        _this.autoPan = /** @type {PanIntoViewOptions} */ (autoPan) || false;\n        /**\n         * @protected\n         * @type {{transform_: string,\n         *         visible: boolean}}\n         */\n        _this.rendered = {\n            transform_: '',\n            visible: true,\n        };\n        /**\n         * @protected\n         * @type {?import(\"./events.js\").EventsKey}\n         */\n        _this.mapPostrenderListenerKey = null;\n        _this.addChangeListener(Property.ELEMENT, _this.handleElementChanged);\n        _this.addChangeListener(Property.MAP, _this.handleMapChanged);\n        _this.addChangeListener(Property.OFFSET, _this.handleOffsetChanged);\n        _this.addChangeListener(Property.POSITION, _this.handlePositionChanged);\n        _this.addChangeListener(Property.POSITIONING, _this.handlePositioningChanged);\n        if (options.element !== undefined) {\n            _this.setElement(options.element);\n        }\n        _this.setOffset(options.offset !== undefined ? options.offset : [0, 0]);\n        _this.setPositioning(options.positioning || 'top-left');\n        if (options.position !== undefined) {\n            _this.setPosition(options.position);\n        }\n        return _this;\n    }\n    /**\n     * Get the DOM element of this overlay.\n     * @return {HTMLElement|undefined} The Element containing the overlay.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.getElement = function () {\n        return /** @type {HTMLElement|undefined} */ (this.get(Property.ELEMENT));\n    };\n    /**\n     * Get the overlay identifier which is set on constructor.\n     * @return {number|string|undefined} Id.\n     * @api\n     */\n    Overlay.prototype.getId = function () {\n        return this.id;\n    };\n    /**\n     * Get the map associated with this overlay.\n     * @return {import(\"./PluggableMap.js\").default|null} The map that the\n     * overlay is part of.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.getMap = function () {\n        return /** @type {import(\"./PluggableMap.js\").default|null} */ (this.get(Property.MAP) || null);\n    };\n    /**\n     * Get the offset of this overlay.\n     * @return {Array<number>} The offset.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.getOffset = function () {\n        return /** @type {Array<number>} */ (this.get(Property.OFFSET));\n    };\n    /**\n     * Get the current position of this overlay.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} The spatial point that the overlay is\n     *     anchored at.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.getPosition = function () {\n        return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ (this.get(Property.POSITION));\n    };\n    /**\n     * Get the current positioning of this overlay.\n     * @return {Positioning} How the overlay is positioned\n     *     relative to its point on the map.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.getPositioning = function () {\n        return /** @type {Positioning} */ (this.get(Property.POSITIONING));\n    };\n    /**\n     * @protected\n     */\n    Overlay.prototype.handleElementChanged = function () {\n        removeChildren(this.element);\n        var element = this.getElement();\n        if (element) {\n            this.element.appendChild(element);\n        }\n    };\n    /**\n     * @protected\n     */\n    Overlay.prototype.handleMapChanged = function () {\n        if (this.mapPostrenderListenerKey) {\n            removeNode(this.element);\n            unlistenByKey(this.mapPostrenderListenerKey);\n            this.mapPostrenderListenerKey = null;\n        }\n        var map = this.getMap();\n        if (map) {\n            this.mapPostrenderListenerKey = listen(map, MapEventType.POSTRENDER, this.render, this);\n            this.updatePixelPosition();\n            var container = this.stopEvent\n                ? map.getOverlayContainerStopEvent()\n                : map.getOverlayContainer();\n            if (this.insertFirst) {\n                container.insertBefore(this.element, container.childNodes[0] || null);\n            }\n            else {\n                container.appendChild(this.element);\n            }\n            this.performAutoPan();\n        }\n    };\n    /**\n     * @protected\n     */\n    Overlay.prototype.render = function () {\n        this.updatePixelPosition();\n    };\n    /**\n     * @protected\n     */\n    Overlay.prototype.handleOffsetChanged = function () {\n        this.updatePixelPosition();\n    };\n    /**\n     * @protected\n     */\n    Overlay.prototype.handlePositionChanged = function () {\n        this.updatePixelPosition();\n        this.performAutoPan();\n    };\n    /**\n     * @protected\n     */\n    Overlay.prototype.handlePositioningChanged = function () {\n        this.updatePixelPosition();\n    };\n    /**\n     * Set the DOM element to be associated with this overlay.\n     * @param {HTMLElement|undefined} element The Element containing the overlay.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.setElement = function (element) {\n        this.set(Property.ELEMENT, element);\n    };\n    /**\n     * Set the map to be associated with this overlay.\n     * @param {import(\"./PluggableMap.js\").default|null} map The map that the\n     * overlay is part of. Pass `null` to just remove the overlay from the current map.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.setMap = function (map) {\n        this.set(Property.MAP, map);\n    };\n    /**\n     * Set the offset for this overlay.\n     * @param {Array<number>} offset Offset.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.setOffset = function (offset) {\n        this.set(Property.OFFSET, offset);\n    };\n    /**\n     * Set the position for this overlay. If the position is `undefined` the\n     * overlay is hidden.\n     * @param {import(\"./coordinate.js\").Coordinate|undefined} position The spatial point that the overlay\n     *     is anchored at.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.setPosition = function (position) {\n        this.set(Property.POSITION, position);\n    };\n    /**\n     * Pan the map so that the overlay is entirely visible in the current viewport\n     * (if necessary) using the configured autoPan parameters\n     * @protected\n     */\n    Overlay.prototype.performAutoPan = function () {\n        if (this.autoPan) {\n            this.panIntoView(this.autoPan);\n        }\n    };\n    /**\n     * Pan the map so that the overlay is entirely visible in the current viewport\n     * (if necessary).\n     * @param {PanIntoViewOptions} [opt_panIntoViewOptions] Options for the pan action\n     * @api\n     */\n    Overlay.prototype.panIntoView = function (opt_panIntoViewOptions) {\n        var map = this.getMap();\n        if (!map || !map.getTargetElement() || !this.get(Property.POSITION)) {\n            return;\n        }\n        var mapRect = this.getRect(map.getTargetElement(), map.getSize());\n        var element = this.getElement();\n        var overlayRect = this.getRect(element, [\n            outerWidth(element),\n            outerHeight(element),\n        ]);\n        var panIntoViewOptions = opt_panIntoViewOptions || {};\n        var myMargin = panIntoViewOptions.margin === undefined ? 20 : panIntoViewOptions.margin;\n        if (!containsExtent(mapRect, overlayRect)) {\n            // the overlay is not completely inside the viewport, so pan the map\n            var offsetLeft = overlayRect[0] - mapRect[0];\n            var offsetRight = mapRect[2] - overlayRect[2];\n            var offsetTop = overlayRect[1] - mapRect[1];\n            var offsetBottom = mapRect[3] - overlayRect[3];\n            var delta = [0, 0];\n            if (offsetLeft < 0) {\n                // move map to the left\n                delta[0] = offsetLeft - myMargin;\n            }\n            else if (offsetRight < 0) {\n                // move map to the right\n                delta[0] = Math.abs(offsetRight) + myMargin;\n            }\n            if (offsetTop < 0) {\n                // move map up\n                delta[1] = offsetTop - myMargin;\n            }\n            else if (offsetBottom < 0) {\n                // move map down\n                delta[1] = Math.abs(offsetBottom) + myMargin;\n            }\n            if (delta[0] !== 0 || delta[1] !== 0) {\n                var center = /** @type {import(\"./coordinate.js\").Coordinate} */ (map.getView().getCenterInternal());\n                var centerPx = map.getPixelFromCoordinateInternal(center);\n                if (!centerPx) {\n                    return;\n                }\n                var newCenterPx = [centerPx[0] + delta[0], centerPx[1] + delta[1]];\n                var panOptions = panIntoViewOptions.animation || {};\n                map.getView().animateInternal({\n                    center: map.getCoordinateFromPixelInternal(newCenterPx),\n                    duration: panOptions.duration,\n                    easing: panOptions.easing,\n                });\n            }\n        }\n    };\n    /**\n     * Get the extent of an element relative to the document\n     * @param {HTMLElement} element The element.\n     * @param {import(\"./size.js\").Size} size The size of the element.\n     * @return {import(\"./extent.js\").Extent} The extent.\n     * @protected\n     */\n    Overlay.prototype.getRect = function (element, size) {\n        var box = element.getBoundingClientRect();\n        var offsetX = box.left + window.pageXOffset;\n        var offsetY = box.top + window.pageYOffset;\n        return [offsetX, offsetY, offsetX + size[0], offsetY + size[1]];\n    };\n    /**\n     * Set the positioning for this overlay.\n     * @param {Positioning} positioning how the overlay is\n     *     positioned relative to its point on the map.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.setPositioning = function (positioning) {\n        this.set(Property.POSITIONING, positioning);\n    };\n    /**\n     * Modify the visibility of the element.\n     * @param {boolean} visible Element visibility.\n     * @protected\n     */\n    Overlay.prototype.setVisible = function (visible) {\n        if (this.rendered.visible !== visible) {\n            this.element.style.display = visible ? '' : 'none';\n            this.rendered.visible = visible;\n        }\n    };\n    /**\n     * Update pixel position.\n     * @protected\n     */\n    Overlay.prototype.updatePixelPosition = function () {\n        var map = this.getMap();\n        var position = this.getPosition();\n        if (!map || !map.isRendered() || !position) {\n            this.setVisible(false);\n            return;\n        }\n        var pixel = map.getPixelFromCoordinate(position);\n        var mapSize = map.getSize();\n        this.updateRenderedPosition(pixel, mapSize);\n    };\n    /**\n     * @param {import(\"./pixel.js\").Pixel} pixel The pixel location.\n     * @param {import(\"./size.js\").Size|undefined} mapSize The map size.\n     * @protected\n     */\n    Overlay.prototype.updateRenderedPosition = function (pixel, mapSize) {\n        var style = this.element.style;\n        var offset = this.getOffset();\n        var positioning = this.getPositioning();\n        this.setVisible(true);\n        var x = Math.round(pixel[0] + offset[0]) + 'px';\n        var y = Math.round(pixel[1] + offset[1]) + 'px';\n        var posX = '0%';\n        var posY = '0%';\n        if (positioning == 'bottom-right' ||\n            positioning == 'center-right' ||\n            positioning == 'top-right') {\n            posX = '-100%';\n        }\n        else if (positioning == 'bottom-center' ||\n            positioning == 'center-center' ||\n            positioning == 'top-center') {\n            posX = '-50%';\n        }\n        if (positioning == 'bottom-left' ||\n            positioning == 'bottom-center' ||\n            positioning == 'bottom-right') {\n            posY = '-100%';\n        }\n        else if (positioning == 'center-left' ||\n            positioning == 'center-center' ||\n            positioning == 'center-right') {\n            posY = '-50%';\n        }\n        var transform = \"translate(\".concat(posX, \", \").concat(posY, \") translate(\").concat(x, \", \").concat(y, \")\");\n        if (this.rendered.transform_ != transform) {\n            this.rendered.transform_ = transform;\n            style.transform = transform;\n            // @ts-ignore IE9\n            style.msTransform = transform;\n        }\n    };\n    /**\n     * returns the options this Overlay has been created with\n     * @return {Options} overlay options\n     */\n    Overlay.prototype.getOptions = function () {\n        return this.options;\n    };\n    return Overlay;\n}(BaseObject));\nexport default Overlay;\n"],"mappings":"AAAA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA6B,YAAY;EACrD,IAAIC,aAAa,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;IAChCF,aAAa,GAAGG,MAAM,CAACC,cAAP,IACX;MAAEC,SAAS,EAAE;IAAb,aAA6BC,KAA7B,IAAsC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;MAAED,CAAC,CAACI,SAAF,GAAcH,CAAd;IAAkB,CAD/D,IAEZ,UAAUD,CAAV,EAAaC,CAAb,EAAgB;MAAE,KAAK,IAAIK,CAAT,IAAcL,CAAd,EAAiB,IAAIC,MAAM,CAACK,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EAAgDN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;IAAc,CAFrG;;IAGA,OAAOP,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAApB;EACH,CALD;;EAMA,OAAO,UAAUD,CAAV,EAAaC,CAAb,EAAgB;IACnB,IAAI,OAAOA,CAAP,KAAa,UAAb,IAA2BA,CAAC,KAAK,IAArC,EACI,MAAM,IAAIS,SAAJ,CAAc,yBAAyBC,MAAM,CAACV,CAAD,CAA/B,GAAqC,+BAAnD,CAAN;IACJF,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAAb;;IACA,SAASW,EAAT,GAAc;MAAE,KAAKC,WAAL,GAAmBb,CAAnB;IAAuB;;IACvCA,CAAC,CAACO,SAAF,GAAcN,CAAC,KAAK,IAAN,GAAaC,MAAM,CAACY,MAAP,CAAcb,CAAd,CAAb,IAAiCW,EAAE,CAACL,SAAH,GAAeN,CAAC,CAACM,SAAjB,EAA4B,IAAIK,EAAJ,EAA7D,CAAd;EACH,CAND;AAOH,CAd2C,EAA5C;AAeA;AACA;AACA;;;AACA,OAAOG,UAAP,MAAuB,aAAvB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,SAASC,gBAAT,QAAiC,UAAjC;AACA,SAASC,cAAT,QAA+B,aAA/B;AACA,SAASC,MAAT,EAAiBC,aAAjB,QAAsC,aAAtC;AACA,SAASC,WAAT,EAAsBC,UAAtB,EAAkCC,cAAlC,EAAkDC,UAAlD,QAAoE,UAApE;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA,IAAIC,QAAQ,GAAG;EACXC,OAAO,EAAE,SADE;EAEXC,GAAG,EAAE,KAFM;EAGXC,MAAM,EAAE,QAHG;EAIXC,QAAQ,EAAE,UAJC;EAKXC,WAAW,EAAE;AALF,CAAf;AAOA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,OAAO;AAAG;AAAe,UAAUC,MAAV,EAAkB;EAC3ClC,SAAS,CAACiC,OAAD,EAAUC,MAAV,CAAT;EACA;AACJ;AACA;;;EACI,SAASD,OAAT,CAAiBE,OAAjB,EAA0B;IACtB,IAAIC,KAAK,GAAGF,MAAM,CAACvB,IAAP,CAAY,IAAZ,KAAqB,IAAjC;IACA;AACR;AACA;;;IACQyB,KAAK,CAACC,EAAN;IACA;AACR;AACA;;IACQD,KAAK,CAACE,IAAN;IACA;AACR;AACA;;IACQF,KAAK,CAACG,EAAN;IACA;AACR;AACA;AACA;;IACQH,KAAK,CAACD,OAAN,GAAgBA,OAAhB;IACA;AACR;AACA;AACA;;IACQC,KAAK,CAACI,EAAN,GAAWL,OAAO,CAACK,EAAnB;IACA;AACR;AACA;AACA;;IACQJ,KAAK,CAACK,WAAN,GACIN,OAAO,CAACM,WAAR,KAAwBC,SAAxB,GAAoCP,OAAO,CAACM,WAA5C,GAA0D,IAD9D;IAEA;AACR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"},"metadata":{},"sourceType":"module"}