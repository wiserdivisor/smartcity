{"ast":null,"code":"/**\n * @module ol/sphere\n */\nimport { toDegrees, toRadians } from './math.js';\n/**\n * Object literal with options for the {@link getLength} or {@link getArea}\n * functions.\n * @typedef {Object} SphereMetricOptions\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857']\n * Projection of the  geometry.  By default, the geometry is assumed to be in\n * Web Mercator.\n * @property {number} [radius=6371008.8] Sphere radius.  By default, the\n * [mean Earth radius](https://en.wikipedia.org/wiki/Earth_radius#Mean_radius)\n * for the WGS84 ellipsoid is used.\n */\n\n/**\n * The mean Earth radius (1/3 * (2a + b)) for the WGS84 ellipsoid.\n * https://en.wikipedia.org/wiki/Earth_radius#Mean_radius\n * @type {number}\n */\n\nexport var DEFAULT_RADIUS = 6371008.8;\n/**\n * Get the great circle distance (in meters) between two geographic coordinates.\n * @param {Array} c1 Starting coordinate.\n * @param {Array} c2 Ending coordinate.\n * @param {number} [opt_radius] The sphere radius to use.  Defaults to the Earth's\n *     mean radius using the WGS84 ellipsoid.\n * @return {number} The great circle distance between the points (in meters).\n * @api\n */\n\nexport function getDistance(c1, c2, opt_radius) {\n  var radius = opt_radius || DEFAULT_RADIUS;\n  var lat1 = toRadians(c1[1]);\n  var lat2 = toRadians(c2[1]);\n  var deltaLatBy2 = (lat2 - lat1) / 2;\n  var deltaLonBy2 = toRadians(c2[0] - c1[0]) / 2;\n  var a = Math.sin(deltaLatBy2) * Math.sin(deltaLatBy2) + Math.sin(deltaLonBy2) * Math.sin(deltaLonBy2) * Math.cos(lat1) * Math.cos(lat2);\n  return 2 * radius * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n}\n/**\n * Get the cumulative great circle length of linestring coordinates (geographic).\n * @param {Array} coordinates Linestring coordinates.\n * @param {number} radius The sphere radius to use.\n * @return {number} The length (in meters).\n */\n\nfunction getLengthInternal(coordinates, radius) {\n  var length = 0;\n\n  for (var i = 0, ii = coordinates.length; i < ii - 1; ++i) {\n    length += getDistance(coordinates[i], coordinates[i + 1], radius);\n  }\n\n  return length;\n}\n/**\n * Get the spherical length of a geometry.  This length is the sum of the\n * great circle distances between coordinates.  For polygons, the length is\n * the sum of all rings.  For points, the length is zero.  For multi-part\n * geometries, the length is the sum of the length of each part.\n * @param {import(\"./geom/Geometry.js\").default} geometry A geometry.\n * @param {SphereMetricOptions} [opt_options] Options for the\n * length calculation.  By default, geometries are assumed to be in 'EPSG:3857'.\n * You can change this by providing a `projection` option.\n * @return {number} The spherical length (in meters).\n * @api\n */\n\n\nexport function getLength(geometry, opt_options) {\n  var options = opt_options || {};\n  var radius = options.radius || DEFAULT_RADIUS;\n  var projection = options.projection || 'EPSG:3857';\n  var type = geometry.getType();\n\n  if (type !== 'GeometryCollection') {\n    geometry = geometry.clone().transform(projection, 'EPSG:4326');\n  }\n\n  var length = 0;\n  var coordinates, coords, i, ii, j, jj;\n\n  switch (type) {\n    case 'Point':\n    case 'MultiPoint':\n      {\n        break;\n      }\n\n    case 'LineString':\n    case 'LinearRing':\n      {\n        coordinates =\n        /** @type {import(\"./geom/SimpleGeometry.js\").default} */\n        geometry.getCoordinates();\n        length = getLengthInternal(coordinates, radius);\n        break;\n      }\n\n    case 'MultiLineString':\n    case 'Polygon':\n      {\n        coordinates =\n        /** @type {import(\"./geom/SimpleGeometry.js\").default} */\n        geometry.getCoordinates();\n\n        for (i = 0, ii = coordinates.length; i < ii; ++i) {\n          length += getLengthInternal(coordinates[i], radius);\n        }\n\n        break;\n      }\n\n    case 'MultiPolygon':\n      {\n        coordinates =\n        /** @type {import(\"./geom/SimpleGeometry.js\").default} */\n        geometry.getCoordinates();\n\n        for (i = 0, ii = coordinates.length; i < ii; ++i) {\n          coords = coordinates[i];\n\n          for (j = 0, jj = coords.length; j < jj; ++j) {\n            length += getLengthInternal(coords[j], radius);\n          }\n        }\n\n        break;\n      }\n\n    case 'GeometryCollection':\n      {\n        var geometries =\n        /** @type {import(\"./geom/GeometryCollection.js\").default} */\n        geometry.getGeometries();\n\n        for (i = 0, ii = geometries.length; i < ii; ++i) {\n          length += getLength(geometries[i], opt_options);\n        }\n\n        break;\n      }\n\n    default:\n      {\n        throw new Error('Unsupported geometry type: ' + type);\n      }\n  }\n\n  return length;\n}\n/**\n * Returns the spherical area for a list of coordinates.\n *\n * [Reference](https://trs.jpl.nasa.gov/handle/2014/40409)\n * Robert. G. Chamberlain and William H. Duquette, \"Some Algorithms for\n * Polygons on a Sphere\", JPL Publication 07-03, Jet Propulsion\n * Laboratory, Pasadena, CA, June 2007\n *\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates List of coordinates of a linear\n * ring. If the ring is oriented clockwise, the area will be positive,\n * otherwise it will be negative.\n * @param {number} radius The sphere radius.\n * @return {number} Area (in square meters).\n */\n\nfunction getAreaInternal(coordinates, radius) {\n  var area = 0;\n  var len = coordinates.length;\n  var x1 = coordinates[len - 1][0];\n  var y1 = coordinates[len - 1][1];\n\n  for (var i = 0; i < len; i++) {\n    var x2 = coordinates[i][0];\n    var y2 = coordinates[i][1];\n    area += toRadians(x2 - x1) * (2 + Math.sin(toRadians(y1)) + Math.sin(toRadians(y2)));\n    x1 = x2;\n    y1 = y2;\n  }\n\n  return area * radius * radius / 2.0;\n}\n/**\n * Get the spherical area of a geometry.  This is the area (in meters) assuming\n * that polygon edges are segments of great circles on a sphere.\n * @param {import(\"./geom/Geometry.js\").default} geometry A geometry.\n * @param {SphereMetricOptions} [opt_options] Options for the area\n *     calculation.  By default, geometries are assumed to be in 'EPSG:3857'.\n *     You can change this by providing a `projection` option.\n * @return {number} The spherical area (in square meters).\n * @api\n */\n\n\nexport function getArea(geometry, opt_options) {\n  var options = opt_options || {};\n  var radius = options.radius || DEFAULT_RADIUS;\n  var projection = options.projection || 'EPSG:3857';\n  var type = geometry.getType();\n\n  if (type !== 'GeometryCollection') {\n    geometry = geometry.clone().transform(projection, 'EPSG:4326');\n  }\n\n  var area = 0;\n  var coordinates, coords, i, ii, j, jj;\n\n  switch (type) {\n    case 'Point':\n    case 'MultiPoint':\n    case 'LineString':\n    case 'MultiLineString':\n    case 'LinearRing':\n      {\n        break;\n      }\n\n    case 'Polygon':\n      {\n        coordinates =\n        /** @type {import(\"./geom/Polygon.js\").default} */\n        geometry.getCoordinates();\n        area = Math.abs(getAreaInternal(coordinates[0], radius));\n\n        for (i = 1, ii = coordinates.length; i < ii; ++i) {\n          area -= Math.abs(getAreaInternal(coordinates[i], radius));\n        }\n\n        break;\n      }\n\n    case 'MultiPolygon':\n      {\n        coordinates =\n        /** @type {import(\"./geom/SimpleGeometry.js\").default} */\n        geometry.getCoordinates();\n\n        for (i = 0, ii = coordinates.length; i < ii; ++i) {\n          coords = coordinates[i];\n          area += Math.abs(getAreaInternal(coords[0], radius));\n\n          for (j = 1, jj = coords.length; j < jj; ++j) {\n            area -= Math.abs(getAreaInternal(coords[j], radius));\n          }\n        }\n\n        break;\n      }\n\n    case 'GeometryCollection':\n      {\n        var geometries =\n        /** @type {import(\"./geom/GeometryCollection.js\").default} */\n        geometry.getGeometries();\n\n        for (i = 0, ii = geometries.length; i < ii; ++i) {\n          area += getArea(geometries[i], opt_options);\n        }\n\n        break;\n      }\n\n    default:\n      {\n        throw new Error('Unsupported geometry type: ' + type);\n      }\n  }\n\n  return area;\n}\n/**\n * Returns the coordinate at the given distance and bearing from `c1`.\n *\n * @param {import(\"./coordinate.js\").Coordinate} c1 The origin point (`[lon, lat]` in degrees).\n * @param {number} distance The great-circle distance between the origin\n *     point and the target point.\n * @param {number} bearing The bearing (in radians).\n * @param {number} [opt_radius] The sphere radius to use.  Defaults to the Earth's\n *     mean radius using the WGS84 ellipsoid.\n * @return {import(\"./coordinate.js\").Coordinate} The target point.\n */\n\nexport function offset(c1, distance, bearing, opt_radius) {\n  var radius = opt_radius || DEFAULT_RADIUS;\n  var lat1 = toRadians(c1[1]);\n  var lon1 = toRadians(c1[0]);\n  var dByR = distance / radius;\n  var lat = Math.asin(Math.sin(lat1) * Math.cos(dByR) + Math.cos(lat1) * Math.sin(dByR) * Math.cos(bearing));\n  var lon = lon1 + Math.atan2(Math.sin(bearing) * Math.sin(dByR) * Math.cos(lat1), Math.cos(dByR) - Math.sin(lat1) * Math.sin(lat));\n  return [toDegrees(lon), toDegrees(lat)];\n}","map":{"version":3,"names":["toDegrees","toRadians","DEFAULT_RADIUS","getDistance","c1","c2","opt_radius","radius","lat1","lat2","deltaLatBy2","deltaLonBy2","a","Math","sin","cos","atan2","sqrt","getLengthInternal","coordinates","length","i","ii","getLength","geometry","opt_options","options","projection","type","getType","clone","transform","coords","j","jj","getCoordinates","geometries","getGeometries","Error","getAreaInternal","area","len","x1","y1","x2","y2","getArea","abs","offset","distance","bearing","lon1","dByR","lat","asin","lon"],"sources":["/home/asura/github/smartcity/source/node_modules/ol/sphere.js"],"sourcesContent":["/**\n * @module ol/sphere\n */\nimport { toDegrees, toRadians } from './math.js';\n/**\n * Object literal with options for the {@link getLength} or {@link getArea}\n * functions.\n * @typedef {Object} SphereMetricOptions\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857']\n * Projection of the  geometry.  By default, the geometry is assumed to be in\n * Web Mercator.\n * @property {number} [radius=6371008.8] Sphere radius.  By default, the\n * [mean Earth radius](https://en.wikipedia.org/wiki/Earth_radius#Mean_radius)\n * for the WGS84 ellipsoid is used.\n */\n/**\n * The mean Earth radius (1/3 * (2a + b)) for the WGS84 ellipsoid.\n * https://en.wikipedia.org/wiki/Earth_radius#Mean_radius\n * @type {number}\n */\nexport var DEFAULT_RADIUS = 6371008.8;\n/**\n * Get the great circle distance (in meters) between two geographic coordinates.\n * @param {Array} c1 Starting coordinate.\n * @param {Array} c2 Ending coordinate.\n * @param {number} [opt_radius] The sphere radius to use.  Defaults to the Earth's\n *     mean radius using the WGS84 ellipsoid.\n * @return {number} The great circle distance between the points (in meters).\n * @api\n */\nexport function getDistance(c1, c2, opt_radius) {\n    var radius = opt_radius || DEFAULT_RADIUS;\n    var lat1 = toRadians(c1[1]);\n    var lat2 = toRadians(c2[1]);\n    var deltaLatBy2 = (lat2 - lat1) / 2;\n    var deltaLonBy2 = toRadians(c2[0] - c1[0]) / 2;\n    var a = Math.sin(deltaLatBy2) * Math.sin(deltaLatBy2) +\n        Math.sin(deltaLonBy2) *\n            Math.sin(deltaLonBy2) *\n            Math.cos(lat1) *\n            Math.cos(lat2);\n    return 2 * radius * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n}\n/**\n * Get the cumulative great circle length of linestring coordinates (geographic).\n * @param {Array} coordinates Linestring coordinates.\n * @param {number} radius The sphere radius to use.\n * @return {number} The length (in meters).\n */\nfunction getLengthInternal(coordinates, radius) {\n    var length = 0;\n    for (var i = 0, ii = coordinates.length; i < ii - 1; ++i) {\n        length += getDistance(coordinates[i], coordinates[i + 1], radius);\n    }\n    return length;\n}\n/**\n * Get the spherical length of a geometry.  This length is the sum of the\n * great circle distances between coordinates.  For polygons, the length is\n * the sum of all rings.  For points, the length is zero.  For multi-part\n * geometries, the length is the sum of the length of each part.\n * @param {import(\"./geom/Geometry.js\").default} geometry A geometry.\n * @param {SphereMetricOptions} [opt_options] Options for the\n * length calculation.  By default, geometries are assumed to be in 'EPSG:3857'.\n * You can change this by providing a `projection` option.\n * @return {number} The spherical length (in meters).\n * @api\n */\nexport function getLength(geometry, opt_options) {\n    var options = opt_options || {};\n    var radius = options.radius || DEFAULT_RADIUS;\n    var projection = options.projection || 'EPSG:3857';\n    var type = geometry.getType();\n    if (type !== 'GeometryCollection') {\n        geometry = geometry.clone().transform(projection, 'EPSG:4326');\n    }\n    var length = 0;\n    var coordinates, coords, i, ii, j, jj;\n    switch (type) {\n        case 'Point':\n        case 'MultiPoint': {\n            break;\n        }\n        case 'LineString':\n        case 'LinearRing': {\n            coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (geometry).getCoordinates();\n            length = getLengthInternal(coordinates, radius);\n            break;\n        }\n        case 'MultiLineString':\n        case 'Polygon': {\n            coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (geometry).getCoordinates();\n            for (i = 0, ii = coordinates.length; i < ii; ++i) {\n                length += getLengthInternal(coordinates[i], radius);\n            }\n            break;\n        }\n        case 'MultiPolygon': {\n            coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (geometry).getCoordinates();\n            for (i = 0, ii = coordinates.length; i < ii; ++i) {\n                coords = coordinates[i];\n                for (j = 0, jj = coords.length; j < jj; ++j) {\n                    length += getLengthInternal(coords[j], radius);\n                }\n            }\n            break;\n        }\n        case 'GeometryCollection': {\n            var geometries = \n            /** @type {import(\"./geom/GeometryCollection.js\").default} */ (geometry).getGeometries();\n            for (i = 0, ii = geometries.length; i < ii; ++i) {\n                length += getLength(geometries[i], opt_options);\n            }\n            break;\n        }\n        default: {\n            throw new Error('Unsupported geometry type: ' + type);\n        }\n    }\n    return length;\n}\n/**\n * Returns the spherical area for a list of coordinates.\n *\n * [Reference](https://trs.jpl.nasa.gov/handle/2014/40409)\n * Robert. G. Chamberlain and William H. Duquette, \"Some Algorithms for\n * Polygons on a Sphere\", JPL Publication 07-03, Jet Propulsion\n * Laboratory, Pasadena, CA, June 2007\n *\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates List of coordinates of a linear\n * ring. If the ring is oriented clockwise, the area will be positive,\n * otherwise it will be negative.\n * @param {number} radius The sphere radius.\n * @return {number} Area (in square meters).\n */\nfunction getAreaInternal(coordinates, radius) {\n    var area = 0;\n    var len = coordinates.length;\n    var x1 = coordinates[len - 1][0];\n    var y1 = coordinates[len - 1][1];\n    for (var i = 0; i < len; i++) {\n        var x2 = coordinates[i][0];\n        var y2 = coordinates[i][1];\n        area +=\n            toRadians(x2 - x1) *\n                (2 + Math.sin(toRadians(y1)) + Math.sin(toRadians(y2)));\n        x1 = x2;\n        y1 = y2;\n    }\n    return (area * radius * radius) / 2.0;\n}\n/**\n * Get the spherical area of a geometry.  This is the area (in meters) assuming\n * that polygon edges are segments of great circles on a sphere.\n * @param {import(\"./geom/Geometry.js\").default} geometry A geometry.\n * @param {SphereMetricOptions} [opt_options] Options for the area\n *     calculation.  By default, geometries are assumed to be in 'EPSG:3857'.\n *     You can change this by providing a `projection` option.\n * @return {number} The spherical area (in square meters).\n * @api\n */\nexport function getArea(geometry, opt_options) {\n    var options = opt_options || {};\n    var radius = options.radius || DEFAULT_RADIUS;\n    var projection = options.projection || 'EPSG:3857';\n    var type = geometry.getType();\n    if (type !== 'GeometryCollection') {\n        geometry = geometry.clone().transform(projection, 'EPSG:4326');\n    }\n    var area = 0;\n    var coordinates, coords, i, ii, j, jj;\n    switch (type) {\n        case 'Point':\n        case 'MultiPoint':\n        case 'LineString':\n        case 'MultiLineString':\n        case 'LinearRing': {\n            break;\n        }\n        case 'Polygon': {\n            coordinates = /** @type {import(\"./geom/Polygon.js\").default} */ (geometry).getCoordinates();\n            area = Math.abs(getAreaInternal(coordinates[0], radius));\n            for (i = 1, ii = coordinates.length; i < ii; ++i) {\n                area -= Math.abs(getAreaInternal(coordinates[i], radius));\n            }\n            break;\n        }\n        case 'MultiPolygon': {\n            coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (geometry).getCoordinates();\n            for (i = 0, ii = coordinates.length; i < ii; ++i) {\n                coords = coordinates[i];\n                area += Math.abs(getAreaInternal(coords[0], radius));\n                for (j = 1, jj = coords.length; j < jj; ++j) {\n                    area -= Math.abs(getAreaInternal(coords[j], radius));\n                }\n            }\n            break;\n        }\n        case 'GeometryCollection': {\n            var geometries = \n            /** @type {import(\"./geom/GeometryCollection.js\").default} */ (geometry).getGeometries();\n            for (i = 0, ii = geometries.length; i < ii; ++i) {\n                area += getArea(geometries[i], opt_options);\n            }\n            break;\n        }\n        default: {\n            throw new Error('Unsupported geometry type: ' + type);\n        }\n    }\n    return area;\n}\n/**\n * Returns the coordinate at the given distance and bearing from `c1`.\n *\n * @param {import(\"./coordinate.js\").Coordinate} c1 The origin point (`[lon, lat]` in degrees).\n * @param {number} distance The great-circle distance between the origin\n *     point and the target point.\n * @param {number} bearing The bearing (in radians).\n * @param {number} [opt_radius] The sphere radius to use.  Defaults to the Earth's\n *     mean radius using the WGS84 ellipsoid.\n * @return {import(\"./coordinate.js\").Coordinate} The target point.\n */\nexport function offset(c1, distance, bearing, opt_radius) {\n    var radius = opt_radius || DEFAULT_RADIUS;\n    var lat1 = toRadians(c1[1]);\n    var lon1 = toRadians(c1[0]);\n    var dByR = distance / radius;\n    var lat = Math.asin(Math.sin(lat1) * Math.cos(dByR) +\n        Math.cos(lat1) * Math.sin(dByR) * Math.cos(bearing));\n    var lon = lon1 +\n        Math.atan2(Math.sin(bearing) * Math.sin(dByR) * Math.cos(lat1), Math.cos(dByR) - Math.sin(lat1) * Math.sin(lat));\n    return [toDegrees(lon), toDegrees(lat)];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}