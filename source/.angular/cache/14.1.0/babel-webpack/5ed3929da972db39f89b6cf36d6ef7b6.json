{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/interaction/Modify\n */\n\n\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport RBush from '../structs/RBush.js';\nimport VectorEventType from '../source/VectorEventType.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport { altKeyOnly, always, primaryAction, singleClick } from '../events/condition.js';\nimport { boundingExtent, buffer as bufferExtent, createOrUpdateFromCoordinate as createExtent } from '../extent.js';\nimport { closestOnSegment, distance as coordinateDistance, equals as coordinatesEqual, squaredDistance as squaredCoordinateDistance, squaredDistanceToSegment } from '../coordinate.js';\nimport { createEditingStyle } from '../style/Style.js';\nimport { equals, includes } from '../array.js';\nimport { fromCircle } from '../geom/Polygon.js';\nimport { fromUserCoordinate, fromUserExtent, getUserProjection, toUserCoordinate, toUserExtent } from '../proj.js';\nimport { getUid } from '../util.js';\n/**\n * The segment index assigned to a circle's center when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\n\nvar CIRCLE_CENTER_INDEX = 0;\n/**\n * The segment index assigned to a circle's circumference when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\n\nvar CIRCLE_CIRCUMFERENCE_INDEX = 1;\nvar tempExtent = [0, 0, 0, 0];\nvar tempSegment = [];\n/**\n * @enum {string}\n */\n\nvar ModifyEventType = {\n  /**\n   * Triggered upon feature modification start\n   * @event ModifyEvent#modifystart\n   * @api\n   */\n  MODIFYSTART: 'modifystart',\n\n  /**\n   * Triggered upon feature modification end\n   * @event ModifyEvent#modifyend\n   * @api\n   */\n  MODIFYEND: 'modifyend'\n};\n/**\n * @typedef {Object} SegmentData\n * @property {Array<number>} [depth] Depth.\n * @property {import(\"../Feature\").FeatureLike} feature Feature.\n * @property {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n * @property {number} [index] Index.\n * @property {Array<Array<number>>} segment Segment.\n * @property {Array<SegmentData>} [featureSegments] FeatureSegments.\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event will be considered to add or move a\n * vertex to the sketch. Default is\n * {@link module:ol/events/condition.primaryAction}.\n * @property {import(\"../events/condition.js\").Condition} [deleteCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. By default,\n * {@link module:ol/events/condition.singleClick} with\n * {@link module:ol/events/condition.altKeyOnly} results in a vertex deletion.\n * @property {import(\"../events/condition.js\").Condition} [insertVertexCondition] A\n * function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether a new vertex should be added to the sketch\n * features. Default is {@link module:ol/events/condition.always}.\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {import(\"../style/Style.js\").StyleLike} [style]\n * Style used for the modification point or vertex. For linestrings and polygons, this will\n * be the affected vertex, for circles a point along the circle, and for points the actual\n * point. If not configured, the default edit style is used (see {@link module:ol/style/Style~Style}).\n * When using a style function, the point feature passed to the function will have a `features`\n * property - an array whose entries are the features that are being modified, and a `geometries`\n * property - an array whose entries are the geometries that are being modified. Both arrays are\n * in the same order. The `geometries` are only useful when modifying geometry collections, where\n * the geometry will be the particular geometry from the collection that is being modified.\n * @property {VectorSource} [source] The vector source with\n * features to modify.  If a vector source is not provided, a feature collection\n * must be provided with the `features` option.\n * @property {boolean|import(\"../layer/BaseVector\").default} [hitDetection] When configured, point\n * features will be considered for modification based on their visual appearance, instead of being within\n * the `pixelTolerance` from the pointer location. When a {@link module:ol/layer/BaseVector~BaseVectorLayer} is\n * provided, only the rendered representation of the features on that layer will be considered.\n * @property {Collection<Feature>} [features]\n * The features the interaction works on.  If a feature collection is not\n * provided, a vector source must be provided with the `source` option.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n * @property {boolean} [snapToPointer=!hitDetection] The vertex, point or segment being modified snaps to the\n * pointer coordinate when clicked within the `pixelTolerance`.\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Modify~Modify} instances are\n * instances of this type.\n */\n\nvar ModifyEvent =\n/** @class */\nfunction (_super) {\n  __extends(ModifyEvent, _super);\n  /**\n   * @param {ModifyEventType} type Type.\n   * @param {Collection<import(\"../Feature\").FeatureLike>} features\n   * The features modified.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent\n   * Associated {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n   */\n\n\n  function ModifyEvent(type, features, mapBrowserEvent) {\n    var _this = _super.call(this, type) || this;\n    /**\n     * The features being modified.\n     * @type {Collection<import(\"../Feature\").FeatureLike>}\n     * @api\n     */\n\n\n    _this.features = features;\n    /**\n     * Associated {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @api\n     */\n\n    _this.mapBrowserEvent = mapBrowserEvent;\n    return _this;\n  }\n\n  return ModifyEvent;\n}(Event);\n\nexport { ModifyEvent };\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'modifyend'|'modifystart', ModifyEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'modifyend'|'modifystart', Return>} ModifyOnSignature\n */\n\n/**\n * @classdesc\n * Interaction for modifying feature geometries.  To modify features that have\n * been added to an existing source, construct the modify interaction with the\n * `source` option.  If you want to modify features in a collection (for example,\n * the collection used by a select interaction), construct the interaction with\n * the `features` option.  The interaction must be constructed with either a\n * `source` or `features` option.\n *\n * Cartesian distance from the pointer is used to determine the features that\n * will be modified. This means that geometries will only be considered for\n * modification when they are within the configured `pixelTolerance`. For point\n * geometries, the `hitDetection` option can be used to match their visual\n * appearance.\n *\n * By default, the interaction will allow deletion of vertices when the `alt`\n * key is pressed.  To configure the interaction with a different condition\n * for deletion, use the `deleteCondition` option.\n * @fires ModifyEvent\n * @api\n */\n\nvar Modify =\n/** @class */\nfunction (_super) {\n  __extends(Modify, _super);\n  /**\n   * @param {Options} options Options.\n   */\n\n\n  function Modify(options) {\n    var _this = _super.call(this,\n    /** @type {import(\"./Pointer.js\").Options} */\n    options) || this;\n    /***\n     * @type {ModifyOnSignature<import(\"../events\").EventsKey>}\n     */\n\n\n    _this.on;\n    /***\n     * @type {ModifyOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    _this.once;\n    /***\n     * @type {ModifyOnSignature<void>}\n     */\n\n    _this.un;\n    /** @private */\n\n    _this.boundHandleFeatureChange_ = _this.handleFeatureChange_.bind(_this);\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n\n    _this.condition_ = options.condition ? options.condition : primaryAction;\n    /**\n     * @private\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\n     * @return {boolean} Combined condition result.\n     */\n\n    _this.defaultDeleteCondition_ = function (mapBrowserEvent) {\n      return altKeyOnly(mapBrowserEvent) && singleClick(mapBrowserEvent);\n    };\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n\n\n    _this.deleteCondition_ = options.deleteCondition ? options.deleteCondition : _this.defaultDeleteCondition_;\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n\n    _this.insertVertexCondition_ = options.insertVertexCondition ? options.insertVertexCondition : always;\n    /**\n     * Editing vertex.\n     * @type {Feature<Point>}\n     * @private\n     */\n\n    _this.vertexFeature_ = null;\n    /**\n     * Segments intersecting {@link this.vertexFeature_} by segment uid.\n     * @type {Object<string, boolean>}\n     * @private\n     */\n\n    _this.vertexSegments_ = null;\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n\n    _this.lastPixel_ = [0, 0];\n    /**\n     * Tracks if the next `singleclick` event should be ignored to prevent\n     * accidental deletion right after vertex creation.\n     * @type {boolean}\n     * @private\n     */\n\n    _this.ignoreNextSingleClick_ = false;\n    /**\n     * @type {Collection<import(\"../Feature\").FeatureLike>}\n     * @private\n     */\n\n    _this.featuresBeingModified_ = null;\n    /**\n     * Segment RTree for each layer\n     * @type {RBush<SegmentData>}\n     * @private\n     */\n\n    _this.rBush_ = new RBush();\n    /**\n     * @type {number}\n     * @private\n     */\n\n    _this.pixelTolerance_ = options.pixelTolerance !== undefined ? options.pixelTolerance : 10;\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    _this.snappedToVertex_ = false;\n    /**\n     * Indicate whether the interaction is currently changing a feature's\n     * coordinates.\n     * @type {boolean}\n     * @private\n     */\n\n    _this.changingFeature_ = false;\n    /**\n     * @type {Array}\n     * @private\n     */\n\n    _this.dragSegments_ = [];\n    /**\n     * Draw overlay where sketch features are drawn.\n     * @type {VectorLayer}\n     * @private\n     */\n\n    _this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!options.wrapX\n      }),\n      style: options.style ? options.style : getDefaultStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true\n    });\n    /**\n     * @const\n     * @private\n     * @type {!Object<string, function(Feature, import(\"../geom/Geometry.js\").default): void>}\n     */\n\n    _this.SEGMENT_WRITERS_ = {\n      'Point': _this.writePointGeometry_.bind(_this),\n      'LineString': _this.writeLineStringGeometry_.bind(_this),\n      'LinearRing': _this.writeLineStringGeometry_.bind(_this),\n      'Polygon': _this.writePolygonGeometry_.bind(_this),\n      'MultiPoint': _this.writeMultiPointGeometry_.bind(_this),\n      'MultiLineString': _this.writeMultiLineStringGeometry_.bind(_this),\n      'MultiPolygon': _this.writeMultiPolygonGeometry_.bind(_this),\n      'Circle': _this.writeCircleGeometry_.bind(_this),\n      'GeometryCollection': _this.writeGeometryCollectionGeometry_.bind(_this)\n    };\n    /**\n     * @type {VectorSource}\n     * @private\n     */\n\n    _this.source_ = null;\n    /**\n     * @type {boolean|import(\"../layer/BaseVector\").default}\n     */\n\n    _this.hitDetection_ = null;\n    var features;\n\n    if (options.features) {\n      features = options.features;\n    } else if (options.source) {\n      _this.source_ = options.source;\n      features = new Collection(_this.source_.getFeatures());\n\n      _this.source_.addEventListener(VectorEventType.ADDFEATURE, _this.handleSourceAdd_.bind(_this));\n\n      _this.source_.addEventListener(VectorEventType.REMOVEFEATURE, _this.handleSourceRemove_.bind(_this));\n    }\n\n    if (!features) {\n      throw new Error('The modify interaction requires features, a source or a layer');\n    }\n\n    if (options.hitDetection) {\n      _this.hitDetection_ = options.hitDetection;\n    }\n    /**\n     * @type {Collection<import(\"../Feature.js\").FeatureLike>}\n     * @private\n     */\n\n\n    _this.features_ = features;\n\n    _this.features_.forEach(_this.addFeature_.bind(_this));\n\n    _this.features_.addEventListener(CollectionEventType.ADD, _this.handleFeatureAdd_.bind(_this));\n\n    _this.features_.addEventListener(CollectionEventType.REMOVE, _this.handleFeatureRemove_.bind(_this));\n    /**\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @private\n     */\n\n\n    _this.lastPointerEvent_ = null;\n    /**\n     * Delta (x, y in map units) between matched rtree vertex and pointer vertex.\n     * @type {Array<number>}\n     */\n\n    _this.delta_ = [0, 0];\n    /**\n     * @private\n     */\n\n    _this.snapToPointer_ = options.snapToPointer === undefined ? !_this.hitDetection_ : options.snapToPointer;\n    return _this;\n  }\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n\n\n  Modify.prototype.addFeature_ = function (feature) {\n    var geometry = feature.getGeometry();\n\n    if (geometry) {\n      var writer = this.SEGMENT_WRITERS_[geometry.getType()];\n\n      if (writer) {\n        writer(feature, geometry);\n      }\n    }\n\n    var map = this.getMap();\n\n    if (map && map.isRendered() && this.getActive()) {\n      this.handlePointerAtPixel_(this.lastPixel_, map);\n    }\n\n    feature.addEventListener(EventType.CHANGE, this.boundHandleFeatureChange_);\n  };\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Map browser event.\n   * @param {Array<Array<SegmentData>>} segments The segments subject to modification.\n   * @private\n   */\n\n\n  Modify.prototype.willModifyFeatures_ = function (evt, segments) {\n    if (!this.featuresBeingModified_) {\n      this.featuresBeingModified_ = new Collection();\n      var features = this.featuresBeingModified_.getArray();\n\n      for (var i = 0, ii = segments.length; i < ii; ++i) {\n        var segment = segments[i];\n\n        for (var s = 0, ss = segment.length; s < ss; ++s) {\n          var feature = segment[s].feature;\n\n          if (feature && features.indexOf(feature) === -1) {\n            this.featuresBeingModified_.push(feature);\n          }\n        }\n      }\n\n      if (this.featuresBeingModified_.getLength() === 0) {\n        this.featuresBeingModified_ = null;\n      } else {\n        this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYSTART, this.featuresBeingModified_, evt));\n      }\n    }\n  };\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n\n\n  Modify.prototype.removeFeature_ = function (feature) {\n    this.removeFeatureSegmentData_(feature); // Remove the vertex feature if the collection of candidate features is empty.\n\n    if (this.vertexFeature_ && this.features_.getLength() === 0) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n\n    feature.removeEventListener(EventType.CHANGE, this.boundHandleFeatureChange_);\n  };\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n\n\n  Modify.prototype.removeFeatureSegmentData_ = function (feature) {\n    var rBush = this.rBush_;\n    /** @type {Array<SegmentData>} */\n\n    var nodesToRemove = [];\n    rBush.forEach(\n    /**\n     * @param {SegmentData} node RTree node.\n     */\n    function (node) {\n      if (feature === node.feature) {\n        nodesToRemove.push(node);\n      }\n    });\n\n    for (var i = nodesToRemove.length - 1; i >= 0; --i) {\n      var nodeToRemove = nodesToRemove[i];\n\n      for (var j = this.dragSegments_.length - 1; j >= 0; --j) {\n        if (this.dragSegments_[j][0] === nodeToRemove) {\n          this.dragSegments_.splice(j, 1);\n        }\n      }\n\n      rBush.remove(nodeToRemove);\n    }\n  };\n  /**\n   * Activate or deactivate the interaction.\n   * @param {boolean} active Active.\n   * @observable\n   * @api\n   */\n\n\n  Modify.prototype.setActive = function (active) {\n    if (this.vertexFeature_ && !active) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n\n    _super.prototype.setActive.call(this, active);\n  };\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   */\n\n\n  Modify.prototype.setMap = function (map) {\n    this.overlay_.setMap(map);\n\n    _super.prototype.setMap.call(this, map);\n  };\n  /**\n   * Get the overlay layer that this interaction renders the modification point or vertex to.\n   * @return {VectorLayer} Overlay layer.\n   * @api\n   */\n\n\n  Modify.prototype.getOverlay = function () {\n    return this.overlay_;\n  };\n  /**\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n\n\n  Modify.prototype.handleSourceAdd_ = function (event) {\n    if (event.feature) {\n      this.features_.push(event.feature);\n    }\n  };\n  /**\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n\n\n  Modify.prototype.handleSourceRemove_ = function (event) {\n    if (event.feature) {\n      this.features_.remove(event.feature);\n    }\n  };\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n   * @private\n   */\n\n\n  Modify.prototype.handleFeatureAdd_ = function (evt) {\n    this.addFeature_(\n    /** @type {Feature} */\n    evt.element);\n  };\n  /**\n   * @param {import(\"../events/Event.js\").default} evt Event.\n   * @private\n   */\n\n\n  Modify.prototype.handleFeatureChange_ = function (evt) {\n    if (!this.changingFeature_) {\n      var feature =\n      /** @type {Feature} */\n      evt.target;\n      this.removeFeature_(feature);\n      this.addFeature_(feature);\n    }\n  };\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n   * @private\n   */\n\n\n  Modify.prototype.handleFeatureRemove_ = function (evt) {\n    var feature =\n    /** @type {Feature} */\n    evt.element;\n    this.removeFeature_(feature);\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {Point} geometry Geometry.\n   * @private\n   */\n\n\n  Modify.prototype.writePointGeometry_ = function (feature, geometry) {\n    var coordinates = geometry.getCoordinates();\n    /** @type {SegmentData} */\n\n    var segmentData = {\n      feature: feature,\n      geometry: geometry,\n      segment: [coordinates, coordinates]\n    };\n    this.rBush_.insert(geometry.getExtent(), segmentData);\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  Modify.prototype.writeMultiPointGeometry_ = function (feature, geometry) {\n    var points = geometry.getCoordinates();\n\n    for (var i = 0, ii = points.length; i < ii; ++i) {\n      var coordinates = points[i];\n      /** @type {SegmentData} */\n\n      var segmentData = {\n        feature: feature,\n        geometry: geometry,\n        depth: [i],\n        index: i,\n        segment: [coordinates, coordinates]\n      };\n      this.rBush_.insert(geometry.getExtent(), segmentData);\n    }\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/LineString.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  Modify.prototype.writeLineStringGeometry_ = function (feature, geometry) {\n    var coordinates = geometry.getCoordinates();\n\n    for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n      var segment = coordinates.slice(i, i + 2);\n      /** @type {SegmentData} */\n\n      var segmentData = {\n        feature: feature,\n        geometry: geometry,\n        index: i,\n        segment: segment\n      };\n      this.rBush_.insert(boundingExtent(segment), segmentData);\n    }\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiLineString.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  Modify.prototype.writeMultiLineStringGeometry_ = function (feature, geometry) {\n    var lines = geometry.getCoordinates();\n\n    for (var j = 0, jj = lines.length; j < jj; ++j) {\n      var coordinates = lines[j];\n\n      for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        var segment = coordinates.slice(i, i + 2);\n        /** @type {SegmentData} */\n\n        var segmentData = {\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment\n        };\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/Polygon.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  Modify.prototype.writePolygonGeometry_ = function (feature, geometry) {\n    var rings = geometry.getCoordinates();\n\n    for (var j = 0, jj = rings.length; j < jj; ++j) {\n      var coordinates = rings[j];\n\n      for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        var segment = coordinates.slice(i, i + 2);\n        /** @type {SegmentData} */\n\n        var segmentData = {\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment\n        };\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  Modify.prototype.writeMultiPolygonGeometry_ = function (feature, geometry) {\n    var polygons = geometry.getCoordinates();\n\n    for (var k = 0, kk = polygons.length; k < kk; ++k) {\n      var rings = polygons[k];\n\n      for (var j = 0, jj = rings.length; j < jj; ++j) {\n        var coordinates = rings[j];\n\n        for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n          var segment = coordinates.slice(i, i + 2);\n          /** @type {SegmentData} */\n\n          var segmentData = {\n            feature: feature,\n            geometry: geometry,\n            depth: [j, k],\n            index: i,\n            segment: segment\n          };\n          this.rBush_.insert(boundingExtent(segment), segmentData);\n        }\n      }\n    }\n  };\n  /**\n   * We convert a circle into two segments.  The segment at index\n   * {@link CIRCLE_CENTER_INDEX} is the\n   * circle's center (a point).  The segment at index\n   * {@link CIRCLE_CIRCUMFERENCE_INDEX} is\n   * the circumference, and is not a line segment.\n   *\n   * @param {Feature} feature Feature.\n   * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  Modify.prototype.writeCircleGeometry_ = function (feature, geometry) {\n    var coordinates = geometry.getCenter();\n    /** @type {SegmentData} */\n\n    var centerSegmentData = {\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CENTER_INDEX,\n      segment: [coordinates, coordinates]\n    };\n    /** @type {SegmentData} */\n\n    var circumferenceSegmentData = {\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CIRCUMFERENCE_INDEX,\n      segment: [coordinates, coordinates]\n    };\n    var featureSegments = [centerSegmentData, circumferenceSegmentData];\n    centerSegmentData.featureSegments = featureSegments;\n    circumferenceSegmentData.featureSegments = featureSegments;\n    this.rBush_.insert(createExtent(coordinates), centerSegmentData);\n    var circleGeometry =\n    /** @type {import(\"../geom/Geometry.js\").default} */\n    geometry;\n    var userProjection = getUserProjection();\n\n    if (userProjection && this.getMap()) {\n      var projection = this.getMap().getView().getProjection();\n      circleGeometry = circleGeometry.clone().transform(userProjection, projection);\n      circleGeometry = fromCircle(\n      /** @type {import(\"../geom/Circle.js\").default} */\n      circleGeometry).transform(projection, userProjection);\n    }\n\n    this.rBush_.insert(circleGeometry.getExtent(), circumferenceSegmentData);\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  Modify.prototype.writeGeometryCollectionGeometry_ = function (feature, geometry) {\n    var geometries = geometry.getGeometriesArray();\n\n    for (var i = 0; i < geometries.length; ++i) {\n      var geometry_1 = geometries[i];\n      var writer = this.SEGMENT_WRITERS_[geometry_1.getType()];\n      writer(feature, geometry_1);\n    }\n  };\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n   * @param {Array<import(\"../Feature\").FeatureLike>} features The features being modified.\n   * @param {Array<import(\"../geom/SimpleGeometry.js\").default>} geometries The geometries being modified.\n   * @return {Feature} Vertex feature.\n   * @private\n   */\n\n\n  Modify.prototype.createOrUpdateVertexFeature_ = function (coordinates, features, geometries) {\n    var vertexFeature = this.vertexFeature_;\n\n    if (!vertexFeature) {\n      vertexFeature = new Feature(new Point(coordinates));\n      this.vertexFeature_ = vertexFeature;\n      this.overlay_.getSource().addFeature(vertexFeature);\n    } else {\n      var geometry = vertexFeature.getGeometry();\n      geometry.setCoordinates(coordinates);\n    }\n\n    vertexFeature.set('features', features);\n    vertexFeature.set('geometries', geometries);\n    return vertexFeature;\n  };\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may modify the geometry.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   */\n\n\n  Modify.prototype.handleEvent = function (mapBrowserEvent) {\n    if (!mapBrowserEvent.originalEvent) {\n      return true;\n    }\n\n    this.lastPointerEvent_ = mapBrowserEvent;\n    var handled;\n\n    if (!mapBrowserEvent.map.getView().getInteracting() && mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE && !this.handlingDownUpSequence) {\n      this.handlePointerMove_(mapBrowserEvent);\n    }\n\n    if (this.vertexFeature_ && this.deleteCondition_(mapBrowserEvent)) {\n      if (mapBrowserEvent.type != MapBrowserEventType.SINGLECLICK || !this.ignoreNextSingleClick_) {\n        handled = this.removePoint();\n      } else {\n        handled = true;\n      }\n    }\n\n    if (mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK) {\n      this.ignoreNextSingleClick_ = false;\n    }\n\n    return _super.prototype.handleEvent.call(this, mapBrowserEvent) && !handled;\n  };\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   */\n\n\n  Modify.prototype.handleDragEvent = function (evt) {\n    this.ignoreNextSingleClick_ = false;\n    this.willModifyFeatures_(evt, this.dragSegments_);\n    var vertex = [evt.coordinate[0] + this.delta_[0], evt.coordinate[1] + this.delta_[1]];\n    var features = [];\n    var geometries = [];\n\n    for (var i = 0, ii = this.dragSegments_.length; i < ii; ++i) {\n      var dragSegment = this.dragSegments_[i];\n      var segmentData = dragSegment[0];\n      var feature = segmentData.feature;\n\n      if (features.indexOf(feature) === -1) {\n        features.push(feature);\n      }\n\n      var geometry = segmentData.geometry;\n\n      if (geometries.indexOf(geometry) === -1) {\n        geometries.push(geometry);\n      }\n\n      var depth = segmentData.depth;\n      var coordinates = void 0;\n      var segment = segmentData.segment;\n      var index = dragSegment[1];\n\n      while (vertex.length < geometry.getStride()) {\n        vertex.push(segment[index][vertex.length]);\n      }\n\n      switch (geometry.getType()) {\n        case 'Point':\n          coordinates = vertex;\n          segment[0] = vertex;\n          segment[1] = vertex;\n          break;\n\n        case 'MultiPoint':\n          coordinates = geometry.getCoordinates();\n          coordinates[segmentData.index] = vertex;\n          segment[0] = vertex;\n          segment[1] = vertex;\n          break;\n\n        case 'LineString':\n          coordinates = geometry.getCoordinates();\n          coordinates[segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n\n        case 'MultiLineString':\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n\n        case 'Polygon':\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n\n        case 'MultiPolygon':\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[1]][depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n\n        case 'Circle':\n          segment[0] = vertex;\n          segment[1] = vertex;\n\n          if (segmentData.index === CIRCLE_CENTER_INDEX) {\n            this.changingFeature_ = true;\n            geometry.setCenter(vertex);\n            this.changingFeature_ = false;\n          } else {\n            // We're dragging the circle's circumference:\n            this.changingFeature_ = true;\n            var projection = evt.map.getView().getProjection();\n            var radius = coordinateDistance(fromUserCoordinate(geometry.getCenter(), projection), fromUserCoordinate(vertex, projection));\n            var userProjection = getUserProjection();\n\n            if (userProjection) {\n              var circleGeometry = geometry.clone().transform(userProjection, projection);\n              circleGeometry.setRadius(radius);\n              radius = circleGeometry.transform(projection, userProjection).getRadius();\n            }\n\n            geometry.setRadius(radius);\n            this.changingFeature_ = false;\n          }\n\n          break;\n\n        default: // pass\n\n      }\n\n      if (coordinates) {\n        this.setGeometryCoordinates_(geometry, coordinates);\n      }\n    }\n\n    this.createOrUpdateVertexFeature_(vertex, features, geometries);\n  };\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @return {boolean} If the event was consumed.\n   */\n\n\n  Modify.prototype.handleDownEvent = function (evt) {\n    if (!this.condition_(evt)) {\n      return false;\n    }\n\n    var pixelCoordinate = evt.coordinate;\n    this.handlePointerAtPixel_(evt.pixel, evt.map, pixelCoordinate);\n    this.dragSegments_.length = 0;\n    this.featuresBeingModified_ = null;\n    var vertexFeature = this.vertexFeature_;\n\n    if (vertexFeature) {\n      var projection = evt.map.getView().getProjection();\n      var insertVertices = [];\n      var vertex = vertexFeature.getGeometry().getCoordinates();\n      var vertexExtent = boundingExtent([vertex]);\n      var segmentDataMatches = this.rBush_.getInExtent(vertexExtent);\n      var componentSegments = {};\n      segmentDataMatches.sort(compareIndexes);\n\n      for (var i = 0, ii = segmentDataMatches.length; i < ii; ++i) {\n        var segmentDataMatch = segmentDataMatches[i];\n        var segment = segmentDataMatch.segment;\n        var uid = getUid(segmentDataMatch.geometry);\n        var depth = segmentDataMatch.depth;\n\n        if (depth) {\n          uid += '-' + depth.join('-'); // separate feature components\n        }\n\n        if (!componentSegments[uid]) {\n          componentSegments[uid] = new Array(2);\n        }\n\n        if (segmentDataMatch.geometry.getType() === 'Circle' && segmentDataMatch.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n          var closestVertex = closestOnSegmentData(pixelCoordinate, segmentDataMatch, projection);\n\n          if (coordinatesEqual(closestVertex, vertex) && !componentSegments[uid][0]) {\n            this.dragSegments_.push([segmentDataMatch, 0]);\n            componentSegments[uid][0] = segmentDataMatch;\n          }\n\n          continue;\n        }\n\n        if (coordinatesEqual(segment[0], vertex) && !componentSegments[uid][0]) {\n          this.dragSegments_.push([segmentDataMatch, 0]);\n          componentSegments[uid][0] = segmentDataMatch;\n          continue;\n        }\n\n        if (coordinatesEqual(segment[1], vertex) && !componentSegments[uid][1]) {\n          if (componentSegments[uid][0] && componentSegments[uid][0].index === 0) {\n            var coordinates = segmentDataMatch.geometry.getCoordinates();\n\n            switch (segmentDataMatch.geometry.getType()) {\n              // prevent dragging closed linestrings by the connecting node\n              case 'LineString':\n              case 'MultiLineString':\n                continue;\n              // if dragging the first vertex of a polygon, ensure the other segment\n              // belongs to the closing vertex of the linear ring\n\n              case 'MultiPolygon':\n                coordinates = coordinates[depth[1]];\n\n              /* falls through */\n\n              case 'Polygon':\n                if (segmentDataMatch.index !== coordinates[depth[0]].length - 2) {\n                  continue;\n                }\n\n                break;\n\n              default: // pass\n\n            }\n          }\n\n          this.dragSegments_.push([segmentDataMatch, 1]);\n          componentSegments[uid][1] = segmentDataMatch;\n          continue;\n        }\n\n        if (getUid(segment) in this.vertexSegments_ && !componentSegments[uid][0] && !componentSegments[uid][1] && this.insertVertexCondition_(evt)) {\n          insertVertices.push(segmentDataMatch);\n        }\n      }\n\n      if (insertVertices.length) {\n        this.willModifyFeatures_(evt, [insertVertices]);\n      }\n\n      for (var j = insertVertices.length - 1; j >= 0; --j) {\n        this.insertVertex_(insertVertices[j], vertex);\n      }\n    }\n\n    return !!this.vertexFeature_;\n  };\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @return {boolean} If the event was consumed.\n   */\n\n\n  Modify.prototype.handleUpEvent = function (evt) {\n    for (var i = this.dragSegments_.length - 1; i >= 0; --i) {\n      var segmentData = this.dragSegments_[i][0];\n      var geometry = segmentData.geometry;\n\n      if (geometry.getType() === 'Circle') {\n        // Update a circle object in the R* bush:\n        var coordinates = geometry.getCenter();\n        var centerSegmentData = segmentData.featureSegments[0];\n        var circumferenceSegmentData = segmentData.featureSegments[1];\n        centerSegmentData.segment[0] = coordinates;\n        centerSegmentData.segment[1] = coordinates;\n        circumferenceSegmentData.segment[0] = coordinates;\n        circumferenceSegmentData.segment[1] = coordinates;\n        this.rBush_.update(createExtent(coordinates), centerSegmentData);\n        var circleGeometry = geometry;\n        var userProjection = getUserProjection();\n\n        if (userProjection) {\n          var projection = evt.map.getView().getProjection();\n          circleGeometry = circleGeometry.clone().transform(userProjection, projection);\n          circleGeometry = fromCircle(circleGeometry).transform(projection, userProjection);\n        }\n\n        this.rBush_.update(circleGeometry.getExtent(), circumferenceSegmentData);\n      } else {\n        this.rBush_.update(boundingExtent(segmentData.segment), segmentData);\n      }\n    }\n\n    if (this.featuresBeingModified_) {\n      this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.featuresBeingModified_, evt));\n      this.featuresBeingModified_ = null;\n    }\n\n    return false;\n  };\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @private\n   */\n\n\n  Modify.prototype.handlePointerMove_ = function (evt) {\n    this.lastPixel_ = evt.pixel;\n    this.handlePointerAtPixel_(evt.pixel, evt.map, evt.coordinate);\n  };\n  /**\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   * @param {import(\"../coordinate.js\").Coordinate} [opt_coordinate] The pixel Coordinate.\n   * @private\n   */\n\n\n  Modify.prototype.handlePointerAtPixel_ = function (pixel, map, opt_coordinate) {\n    var _this = this;\n\n    var pixelCoordinate = opt_coordinate || map.getCoordinateFromPixel(pixel);\n    var projection = map.getView().getProjection();\n\n    var sortByDistance = function (a, b) {\n      return projectedDistanceToSegmentDataSquared(pixelCoordinate, a, projection) - projectedDistanceToSegmentDataSquared(pixelCoordinate, b, projection);\n    };\n    /** @type {Array<SegmentData>|undefined} */\n\n\n    var nodes;\n    var hitPointGeometry;\n\n    if (this.hitDetection_) {\n      var layerFilter = typeof this.hitDetection_ === 'object' ? function (layer) {\n        return layer === _this.hitDetection_;\n      } : undefined;\n      map.forEachFeatureAtPixel(pixel, function (feature, layer, geometry) {\n        geometry = geometry ||\n        /** @type {import(\"../geom/SimpleGeometry\").default} */\n        feature.getGeometry();\n\n        if (geometry.getType() === 'Point' && includes(_this.features_.getArray(), feature)) {\n          hitPointGeometry = geometry;\n          var coordinate = geometry.getFlatCoordinates().slice(0, 2);\n          nodes = [{\n            feature: feature,\n            geometry: geometry,\n            segment: [coordinate, coordinate]\n          }];\n        }\n\n        return true;\n      }, {\n        layerFilter: layerFilter\n      });\n    }\n\n    if (!nodes) {\n      var viewExtent = fromUserExtent(createExtent(pixelCoordinate, tempExtent), projection);\n      var buffer = map.getView().getResolution() * this.pixelTolerance_;\n      var box = toUserExtent(bufferExtent(viewExtent, buffer, tempExtent), projection);\n      nodes = this.rBush_.getInExtent(box);\n    }\n\n    if (nodes && nodes.length > 0) {\n      var node = nodes.sort(sortByDistance)[0];\n      var closestSegment = node.segment;\n      var vertex = closestOnSegmentData(pixelCoordinate, node, projection);\n      var vertexPixel = map.getPixelFromCoordinate(vertex);\n      var dist = coordinateDistance(pixel, vertexPixel);\n\n      if (hitPointGeometry || dist <= this.pixelTolerance_) {\n        /** @type {Object<string, boolean>} */\n        var vertexSegments = {};\n        vertexSegments[getUid(closestSegment)] = true;\n\n        if (!this.snapToPointer_) {\n          this.delta_[0] = vertex[0] - pixelCoordinate[0];\n          this.delta_[1] = vertex[1] - pixelCoordinate[1];\n        }\n\n        if (node.geometry.getType() === 'Circle' && node.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n          this.snappedToVertex_ = true;\n          this.createOrUpdateVertexFeature_(vertex, [node.feature], [node.geometry]);\n        } else {\n          var pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n          var pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n          var squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n          var squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n          dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n          this.snappedToVertex_ = dist <= this.pixelTolerance_;\n\n          if (this.snappedToVertex_) {\n            vertex = squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];\n          }\n\n          this.createOrUpdateVertexFeature_(vertex, [node.feature], [node.geometry]);\n          var geometries = {};\n          geometries[getUid(node.geometry)] = true;\n\n          for (var i = 1, ii = nodes.length; i < ii; ++i) {\n            var segment = nodes[i].segment;\n\n            if (coordinatesEqual(closestSegment[0], segment[0]) && coordinatesEqual(closestSegment[1], segment[1]) || coordinatesEqual(closestSegment[0], segment[1]) && coordinatesEqual(closestSegment[1], segment[0])) {\n              var geometryUid = getUid(nodes[i].geometry);\n\n              if (!(geometryUid in geometries)) {\n                geometries[geometryUid] = true;\n                vertexSegments[getUid(segment)] = true;\n              }\n            } else {\n              break;\n            }\n          }\n        }\n\n        this.vertexSegments_ = vertexSegments;\n        return;\n      }\n    }\n\n    if (this.vertexFeature_) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n  };\n  /**\n   * @param {SegmentData} segmentData Segment data.\n   * @param {import(\"../coordinate.js\").Coordinate} vertex Vertex.\n   * @private\n   */\n\n\n  Modify.prototype.insertVertex_ = function (segmentData, vertex) {\n    var segment = segmentData.segment;\n    var feature = segmentData.feature;\n    var geometry = segmentData.geometry;\n    var depth = segmentData.depth;\n    var index = segmentData.index;\n    var coordinates;\n\n    while (vertex.length < geometry.getStride()) {\n      vertex.push(0);\n    }\n\n    switch (geometry.getType()) {\n      case 'MultiLineString':\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n\n      case 'Polygon':\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n\n      case 'MultiPolygon':\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[1]][depth[0]].splice(index + 1, 0, vertex);\n        break;\n\n      case 'LineString':\n        coordinates = geometry.getCoordinates();\n        coordinates.splice(index + 1, 0, vertex);\n        break;\n\n      default:\n        return;\n    }\n\n    this.setGeometryCoordinates_(geometry, coordinates);\n    var rTree = this.rBush_;\n    rTree.remove(segmentData);\n    this.updateSegmentIndices_(geometry, index, depth, 1);\n    /** @type {SegmentData} */\n\n    var newSegmentData = {\n      segment: [segment[0], vertex],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index\n    };\n    rTree.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n    this.dragSegments_.push([newSegmentData, 1]);\n    /** @type {SegmentData} */\n\n    var newSegmentData2 = {\n      segment: [vertex, segment[1]],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index + 1\n    };\n    rTree.insert(boundingExtent(newSegmentData2.segment), newSegmentData2);\n    this.dragSegments_.push([newSegmentData2, 0]);\n    this.ignoreNextSingleClick_ = true;\n  };\n  /**\n   * Removes the vertex currently being pointed.\n   * @return {boolean} True when a vertex was removed.\n   * @api\n   */\n\n\n  Modify.prototype.removePoint = function () {\n    if (this.lastPointerEvent_ && this.lastPointerEvent_.type != MapBrowserEventType.POINTERDRAG) {\n      var evt = this.lastPointerEvent_;\n      this.willModifyFeatures_(evt, this.dragSegments_);\n      var removed = this.removeVertex_();\n\n      if (this.featuresBeingModified_) {\n        this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.featuresBeingModified_, evt));\n      }\n\n      this.featuresBeingModified_ = null;\n      return removed;\n    }\n\n    return false;\n  };\n  /**\n   * Removes a vertex from all matching features.\n   * @return {boolean} True when a vertex was removed.\n   * @private\n   */\n\n\n  Modify.prototype.removeVertex_ = function () {\n    var dragSegments = this.dragSegments_;\n    var segmentsByFeature = {};\n    var deleted = false;\n    var component, coordinates, dragSegment, geometry, i, index, left;\n    var newIndex, right, segmentData, uid;\n\n    for (i = dragSegments.length - 1; i >= 0; --i) {\n      dragSegment = dragSegments[i];\n      segmentData = dragSegment[0];\n      uid = getUid(segmentData.feature);\n\n      if (segmentData.depth) {\n        // separate feature components\n        uid += '-' + segmentData.depth.join('-');\n      }\n\n      if (!(uid in segmentsByFeature)) {\n        segmentsByFeature[uid] = {};\n      }\n\n      if (dragSegment[1] === 0) {\n        segmentsByFeature[uid].right = segmentData;\n        segmentsByFeature[uid].index = segmentData.index;\n      } else if (dragSegment[1] == 1) {\n        segmentsByFeature[uid].left = segmentData;\n        segmentsByFeature[uid].index = segmentData.index + 1;\n      }\n    }\n\n    for (uid in segmentsByFeature) {\n      right = segmentsByFeature[uid].right;\n      left = segmentsByFeature[uid].left;\n      index = segmentsByFeature[uid].index;\n      newIndex = index - 1;\n\n      if (left !== undefined) {\n        segmentData = left;\n      } else {\n        segmentData = right;\n      }\n\n      if (newIndex < 0) {\n        newIndex = 0;\n      }\n\n      geometry = segmentData.geometry;\n      coordinates = geometry.getCoordinates();\n      component = coordinates;\n      deleted = false;\n\n      switch (geometry.getType()) {\n        case 'MultiLineString':\n          if (coordinates[segmentData.depth[0]].length > 2) {\n            coordinates[segmentData.depth[0]].splice(index, 1);\n            deleted = true;\n          }\n\n          break;\n\n        case 'LineString':\n          if (coordinates.length > 2) {\n            coordinates.splice(index, 1);\n            deleted = true;\n          }\n\n          break;\n\n        case 'MultiPolygon':\n          component = component[segmentData.depth[1]];\n\n        /* falls through */\n\n        case 'Polygon':\n          component = component[segmentData.depth[0]];\n\n          if (component.length > 4) {\n            if (index == component.length - 1) {\n              index = 0;\n            }\n\n            component.splice(index, 1);\n            deleted = true;\n\n            if (index === 0) {\n              // close the ring again\n              component.pop();\n              component.push(component[0]);\n              newIndex = component.length - 1;\n            }\n          }\n\n          break;\n\n        default: // pass\n\n      }\n\n      if (deleted) {\n        this.setGeometryCoordinates_(geometry, coordinates);\n        var segments = [];\n\n        if (left !== undefined) {\n          this.rBush_.remove(left);\n          segments.push(left.segment[0]);\n        }\n\n        if (right !== undefined) {\n          this.rBush_.remove(right);\n          segments.push(right.segment[1]);\n        }\n\n        if (left !== undefined && right !== undefined) {\n          /** @type {SegmentData} */\n          var newSegmentData = {\n            depth: segmentData.depth,\n            feature: segmentData.feature,\n            geometry: segmentData.geometry,\n            index: newIndex,\n            segment: segments\n          };\n          this.rBush_.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n        }\n\n        this.updateSegmentIndices_(geometry, index, segmentData.depth, -1);\n\n        if (this.vertexFeature_) {\n          this.overlay_.getSource().removeFeature(this.vertexFeature_);\n          this.vertexFeature_ = null;\n        }\n\n        dragSegments.length = 0;\n      }\n    }\n\n    return deleted;\n  };\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {Array} coordinates Coordinates.\n   * @private\n   */\n\n\n  Modify.prototype.setGeometryCoordinates_ = function (geometry, coordinates) {\n    this.changingFeature_ = true;\n    geometry.setCoordinates(coordinates);\n    this.changingFeature_ = false;\n  };\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {number} index Index.\n   * @param {Array<number>|undefined} depth Depth.\n   * @param {number} delta Delta (1 or -1).\n   * @private\n   */\n\n\n  Modify.prototype.updateSegmentIndices_ = function (geometry, index, depth, delta) {\n    this.rBush_.forEachInExtent(geometry.getExtent(), function (segmentDataMatch) {\n      if (segmentDataMatch.geometry === geometry && (depth === undefined || segmentDataMatch.depth === undefined || equals(segmentDataMatch.depth, depth)) && segmentDataMatch.index > index) {\n        segmentDataMatch.index += delta;\n      }\n    });\n  };\n\n  return Modify;\n}(PointerInteraction);\n/**\n * @param {SegmentData} a The first segment data.\n * @param {SegmentData} b The second segment data.\n * @return {number} The difference in indexes.\n */\n\n\nfunction compareIndexes(a, b) {\n  return a.index - b.index;\n}\n/**\n * Returns the distance from a point to a line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The coordinates of the point from\n *        which to calculate the distance.\n * @param {SegmentData} segmentData The object describing the line\n *        segment we are calculating the distance to.\n * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n * @return {number} The square of the distance between a point and a line segment.\n */\n\n\nfunction projectedDistanceToSegmentDataSquared(pointCoordinates, segmentData, projection) {\n  var geometry = segmentData.geometry;\n\n  if (geometry.getType() === 'Circle') {\n    var circleGeometry =\n    /** @type {import(\"../geom/Circle.js\").default} */\n    geometry;\n\n    if (segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n      var userProjection = getUserProjection();\n\n      if (userProjection) {\n        circleGeometry =\n        /** @type {import(\"../geom/Circle.js\").default} */\n        circleGeometry.clone().transform(userProjection, projection);\n      }\n\n      var distanceToCenterSquared = squaredCoordinateDistance(circleGeometry.getCenter(), fromUserCoordinate(pointCoordinates, projection));\n      var distanceToCircumference = Math.sqrt(distanceToCenterSquared) - circleGeometry.getRadius();\n      return distanceToCircumference * distanceToCircumference;\n    }\n  }\n\n  var coordinate = fromUserCoordinate(pointCoordinates, projection);\n  tempSegment[0] = fromUserCoordinate(segmentData.segment[0], projection);\n  tempSegment[1] = fromUserCoordinate(segmentData.segment[1], projection);\n  return squaredDistanceToSegment(coordinate, tempSegment);\n}\n/**\n * Returns the point closest to a given line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The point to which a closest point\n *        should be found.\n * @param {SegmentData} segmentData The object describing the line\n *        segment which should contain the closest point.\n * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n * @return {import(\"../coordinate.js\").Coordinate} The point closest to the specified line segment.\n */\n\n\nfunction closestOnSegmentData(pointCoordinates, segmentData, projection) {\n  var geometry = segmentData.geometry;\n\n  if (geometry.getType() === 'Circle' && segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n    var circleGeometry =\n    /** @type {import(\"../geom/Circle.js\").default} */\n    geometry;\n    var userProjection = getUserProjection();\n\n    if (userProjection) {\n      circleGeometry =\n      /** @type {import(\"../geom/Circle.js\").default} */\n      circleGeometry.clone().transform(userProjection, projection);\n    }\n\n    return toUserCoordinate(circleGeometry.getClosestPoint(fromUserCoordinate(pointCoordinates, projection)), projection);\n  }\n\n  var coordinate = fromUserCoordinate(pointCoordinates, projection);\n  tempSegment[0] = fromUserCoordinate(segmentData.segment[0], projection);\n  tempSegment[1] = fromUserCoordinate(segmentData.segment[1], projection);\n  return toUserCoordinate(closestOnSegment(coordinate, tempSegment), projection);\n}\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\n\n\nfunction getDefaultStyleFunction() {\n  var style = createEditingStyle();\n  return function (feature, resolution) {\n    return style['Point'];\n  };\n}\n\nexport default Modify;","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","Collection","CollectionEventType","Event","EventType","Feature","MapBrowserEventType","Point","PointerInteraction","RBush","VectorEventType","VectorLayer","VectorSource","altKeyOnly","always","primaryAction","singleClick","boundingExtent","buffer","bufferExtent","createOrUpdateFromCoordinate","createExtent","closestOnSegment","distance","coordinateDistance","equals","coordinatesEqual","squaredDistance","squaredCoordinateDistance","squaredDistanceToSegment","createEditingStyle","includes","fromCircle","fromUserCoordinate","fromUserExtent","getUserProjection","toUserCoordinate","toUserExtent","getUid","CIRCLE_CENTER_INDEX","CIRCLE_CIRCUMFERENCE_INDEX","tempExtent","tempSegment","ModifyEventType","MODIFYSTART","MODIFYEND","ModifyEvent","_super","type","features","mapBrowserEvent","_this","Modify","options","on","once","un","boundHandleFeatureChange_","handleFeatureChange_","bind","condition_","condition","defaultDeleteCondition_","deleteCondition_","deleteCondition","insertVertexCondition_","insertVertexCondition","vertexFeature_","vertexSegments_","lastPixel_","ignoreNextSingleClick_","featuresBeingModified_","rBush_","pixelTolerance_","pixelTolerance","undefined","snappedToVertex_","changingFeature_","dragSegments_","overlay_","source","useSpatialIndex","wrapX","style","getDefaultStyleFunction","updateWhileAnimating","updateWhileInteracting","SEGMENT_WRITERS_","writePointGeometry_","writeLineStringGeometry_","writePolygonGeometry_","writeMultiPointGeometry_","writeMultiLineStringGeometry_","writeMultiPolygonGeometry_","writeCircleGeometry_","writeGeometryCollectionGeometry_","source_","hitDetection_","getFeatures","addEventListener","ADDFEATURE","handleSourceAdd_","REMOVEFEATURE","handleSourceRemove_","Error","hitDetection","features_","forEach","addFeature_","ADD","handleFeatureAdd_","REMOVE","handleFeatureRemove_","lastPointerEvent_","delta_","snapToPointer_","snapToPointer","feature","geometry","getGeometry","writer","getType","map","getMap","isRendered","getActive","handlePointerAtPixel_","CHANGE","willModifyFeatures_","evt","segments","getArray","i","ii","length","segment","s","ss","indexOf","push","getLength","dispatchEvent","removeFeature_","removeFeatureSegmentData_","getSource","removeFeature","removeEventListener","rBush","nodesToRemove","node","nodeToRemove","j","splice","remove","setActive","active","setMap","getOverlay","event","element","target","coordinates","getCoordinates","segmentData","insert","getExtent","points","depth","index","slice","lines","jj","rings","polygons","k","kk","getCenter","centerSegmentData","circumferenceSegmentData","featureSegments","circleGeometry","userProjection","projection","getView","getProjection","clone","transform","geometries","getGeometriesArray","geometry_1","createOrUpdateVertexFeature_","vertexFeature","addFeature","setCoordinates","set","handleEvent","originalEvent","handled","getInteracting","POINTERMOVE","handlingDownUpSequence","handlePointerMove_","SINGLECLICK","removePoint","handleDragEvent","vertex","coordinate","dragSegment","getStride","setCenter","radius","setRadius","getRadius","setGeometryCoordinates_","handleDownEvent","pixelCoordinate","pixel","insertVertices","vertexExtent","segmentDataMatches","getInExtent","componentSegments","sort","compareIndexes","segmentDataMatch","uid","join","closestVertex","closestOnSegmentData","insertVertex_","handleUpEvent","update","opt_coordinate","getCoordinateFromPixel","sortByDistance","a","projectedDistanceToSegmentDataSquared","nodes","hitPointGeometry","layerFilter","layer","forEachFeatureAtPixel","getFlatCoordinates","viewExtent","getResolution","box","closestSegment","vertexPixel","getPixelFromCoordinate","dist","vertexSegments","pixel1","pixel2","squaredDist1","squaredDist2","Math","sqrt","min","geometryUid","rTree","updateSegmentIndices_","newSegmentData","newSegmentData2","POINTERDRAG","removed","removeVertex_","dragSegments","segmentsByFeature","deleted","component","left","newIndex","right","pop","delta","forEachInExtent","pointCoordinates","distanceToCenterSquared","distanceToCircumference","getClosestPoint","resolution"],"sources":["/home/asura/github/smartcity/source/node_modules/ol/interaction/Modify.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/interaction/Modify\n */\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport RBush from '../structs/RBush.js';\nimport VectorEventType from '../source/VectorEventType.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport { altKeyOnly, always, primaryAction, singleClick, } from '../events/condition.js';\nimport { boundingExtent, buffer as bufferExtent, createOrUpdateFromCoordinate as createExtent, } from '../extent.js';\nimport { closestOnSegment, distance as coordinateDistance, equals as coordinatesEqual, squaredDistance as squaredCoordinateDistance, squaredDistanceToSegment, } from '../coordinate.js';\nimport { createEditingStyle } from '../style/Style.js';\nimport { equals, includes } from '../array.js';\nimport { fromCircle } from '../geom/Polygon.js';\nimport { fromUserCoordinate, fromUserExtent, getUserProjection, toUserCoordinate, toUserExtent, } from '../proj.js';\nimport { getUid } from '../util.js';\n/**\n * The segment index assigned to a circle's center when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nvar CIRCLE_CENTER_INDEX = 0;\n/**\n * The segment index assigned to a circle's circumference when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nvar CIRCLE_CIRCUMFERENCE_INDEX = 1;\nvar tempExtent = [0, 0, 0, 0];\nvar tempSegment = [];\n/**\n * @enum {string}\n */\nvar ModifyEventType = {\n    /**\n     * Triggered upon feature modification start\n     * @event ModifyEvent#modifystart\n     * @api\n     */\n    MODIFYSTART: 'modifystart',\n    /**\n     * Triggered upon feature modification end\n     * @event ModifyEvent#modifyend\n     * @api\n     */\n    MODIFYEND: 'modifyend',\n};\n/**\n * @typedef {Object} SegmentData\n * @property {Array<number>} [depth] Depth.\n * @property {import(\"../Feature\").FeatureLike} feature Feature.\n * @property {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n * @property {number} [index] Index.\n * @property {Array<Array<number>>} segment Segment.\n * @property {Array<SegmentData>} [featureSegments] FeatureSegments.\n */\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event will be considered to add or move a\n * vertex to the sketch. Default is\n * {@link module:ol/events/condition.primaryAction}.\n * @property {import(\"../events/condition.js\").Condition} [deleteCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. By default,\n * {@link module:ol/events/condition.singleClick} with\n * {@link module:ol/events/condition.altKeyOnly} results in a vertex deletion.\n * @property {import(\"../events/condition.js\").Condition} [insertVertexCondition] A\n * function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether a new vertex should be added to the sketch\n * features. Default is {@link module:ol/events/condition.always}.\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {import(\"../style/Style.js\").StyleLike} [style]\n * Style used for the modification point or vertex. For linestrings and polygons, this will\n * be the affected vertex, for circles a point along the circle, and for points the actual\n * point. If not configured, the default edit style is used (see {@link module:ol/style/Style~Style}).\n * When using a style function, the point feature passed to the function will have a `features`\n * property - an array whose entries are the features that are being modified, and a `geometries`\n * property - an array whose entries are the geometries that are being modified. Both arrays are\n * in the same order. The `geometries` are only useful when modifying geometry collections, where\n * the geometry will be the particular geometry from the collection that is being modified.\n * @property {VectorSource} [source] The vector source with\n * features to modify.  If a vector source is not provided, a feature collection\n * must be provided with the `features` option.\n * @property {boolean|import(\"../layer/BaseVector\").default} [hitDetection] When configured, point\n * features will be considered for modification based on their visual appearance, instead of being within\n * the `pixelTolerance` from the pointer location. When a {@link module:ol/layer/BaseVector~BaseVectorLayer} is\n * provided, only the rendered representation of the features on that layer will be considered.\n * @property {Collection<Feature>} [features]\n * The features the interaction works on.  If a feature collection is not\n * provided, a vector source must be provided with the `source` option.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n * @property {boolean} [snapToPointer=!hitDetection] The vertex, point or segment being modified snaps to the\n * pointer coordinate when clicked within the `pixelTolerance`.\n */\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Modify~Modify} instances are\n * instances of this type.\n */\nvar ModifyEvent = /** @class */ (function (_super) {\n    __extends(ModifyEvent, _super);\n    /**\n     * @param {ModifyEventType} type Type.\n     * @param {Collection<import(\"../Feature\").FeatureLike>} features\n     * The features modified.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent\n     * Associated {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n     */\n    function ModifyEvent(type, features, mapBrowserEvent) {\n        var _this = _super.call(this, type) || this;\n        /**\n         * The features being modified.\n         * @type {Collection<import(\"../Feature\").FeatureLike>}\n         * @api\n         */\n        _this.features = features;\n        /**\n         * Associated {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n         * @type {import(\"../MapBrowserEvent.js\").default}\n         * @api\n         */\n        _this.mapBrowserEvent = mapBrowserEvent;\n        return _this;\n    }\n    return ModifyEvent;\n}(Event));\nexport { ModifyEvent };\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'modifyend'|'modifystart', ModifyEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'modifyend'|'modifystart', Return>} ModifyOnSignature\n */\n/**\n * @classdesc\n * Interaction for modifying feature geometries.  To modify features that have\n * been added to an existing source, construct the modify interaction with the\n * `source` option.  If you want to modify features in a collection (for example,\n * the collection used by a select interaction), construct the interaction with\n * the `features` option.  The interaction must be constructed with either a\n * `source` or `features` option.\n *\n * Cartesian distance from the pointer is used to determine the features that\n * will be modified. This means that geometries will only be considered for\n * modification when they are within the configured `pixelTolerance`. For point\n * geometries, the `hitDetection` option can be used to match their visual\n * appearance.\n *\n * By default, the interaction will allow deletion of vertices when the `alt`\n * key is pressed.  To configure the interaction with a different condition\n * for deletion, use the `deleteCondition` option.\n * @fires ModifyEvent\n * @api\n */\nvar Modify = /** @class */ (function (_super) {\n    __extends(Modify, _super);\n    /**\n     * @param {Options} options Options.\n     */\n    function Modify(options) {\n        var _this = _super.call(this, /** @type {import(\"./Pointer.js\").Options} */ (options)) || this;\n        /***\n         * @type {ModifyOnSignature<import(\"../events\").EventsKey>}\n         */\n        _this.on;\n        /***\n         * @type {ModifyOnSignature<import(\"../events\").EventsKey>}\n         */\n        _this.once;\n        /***\n         * @type {ModifyOnSignature<void>}\n         */\n        _this.un;\n        /** @private */\n        _this.boundHandleFeatureChange_ = _this.handleFeatureChange_.bind(_this);\n        /**\n         * @private\n         * @type {import(\"../events/condition.js\").Condition}\n         */\n        _this.condition_ = options.condition ? options.condition : primaryAction;\n        /**\n         * @private\n         * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\n         * @return {boolean} Combined condition result.\n         */\n        _this.defaultDeleteCondition_ = function (mapBrowserEvent) {\n            return altKeyOnly(mapBrowserEvent) && singleClick(mapBrowserEvent);\n        };\n        /**\n         * @type {import(\"../events/condition.js\").Condition}\n         * @private\n         */\n        _this.deleteCondition_ = options.deleteCondition\n            ? options.deleteCondition\n            : _this.defaultDeleteCondition_;\n        /**\n         * @type {import(\"../events/condition.js\").Condition}\n         * @private\n         */\n        _this.insertVertexCondition_ = options.insertVertexCondition\n            ? options.insertVertexCondition\n            : always;\n        /**\n         * Editing vertex.\n         * @type {Feature<Point>}\n         * @private\n         */\n        _this.vertexFeature_ = null;\n        /**\n         * Segments intersecting {@link this.vertexFeature_} by segment uid.\n         * @type {Object<string, boolean>}\n         * @private\n         */\n        _this.vertexSegments_ = null;\n        /**\n         * @type {import(\"../pixel.js\").Pixel}\n         * @private\n         */\n        _this.lastPixel_ = [0, 0];\n        /**\n         * Tracks if the next `singleclick` event should be ignored to prevent\n         * accidental deletion right after vertex creation.\n         * @type {boolean}\n         * @private\n         */\n        _this.ignoreNextSingleClick_ = false;\n        /**\n         * @type {Collection<import(\"../Feature\").FeatureLike>}\n         * @private\n         */\n        _this.featuresBeingModified_ = null;\n        /**\n         * Segment RTree for each layer\n         * @type {RBush<SegmentData>}\n         * @private\n         */\n        _this.rBush_ = new RBush();\n        /**\n         * @type {number}\n         * @private\n         */\n        _this.pixelTolerance_ =\n            options.pixelTolerance !== undefined ? options.pixelTolerance : 10;\n        /**\n         * @type {boolean}\n         * @private\n         */\n        _this.snappedToVertex_ = false;\n        /**\n         * Indicate whether the interaction is currently changing a feature's\n         * coordinates.\n         * @type {boolean}\n         * @private\n         */\n        _this.changingFeature_ = false;\n        /**\n         * @type {Array}\n         * @private\n         */\n        _this.dragSegments_ = [];\n        /**\n         * Draw overlay where sketch features are drawn.\n         * @type {VectorLayer}\n         * @private\n         */\n        _this.overlay_ = new VectorLayer({\n            source: new VectorSource({\n                useSpatialIndex: false,\n                wrapX: !!options.wrapX,\n            }),\n            style: options.style ? options.style : getDefaultStyleFunction(),\n            updateWhileAnimating: true,\n            updateWhileInteracting: true,\n        });\n        /**\n         * @const\n         * @private\n         * @type {!Object<string, function(Feature, import(\"../geom/Geometry.js\").default): void>}\n         */\n        _this.SEGMENT_WRITERS_ = {\n            'Point': _this.writePointGeometry_.bind(_this),\n            'LineString': _this.writeLineStringGeometry_.bind(_this),\n            'LinearRing': _this.writeLineStringGeometry_.bind(_this),\n            'Polygon': _this.writePolygonGeometry_.bind(_this),\n            'MultiPoint': _this.writeMultiPointGeometry_.bind(_this),\n            'MultiLineString': _this.writeMultiLineStringGeometry_.bind(_this),\n            'MultiPolygon': _this.writeMultiPolygonGeometry_.bind(_this),\n            'Circle': _this.writeCircleGeometry_.bind(_this),\n            'GeometryCollection': _this.writeGeometryCollectionGeometry_.bind(_this),\n        };\n        /**\n         * @type {VectorSource}\n         * @private\n         */\n        _this.source_ = null;\n        /**\n         * @type {boolean|import(\"../layer/BaseVector\").default}\n         */\n        _this.hitDetection_ = null;\n        var features;\n        if (options.features) {\n            features = options.features;\n        }\n        else if (options.source) {\n            _this.source_ = options.source;\n            features = new Collection(_this.source_.getFeatures());\n            _this.source_.addEventListener(VectorEventType.ADDFEATURE, _this.handleSourceAdd_.bind(_this));\n            _this.source_.addEventListener(VectorEventType.REMOVEFEATURE, _this.handleSourceRemove_.bind(_this));\n        }\n        if (!features) {\n            throw new Error('The modify interaction requires features, a source or a layer');\n        }\n        if (options.hitDetection) {\n            _this.hitDetection_ = options.hitDetection;\n        }\n        /**\n         * @type {Collection<import(\"../Feature.js\").FeatureLike>}\n         * @private\n         */\n        _this.features_ = features;\n        _this.features_.forEach(_this.addFeature_.bind(_this));\n        _this.features_.addEventListener(CollectionEventType.ADD, _this.handleFeatureAdd_.bind(_this));\n        _this.features_.addEventListener(CollectionEventType.REMOVE, _this.handleFeatureRemove_.bind(_this));\n        /**\n         * @type {import(\"../MapBrowserEvent.js\").default}\n         * @private\n         */\n        _this.lastPointerEvent_ = null;\n        /**\n         * Delta (x, y in map units) between matched rtree vertex and pointer vertex.\n         * @type {Array<number>}\n         */\n        _this.delta_ = [0, 0];\n        /**\n         * @private\n         */\n        _this.snapToPointer_ =\n            options.snapToPointer === undefined\n                ? !_this.hitDetection_\n                : options.snapToPointer;\n        return _this;\n    }\n    /**\n     * @param {Feature} feature Feature.\n     * @private\n     */\n    Modify.prototype.addFeature_ = function (feature) {\n        var geometry = feature.getGeometry();\n        if (geometry) {\n            var writer = this.SEGMENT_WRITERS_[geometry.getType()];\n            if (writer) {\n                writer(feature, geometry);\n            }\n        }\n        var map = this.getMap();\n        if (map && map.isRendered() && this.getActive()) {\n            this.handlePointerAtPixel_(this.lastPixel_, map);\n        }\n        feature.addEventListener(EventType.CHANGE, this.boundHandleFeatureChange_);\n    };\n    /**\n     * @param {import(\"../MapBrowserEvent.js\").default} evt Map browser event.\n     * @param {Array<Array<SegmentData>>} segments The segments subject to modification.\n     * @private\n     */\n    Modify.prototype.willModifyFeatures_ = function (evt, segments) {\n        if (!this.featuresBeingModified_) {\n            this.featuresBeingModified_ = new Collection();\n            var features = this.featuresBeingModified_.getArray();\n            for (var i = 0, ii = segments.length; i < ii; ++i) {\n                var segment = segments[i];\n                for (var s = 0, ss = segment.length; s < ss; ++s) {\n                    var feature = segment[s].feature;\n                    if (feature && features.indexOf(feature) === -1) {\n                        this.featuresBeingModified_.push(feature);\n                    }\n                }\n            }\n            if (this.featuresBeingModified_.getLength() === 0) {\n                this.featuresBeingModified_ = null;\n            }\n            else {\n                this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYSTART, this.featuresBeingModified_, evt));\n            }\n        }\n    };\n    /**\n     * @param {Feature} feature Feature.\n     * @private\n     */\n    Modify.prototype.removeFeature_ = function (feature) {\n        this.removeFeatureSegmentData_(feature);\n        // Remove the vertex feature if the collection of candidate features is empty.\n        if (this.vertexFeature_ && this.features_.getLength() === 0) {\n            this.overlay_.getSource().removeFeature(this.vertexFeature_);\n            this.vertexFeature_ = null;\n        }\n        feature.removeEventListener(EventType.CHANGE, this.boundHandleFeatureChange_);\n    };\n    /**\n     * @param {Feature} feature Feature.\n     * @private\n     */\n    Modify.prototype.removeFeatureSegmentData_ = function (feature) {\n        var rBush = this.rBush_;\n        /** @type {Array<SegmentData>} */\n        var nodesToRemove = [];\n        rBush.forEach(\n        /**\n         * @param {SegmentData} node RTree node.\n         */\n        function (node) {\n            if (feature === node.feature) {\n                nodesToRemove.push(node);\n            }\n        });\n        for (var i = nodesToRemove.length - 1; i >= 0; --i) {\n            var nodeToRemove = nodesToRemove[i];\n            for (var j = this.dragSegments_.length - 1; j >= 0; --j) {\n                if (this.dragSegments_[j][0] === nodeToRemove) {\n                    this.dragSegments_.splice(j, 1);\n                }\n            }\n            rBush.remove(nodeToRemove);\n        }\n    };\n    /**\n     * Activate or deactivate the interaction.\n     * @param {boolean} active Active.\n     * @observable\n     * @api\n     */\n    Modify.prototype.setActive = function (active) {\n        if (this.vertexFeature_ && !active) {\n            this.overlay_.getSource().removeFeature(this.vertexFeature_);\n            this.vertexFeature_ = null;\n        }\n        _super.prototype.setActive.call(this, active);\n    };\n    /**\n     * Remove the interaction from its current map and attach it to the new map.\n     * Subclasses may set up event handlers to get notified about changes to\n     * the map here.\n     * @param {import(\"../PluggableMap.js\").default} map Map.\n     */\n    Modify.prototype.setMap = function (map) {\n        this.overlay_.setMap(map);\n        _super.prototype.setMap.call(this, map);\n    };\n    /**\n     * Get the overlay layer that this interaction renders the modification point or vertex to.\n     * @return {VectorLayer} Overlay layer.\n     * @api\n     */\n    Modify.prototype.getOverlay = function () {\n        return this.overlay_;\n    };\n    /**\n     * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n     * @private\n     */\n    Modify.prototype.handleSourceAdd_ = function (event) {\n        if (event.feature) {\n            this.features_.push(event.feature);\n        }\n    };\n    /**\n     * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n     * @private\n     */\n    Modify.prototype.handleSourceRemove_ = function (event) {\n        if (event.feature) {\n            this.features_.remove(event.feature);\n        }\n    };\n    /**\n     * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n     * @private\n     */\n    Modify.prototype.handleFeatureAdd_ = function (evt) {\n        this.addFeature_(/** @type {Feature} */ (evt.element));\n    };\n    /**\n     * @param {import(\"../events/Event.js\").default} evt Event.\n     * @private\n     */\n    Modify.prototype.handleFeatureChange_ = function (evt) {\n        if (!this.changingFeature_) {\n            var feature = /** @type {Feature} */ (evt.target);\n            this.removeFeature_(feature);\n            this.addFeature_(feature);\n        }\n    };\n    /**\n     * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n     * @private\n     */\n    Modify.prototype.handleFeatureRemove_ = function (evt) {\n        var feature = /** @type {Feature} */ (evt.element);\n        this.removeFeature_(feature);\n    };\n    /**\n     * @param {Feature} feature Feature\n     * @param {Point} geometry Geometry.\n     * @private\n     */\n    Modify.prototype.writePointGeometry_ = function (feature, geometry) {\n        var coordinates = geometry.getCoordinates();\n        /** @type {SegmentData} */\n        var segmentData = {\n            feature: feature,\n            geometry: geometry,\n            segment: [coordinates, coordinates],\n        };\n        this.rBush_.insert(geometry.getExtent(), segmentData);\n    };\n    /**\n     * @param {Feature} feature Feature\n     * @param {import(\"../geom/MultiPoint.js\").default} geometry Geometry.\n     * @private\n     */\n    Modify.prototype.writeMultiPointGeometry_ = function (feature, geometry) {\n        var points = geometry.getCoordinates();\n        for (var i = 0, ii = points.length; i < ii; ++i) {\n            var coordinates = points[i];\n            /** @type {SegmentData} */\n            var segmentData = {\n                feature: feature,\n                geometry: geometry,\n                depth: [i],\n                index: i,\n                segment: [coordinates, coordinates],\n            };\n            this.rBush_.insert(geometry.getExtent(), segmentData);\n        }\n    };\n    /**\n     * @param {Feature} feature Feature\n     * @param {import(\"../geom/LineString.js\").default} geometry Geometry.\n     * @private\n     */\n    Modify.prototype.writeLineStringGeometry_ = function (feature, geometry) {\n        var coordinates = geometry.getCoordinates();\n        for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n            var segment = coordinates.slice(i, i + 2);\n            /** @type {SegmentData} */\n            var segmentData = {\n                feature: feature,\n                geometry: geometry,\n                index: i,\n                segment: segment,\n            };\n            this.rBush_.insert(boundingExtent(segment), segmentData);\n        }\n    };\n    /**\n     * @param {Feature} feature Feature\n     * @param {import(\"../geom/MultiLineString.js\").default} geometry Geometry.\n     * @private\n     */\n    Modify.prototype.writeMultiLineStringGeometry_ = function (feature, geometry) {\n        var lines = geometry.getCoordinates();\n        for (var j = 0, jj = lines.length; j < jj; ++j) {\n            var coordinates = lines[j];\n            for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n                var segment = coordinates.slice(i, i + 2);\n                /** @type {SegmentData} */\n                var segmentData = {\n                    feature: feature,\n                    geometry: geometry,\n                    depth: [j],\n                    index: i,\n                    segment: segment,\n                };\n                this.rBush_.insert(boundingExtent(segment), segmentData);\n            }\n        }\n    };\n    /**\n     * @param {Feature} feature Feature\n     * @param {import(\"../geom/Polygon.js\").default} geometry Geometry.\n     * @private\n     */\n    Modify.prototype.writePolygonGeometry_ = function (feature, geometry) {\n        var rings = geometry.getCoordinates();\n        for (var j = 0, jj = rings.length; j < jj; ++j) {\n            var coordinates = rings[j];\n            for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n                var segment = coordinates.slice(i, i + 2);\n                /** @type {SegmentData} */\n                var segmentData = {\n                    feature: feature,\n                    geometry: geometry,\n                    depth: [j],\n                    index: i,\n                    segment: segment,\n                };\n                this.rBush_.insert(boundingExtent(segment), segmentData);\n            }\n        }\n    };\n    /**\n     * @param {Feature} feature Feature\n     * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n     * @private\n     */\n    Modify.prototype.writeMultiPolygonGeometry_ = function (feature, geometry) {\n        var polygons = geometry.getCoordinates();\n        for (var k = 0, kk = polygons.length; k < kk; ++k) {\n            var rings = polygons[k];\n            for (var j = 0, jj = rings.length; j < jj; ++j) {\n                var coordinates = rings[j];\n                for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n                    var segment = coordinates.slice(i, i + 2);\n                    /** @type {SegmentData} */\n                    var segmentData = {\n                        feature: feature,\n                        geometry: geometry,\n                        depth: [j, k],\n                        index: i,\n                        segment: segment,\n                    };\n                    this.rBush_.insert(boundingExtent(segment), segmentData);\n                }\n            }\n        }\n    };\n    /**\n     * We convert a circle into two segments.  The segment at index\n     * {@link CIRCLE_CENTER_INDEX} is the\n     * circle's center (a point).  The segment at index\n     * {@link CIRCLE_CIRCUMFERENCE_INDEX} is\n     * the circumference, and is not a line segment.\n     *\n     * @param {Feature} feature Feature.\n     * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\n     * @private\n     */\n    Modify.prototype.writeCircleGeometry_ = function (feature, geometry) {\n        var coordinates = geometry.getCenter();\n        /** @type {SegmentData} */\n        var centerSegmentData = {\n            feature: feature,\n            geometry: geometry,\n            index: CIRCLE_CENTER_INDEX,\n            segment: [coordinates, coordinates],\n        };\n        /** @type {SegmentData} */\n        var circumferenceSegmentData = {\n            feature: feature,\n            geometry: geometry,\n            index: CIRCLE_CIRCUMFERENCE_INDEX,\n            segment: [coordinates, coordinates],\n        };\n        var featureSegments = [centerSegmentData, circumferenceSegmentData];\n        centerSegmentData.featureSegments = featureSegments;\n        circumferenceSegmentData.featureSegments = featureSegments;\n        this.rBush_.insert(createExtent(coordinates), centerSegmentData);\n        var circleGeometry = /** @type {import(\"../geom/Geometry.js\").default} */ (geometry);\n        var userProjection = getUserProjection();\n        if (userProjection && this.getMap()) {\n            var projection = this.getMap().getView().getProjection();\n            circleGeometry = circleGeometry\n                .clone()\n                .transform(userProjection, projection);\n            circleGeometry = fromCircle(\n            /** @type {import(\"../geom/Circle.js\").default} */ (circleGeometry)).transform(projection, userProjection);\n        }\n        this.rBush_.insert(circleGeometry.getExtent(), circumferenceSegmentData);\n    };\n    /**\n     * @param {Feature} feature Feature\n     * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n     * @private\n     */\n    Modify.prototype.writeGeometryCollectionGeometry_ = function (feature, geometry) {\n        var geometries = geometry.getGeometriesArray();\n        for (var i = 0; i < geometries.length; ++i) {\n            var geometry_1 = geometries[i];\n            var writer = this.SEGMENT_WRITERS_[geometry_1.getType()];\n            writer(feature, geometry_1);\n        }\n    };\n    /**\n     * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n     * @param {Array<import(\"../Feature\").FeatureLike>} features The features being modified.\n     * @param {Array<import(\"../geom/SimpleGeometry.js\").default>} geometries The geometries being modified.\n     * @return {Feature} Vertex feature.\n     * @private\n     */\n    Modify.prototype.createOrUpdateVertexFeature_ = function (coordinates, features, geometries) {\n        var vertexFeature = this.vertexFeature_;\n        if (!vertexFeature) {\n            vertexFeature = new Feature(new Point(coordinates));\n            this.vertexFeature_ = vertexFeature;\n            this.overlay_.getSource().addFeature(vertexFeature);\n        }\n        else {\n            var geometry = vertexFeature.getGeometry();\n            geometry.setCoordinates(coordinates);\n        }\n        vertexFeature.set('features', features);\n        vertexFeature.set('geometries', geometries);\n        return vertexFeature;\n    };\n    /**\n     * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may modify the geometry.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n     * @return {boolean} `false` to stop event propagation.\n     */\n    Modify.prototype.handleEvent = function (mapBrowserEvent) {\n        if (!mapBrowserEvent.originalEvent) {\n            return true;\n        }\n        this.lastPointerEvent_ = mapBrowserEvent;\n        var handled;\n        if (!mapBrowserEvent.map.getView().getInteracting() &&\n            mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE &&\n            !this.handlingDownUpSequence) {\n            this.handlePointerMove_(mapBrowserEvent);\n        }\n        if (this.vertexFeature_ && this.deleteCondition_(mapBrowserEvent)) {\n            if (mapBrowserEvent.type != MapBrowserEventType.SINGLECLICK ||\n                !this.ignoreNextSingleClick_) {\n                handled = this.removePoint();\n            }\n            else {\n                handled = true;\n            }\n        }\n        if (mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK) {\n            this.ignoreNextSingleClick_ = false;\n        }\n        return _super.prototype.handleEvent.call(this, mapBrowserEvent) && !handled;\n    };\n    /**\n     * Handle pointer drag events.\n     * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n     */\n    Modify.prototype.handleDragEvent = function (evt) {\n        this.ignoreNextSingleClick_ = false;\n        this.willModifyFeatures_(evt, this.dragSegments_);\n        var vertex = [\n            evt.coordinate[0] + this.delta_[0],\n            evt.coordinate[1] + this.delta_[1],\n        ];\n        var features = [];\n        var geometries = [];\n        for (var i = 0, ii = this.dragSegments_.length; i < ii; ++i) {\n            var dragSegment = this.dragSegments_[i];\n            var segmentData = dragSegment[0];\n            var feature = segmentData.feature;\n            if (features.indexOf(feature) === -1) {\n                features.push(feature);\n            }\n            var geometry = segmentData.geometry;\n            if (geometries.indexOf(geometry) === -1) {\n                geometries.push(geometry);\n            }\n            var depth = segmentData.depth;\n            var coordinates = void 0;\n            var segment = segmentData.segment;\n            var index = dragSegment[1];\n            while (vertex.length < geometry.getStride()) {\n                vertex.push(segment[index][vertex.length]);\n            }\n            switch (geometry.getType()) {\n                case 'Point':\n                    coordinates = vertex;\n                    segment[0] = vertex;\n                    segment[1] = vertex;\n                    break;\n                case 'MultiPoint':\n                    coordinates = geometry.getCoordinates();\n                    coordinates[segmentData.index] = vertex;\n                    segment[0] = vertex;\n                    segment[1] = vertex;\n                    break;\n                case 'LineString':\n                    coordinates = geometry.getCoordinates();\n                    coordinates[segmentData.index + index] = vertex;\n                    segment[index] = vertex;\n                    break;\n                case 'MultiLineString':\n                    coordinates = geometry.getCoordinates();\n                    coordinates[depth[0]][segmentData.index + index] = vertex;\n                    segment[index] = vertex;\n                    break;\n                case 'Polygon':\n                    coordinates = geometry.getCoordinates();\n                    coordinates[depth[0]][segmentData.index + index] = vertex;\n                    segment[index] = vertex;\n                    break;\n                case 'MultiPolygon':\n                    coordinates = geometry.getCoordinates();\n                    coordinates[depth[1]][depth[0]][segmentData.index + index] = vertex;\n                    segment[index] = vertex;\n                    break;\n                case 'Circle':\n                    segment[0] = vertex;\n                    segment[1] = vertex;\n                    if (segmentData.index === CIRCLE_CENTER_INDEX) {\n                        this.changingFeature_ = true;\n                        geometry.setCenter(vertex);\n                        this.changingFeature_ = false;\n                    }\n                    else {\n                        // We're dragging the circle's circumference:\n                        this.changingFeature_ = true;\n                        var projection = evt.map.getView().getProjection();\n                        var radius = coordinateDistance(fromUserCoordinate(geometry.getCenter(), projection), fromUserCoordinate(vertex, projection));\n                        var userProjection = getUserProjection();\n                        if (userProjection) {\n                            var circleGeometry = geometry\n                                .clone()\n                                .transform(userProjection, projection);\n                            circleGeometry.setRadius(radius);\n                            radius = circleGeometry\n                                .transform(projection, userProjection)\n                                .getRadius();\n                        }\n                        geometry.setRadius(radius);\n                        this.changingFeature_ = false;\n                    }\n                    break;\n                default:\n                // pass\n            }\n            if (coordinates) {\n                this.setGeometryCoordinates_(geometry, coordinates);\n            }\n        }\n        this.createOrUpdateVertexFeature_(vertex, features, geometries);\n    };\n    /**\n     * Handle pointer down events.\n     * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n     * @return {boolean} If the event was consumed.\n     */\n    Modify.prototype.handleDownEvent = function (evt) {\n        if (!this.condition_(evt)) {\n            return false;\n        }\n        var pixelCoordinate = evt.coordinate;\n        this.handlePointerAtPixel_(evt.pixel, evt.map, pixelCoordinate);\n        this.dragSegments_.length = 0;\n        this.featuresBeingModified_ = null;\n        var vertexFeature = this.vertexFeature_;\n        if (vertexFeature) {\n            var projection = evt.map.getView().getProjection();\n            var insertVertices = [];\n            var vertex = vertexFeature.getGeometry().getCoordinates();\n            var vertexExtent = boundingExtent([vertex]);\n            var segmentDataMatches = this.rBush_.getInExtent(vertexExtent);\n            var componentSegments = {};\n            segmentDataMatches.sort(compareIndexes);\n            for (var i = 0, ii = segmentDataMatches.length; i < ii; ++i) {\n                var segmentDataMatch = segmentDataMatches[i];\n                var segment = segmentDataMatch.segment;\n                var uid = getUid(segmentDataMatch.geometry);\n                var depth = segmentDataMatch.depth;\n                if (depth) {\n                    uid += '-' + depth.join('-'); // separate feature components\n                }\n                if (!componentSegments[uid]) {\n                    componentSegments[uid] = new Array(2);\n                }\n                if (segmentDataMatch.geometry.getType() === 'Circle' &&\n                    segmentDataMatch.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n                    var closestVertex = closestOnSegmentData(pixelCoordinate, segmentDataMatch, projection);\n                    if (coordinatesEqual(closestVertex, vertex) &&\n                        !componentSegments[uid][0]) {\n                        this.dragSegments_.push([segmentDataMatch, 0]);\n                        componentSegments[uid][0] = segmentDataMatch;\n                    }\n                    continue;\n                }\n                if (coordinatesEqual(segment[0], vertex) &&\n                    !componentSegments[uid][0]) {\n                    this.dragSegments_.push([segmentDataMatch, 0]);\n                    componentSegments[uid][0] = segmentDataMatch;\n                    continue;\n                }\n                if (coordinatesEqual(segment[1], vertex) &&\n                    !componentSegments[uid][1]) {\n                    if (componentSegments[uid][0] &&\n                        componentSegments[uid][0].index === 0) {\n                        var coordinates = segmentDataMatch.geometry.getCoordinates();\n                        switch (segmentDataMatch.geometry.getType()) {\n                            // prevent dragging closed linestrings by the connecting node\n                            case 'LineString':\n                            case 'MultiLineString':\n                                continue;\n                            // if dragging the first vertex of a polygon, ensure the other segment\n                            // belongs to the closing vertex of the linear ring\n                            case 'MultiPolygon':\n                                coordinates = coordinates[depth[1]];\n                            /* falls through */\n                            case 'Polygon':\n                                if (segmentDataMatch.index !==\n                                    coordinates[depth[0]].length - 2) {\n                                    continue;\n                                }\n                                break;\n                            default:\n                            // pass\n                        }\n                    }\n                    this.dragSegments_.push([segmentDataMatch, 1]);\n                    componentSegments[uid][1] = segmentDataMatch;\n                    continue;\n                }\n                if (getUid(segment) in this.vertexSegments_ &&\n                    !componentSegments[uid][0] &&\n                    !componentSegments[uid][1] &&\n                    this.insertVertexCondition_(evt)) {\n                    insertVertices.push(segmentDataMatch);\n                }\n            }\n            if (insertVertices.length) {\n                this.willModifyFeatures_(evt, [insertVertices]);\n            }\n            for (var j = insertVertices.length - 1; j >= 0; --j) {\n                this.insertVertex_(insertVertices[j], vertex);\n            }\n        }\n        return !!this.vertexFeature_;\n    };\n    /**\n     * Handle pointer up events.\n     * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n     * @return {boolean} If the event was consumed.\n     */\n    Modify.prototype.handleUpEvent = function (evt) {\n        for (var i = this.dragSegments_.length - 1; i >= 0; --i) {\n            var segmentData = this.dragSegments_[i][0];\n            var geometry = segmentData.geometry;\n            if (geometry.getType() === 'Circle') {\n                // Update a circle object in the R* bush:\n                var coordinates = geometry.getCenter();\n                var centerSegmentData = segmentData.featureSegments[0];\n                var circumferenceSegmentData = segmentData.featureSegments[1];\n                centerSegmentData.segment[0] = coordinates;\n                centerSegmentData.segment[1] = coordinates;\n                circumferenceSegmentData.segment[0] = coordinates;\n                circumferenceSegmentData.segment[1] = coordinates;\n                this.rBush_.update(createExtent(coordinates), centerSegmentData);\n                var circleGeometry = geometry;\n                var userProjection = getUserProjection();\n                if (userProjection) {\n                    var projection = evt.map.getView().getProjection();\n                    circleGeometry = circleGeometry\n                        .clone()\n                        .transform(userProjection, projection);\n                    circleGeometry = fromCircle(circleGeometry).transform(projection, userProjection);\n                }\n                this.rBush_.update(circleGeometry.getExtent(), circumferenceSegmentData);\n            }\n            else {\n                this.rBush_.update(boundingExtent(segmentData.segment), segmentData);\n            }\n        }\n        if (this.featuresBeingModified_) {\n            this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.featuresBeingModified_, evt));\n            this.featuresBeingModified_ = null;\n        }\n        return false;\n    };\n    /**\n     * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n     * @private\n     */\n    Modify.prototype.handlePointerMove_ = function (evt) {\n        this.lastPixel_ = evt.pixel;\n        this.handlePointerAtPixel_(evt.pixel, evt.map, evt.coordinate);\n    };\n    /**\n     * @param {import(\"../pixel.js\").Pixel} pixel Pixel\n     * @param {import(\"../PluggableMap.js\").default} map Map.\n     * @param {import(\"../coordinate.js\").Coordinate} [opt_coordinate] The pixel Coordinate.\n     * @private\n     */\n    Modify.prototype.handlePointerAtPixel_ = function (pixel, map, opt_coordinate) {\n        var _this = this;\n        var pixelCoordinate = opt_coordinate || map.getCoordinateFromPixel(pixel);\n        var projection = map.getView().getProjection();\n        var sortByDistance = function (a, b) {\n            return (projectedDistanceToSegmentDataSquared(pixelCoordinate, a, projection) -\n                projectedDistanceToSegmentDataSquared(pixelCoordinate, b, projection));\n        };\n        /** @type {Array<SegmentData>|undefined} */\n        var nodes;\n        var hitPointGeometry;\n        if (this.hitDetection_) {\n            var layerFilter = typeof this.hitDetection_ === 'object'\n                ? function (layer) { return layer === _this.hitDetection_; }\n                : undefined;\n            map.forEachFeatureAtPixel(pixel, function (feature, layer, geometry) {\n                geometry =\n                    geometry ||\n                        /** @type {import(\"../geom/SimpleGeometry\").default} */ (feature.getGeometry());\n                if (geometry.getType() === 'Point' &&\n                    includes(_this.features_.getArray(), feature)) {\n                    hitPointGeometry = geometry;\n                    var coordinate = geometry.getFlatCoordinates().slice(0, 2);\n                    nodes = [\n                        {\n                            feature: feature,\n                            geometry: geometry,\n                            segment: [coordinate, coordinate],\n                        },\n                    ];\n                }\n                return true;\n            }, { layerFilter: layerFilter });\n        }\n        if (!nodes) {\n            var viewExtent = fromUserExtent(createExtent(pixelCoordinate, tempExtent), projection);\n            var buffer = map.getView().getResolution() * this.pixelTolerance_;\n            var box = toUserExtent(bufferExtent(viewExtent, buffer, tempExtent), projection);\n            nodes = this.rBush_.getInExtent(box);\n        }\n        if (nodes && nodes.length > 0) {\n            var node = nodes.sort(sortByDistance)[0];\n            var closestSegment = node.segment;\n            var vertex = closestOnSegmentData(pixelCoordinate, node, projection);\n            var vertexPixel = map.getPixelFromCoordinate(vertex);\n            var dist = coordinateDistance(pixel, vertexPixel);\n            if (hitPointGeometry || dist <= this.pixelTolerance_) {\n                /** @type {Object<string, boolean>} */\n                var vertexSegments = {};\n                vertexSegments[getUid(closestSegment)] = true;\n                if (!this.snapToPointer_) {\n                    this.delta_[0] = vertex[0] - pixelCoordinate[0];\n                    this.delta_[1] = vertex[1] - pixelCoordinate[1];\n                }\n                if (node.geometry.getType() === 'Circle' &&\n                    node.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n                    this.snappedToVertex_ = true;\n                    this.createOrUpdateVertexFeature_(vertex, [node.feature], [node.geometry]);\n                }\n                else {\n                    var pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n                    var pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n                    var squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n                    var squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n                    dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n                    this.snappedToVertex_ = dist <= this.pixelTolerance_;\n                    if (this.snappedToVertex_) {\n                        vertex =\n                            squaredDist1 > squaredDist2\n                                ? closestSegment[1]\n                                : closestSegment[0];\n                    }\n                    this.createOrUpdateVertexFeature_(vertex, [node.feature], [node.geometry]);\n                    var geometries = {};\n                    geometries[getUid(node.geometry)] = true;\n                    for (var i = 1, ii = nodes.length; i < ii; ++i) {\n                        var segment = nodes[i].segment;\n                        if ((coordinatesEqual(closestSegment[0], segment[0]) &&\n                            coordinatesEqual(closestSegment[1], segment[1])) ||\n                            (coordinatesEqual(closestSegment[0], segment[1]) &&\n                                coordinatesEqual(closestSegment[1], segment[0]))) {\n                            var geometryUid = getUid(nodes[i].geometry);\n                            if (!(geometryUid in geometries)) {\n                                geometries[geometryUid] = true;\n                                vertexSegments[getUid(segment)] = true;\n                            }\n                        }\n                        else {\n                            break;\n                        }\n                    }\n                }\n                this.vertexSegments_ = vertexSegments;\n                return;\n            }\n        }\n        if (this.vertexFeature_) {\n            this.overlay_.getSource().removeFeature(this.vertexFeature_);\n            this.vertexFeature_ = null;\n        }\n    };\n    /**\n     * @param {SegmentData} segmentData Segment data.\n     * @param {import(\"../coordinate.js\").Coordinate} vertex Vertex.\n     * @private\n     */\n    Modify.prototype.insertVertex_ = function (segmentData, vertex) {\n        var segment = segmentData.segment;\n        var feature = segmentData.feature;\n        var geometry = segmentData.geometry;\n        var depth = segmentData.depth;\n        var index = segmentData.index;\n        var coordinates;\n        while (vertex.length < geometry.getStride()) {\n            vertex.push(0);\n        }\n        switch (geometry.getType()) {\n            case 'MultiLineString':\n                coordinates = geometry.getCoordinates();\n                coordinates[depth[0]].splice(index + 1, 0, vertex);\n                break;\n            case 'Polygon':\n                coordinates = geometry.getCoordinates();\n                coordinates[depth[0]].splice(index + 1, 0, vertex);\n                break;\n            case 'MultiPolygon':\n                coordinates = geometry.getCoordinates();\n                coordinates[depth[1]][depth[0]].splice(index + 1, 0, vertex);\n                break;\n            case 'LineString':\n                coordinates = geometry.getCoordinates();\n                coordinates.splice(index + 1, 0, vertex);\n                break;\n            default:\n                return;\n        }\n        this.setGeometryCoordinates_(geometry, coordinates);\n        var rTree = this.rBush_;\n        rTree.remove(segmentData);\n        this.updateSegmentIndices_(geometry, index, depth, 1);\n        /** @type {SegmentData} */\n        var newSegmentData = {\n            segment: [segment[0], vertex],\n            feature: feature,\n            geometry: geometry,\n            depth: depth,\n            index: index,\n        };\n        rTree.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n        this.dragSegments_.push([newSegmentData, 1]);\n        /** @type {SegmentData} */\n        var newSegmentData2 = {\n            segment: [vertex, segment[1]],\n            feature: feature,\n            geometry: geometry,\n            depth: depth,\n            index: index + 1,\n        };\n        rTree.insert(boundingExtent(newSegmentData2.segment), newSegmentData2);\n        this.dragSegments_.push([newSegmentData2, 0]);\n        this.ignoreNextSingleClick_ = true;\n    };\n    /**\n     * Removes the vertex currently being pointed.\n     * @return {boolean} True when a vertex was removed.\n     * @api\n     */\n    Modify.prototype.removePoint = function () {\n        if (this.lastPointerEvent_ &&\n            this.lastPointerEvent_.type != MapBrowserEventType.POINTERDRAG) {\n            var evt = this.lastPointerEvent_;\n            this.willModifyFeatures_(evt, this.dragSegments_);\n            var removed = this.removeVertex_();\n            if (this.featuresBeingModified_) {\n                this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.featuresBeingModified_, evt));\n            }\n            this.featuresBeingModified_ = null;\n            return removed;\n        }\n        return false;\n    };\n    /**\n     * Removes a vertex from all matching features.\n     * @return {boolean} True when a vertex was removed.\n     * @private\n     */\n    Modify.prototype.removeVertex_ = function () {\n        var dragSegments = this.dragSegments_;\n        var segmentsByFeature = {};\n        var deleted = false;\n        var component, coordinates, dragSegment, geometry, i, index, left;\n        var newIndex, right, segmentData, uid;\n        for (i = dragSegments.length - 1; i >= 0; --i) {\n            dragSegment = dragSegments[i];\n            segmentData = dragSegment[0];\n            uid = getUid(segmentData.feature);\n            if (segmentData.depth) {\n                // separate feature components\n                uid += '-' + segmentData.depth.join('-');\n            }\n            if (!(uid in segmentsByFeature)) {\n                segmentsByFeature[uid] = {};\n            }\n            if (dragSegment[1] === 0) {\n                segmentsByFeature[uid].right = segmentData;\n                segmentsByFeature[uid].index = segmentData.index;\n            }\n            else if (dragSegment[1] == 1) {\n                segmentsByFeature[uid].left = segmentData;\n                segmentsByFeature[uid].index = segmentData.index + 1;\n            }\n        }\n        for (uid in segmentsByFeature) {\n            right = segmentsByFeature[uid].right;\n            left = segmentsByFeature[uid].left;\n            index = segmentsByFeature[uid].index;\n            newIndex = index - 1;\n            if (left !== undefined) {\n                segmentData = left;\n            }\n            else {\n                segmentData = right;\n            }\n            if (newIndex < 0) {\n                newIndex = 0;\n            }\n            geometry = segmentData.geometry;\n            coordinates = geometry.getCoordinates();\n            component = coordinates;\n            deleted = false;\n            switch (geometry.getType()) {\n                case 'MultiLineString':\n                    if (coordinates[segmentData.depth[0]].length > 2) {\n                        coordinates[segmentData.depth[0]].splice(index, 1);\n                        deleted = true;\n                    }\n                    break;\n                case 'LineString':\n                    if (coordinates.length > 2) {\n                        coordinates.splice(index, 1);\n                        deleted = true;\n                    }\n                    break;\n                case 'MultiPolygon':\n                    component = component[segmentData.depth[1]];\n                /* falls through */\n                case 'Polygon':\n                    component = component[segmentData.depth[0]];\n                    if (component.length > 4) {\n                        if (index == component.length - 1) {\n                            index = 0;\n                        }\n                        component.splice(index, 1);\n                        deleted = true;\n                        if (index === 0) {\n                            // close the ring again\n                            component.pop();\n                            component.push(component[0]);\n                            newIndex = component.length - 1;\n                        }\n                    }\n                    break;\n                default:\n                // pass\n            }\n            if (deleted) {\n                this.setGeometryCoordinates_(geometry, coordinates);\n                var segments = [];\n                if (left !== undefined) {\n                    this.rBush_.remove(left);\n                    segments.push(left.segment[0]);\n                }\n                if (right !== undefined) {\n                    this.rBush_.remove(right);\n                    segments.push(right.segment[1]);\n                }\n                if (left !== undefined && right !== undefined) {\n                    /** @type {SegmentData} */\n                    var newSegmentData = {\n                        depth: segmentData.depth,\n                        feature: segmentData.feature,\n                        geometry: segmentData.geometry,\n                        index: newIndex,\n                        segment: segments,\n                    };\n                    this.rBush_.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n                }\n                this.updateSegmentIndices_(geometry, index, segmentData.depth, -1);\n                if (this.vertexFeature_) {\n                    this.overlay_.getSource().removeFeature(this.vertexFeature_);\n                    this.vertexFeature_ = null;\n                }\n                dragSegments.length = 0;\n            }\n        }\n        return deleted;\n    };\n    /**\n     * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @param {Array} coordinates Coordinates.\n     * @private\n     */\n    Modify.prototype.setGeometryCoordinates_ = function (geometry, coordinates) {\n        this.changingFeature_ = true;\n        geometry.setCoordinates(coordinates);\n        this.changingFeature_ = false;\n    };\n    /**\n     * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @param {number} index Index.\n     * @param {Array<number>|undefined} depth Depth.\n     * @param {number} delta Delta (1 or -1).\n     * @private\n     */\n    Modify.prototype.updateSegmentIndices_ = function (geometry, index, depth, delta) {\n        this.rBush_.forEachInExtent(geometry.getExtent(), function (segmentDataMatch) {\n            if (segmentDataMatch.geometry === geometry &&\n                (depth === undefined ||\n                    segmentDataMatch.depth === undefined ||\n                    equals(segmentDataMatch.depth, depth)) &&\n                segmentDataMatch.index > index) {\n                segmentDataMatch.index += delta;\n            }\n        });\n    };\n    return Modify;\n}(PointerInteraction));\n/**\n * @param {SegmentData} a The first segment data.\n * @param {SegmentData} b The second segment data.\n * @return {number} The difference in indexes.\n */\nfunction compareIndexes(a, b) {\n    return a.index - b.index;\n}\n/**\n * Returns the distance from a point to a line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The coordinates of the point from\n *        which to calculate the distance.\n * @param {SegmentData} segmentData The object describing the line\n *        segment we are calculating the distance to.\n * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n * @return {number} The square of the distance between a point and a line segment.\n */\nfunction projectedDistanceToSegmentDataSquared(pointCoordinates, segmentData, projection) {\n    var geometry = segmentData.geometry;\n    if (geometry.getType() === 'Circle') {\n        var circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */ (geometry);\n        if (segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n            var userProjection = getUserProjection();\n            if (userProjection) {\n                circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */ (circleGeometry.clone().transform(userProjection, projection));\n            }\n            var distanceToCenterSquared = squaredCoordinateDistance(circleGeometry.getCenter(), fromUserCoordinate(pointCoordinates, projection));\n            var distanceToCircumference = Math.sqrt(distanceToCenterSquared) - circleGeometry.getRadius();\n            return distanceToCircumference * distanceToCircumference;\n        }\n    }\n    var coordinate = fromUserCoordinate(pointCoordinates, projection);\n    tempSegment[0] = fromUserCoordinate(segmentData.segment[0], projection);\n    tempSegment[1] = fromUserCoordinate(segmentData.segment[1], projection);\n    return squaredDistanceToSegment(coordinate, tempSegment);\n}\n/**\n * Returns the point closest to a given line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The point to which a closest point\n *        should be found.\n * @param {SegmentData} segmentData The object describing the line\n *        segment which should contain the closest point.\n * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n * @return {import(\"../coordinate.js\").Coordinate} The point closest to the specified line segment.\n */\nfunction closestOnSegmentData(pointCoordinates, segmentData, projection) {\n    var geometry = segmentData.geometry;\n    if (geometry.getType() === 'Circle' &&\n        segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n        var circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */ (geometry);\n        var userProjection = getUserProjection();\n        if (userProjection) {\n            circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */ (circleGeometry.clone().transform(userProjection, projection));\n        }\n        return toUserCoordinate(circleGeometry.getClosestPoint(fromUserCoordinate(pointCoordinates, projection)), projection);\n    }\n    var coordinate = fromUserCoordinate(pointCoordinates, projection);\n    tempSegment[0] = fromUserCoordinate(segmentData.segment[0], projection);\n    tempSegment[1] = fromUserCoordinate(segmentData.segment[1], projection);\n    return toUserCoordinate(closestOnSegment(coordinate, tempSegment), projection);\n}\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\nfunction getDefaultStyleFunction() {\n    var style = createEditingStyle();\n    return function (feature, resolution) {\n        return style['Point'];\n    };\n}\nexport default Modify;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}