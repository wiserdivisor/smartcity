{"ast":null,"code":"\"use strict\";\n\nlet fileUtils = require(\"././util/fileUtils\");\n\nlet stringUtils = require(\"././util/stringUtils\");\n\nlet jsonUtils = require(\"././util/jsonUtils\");\n\nconst newLine = /\\r?\\n/;\nconst defaultFieldDelimiter = \";\";\n\nclass CsvToJson {\n  formatValueByType(active) {\n    this.printValueFormatByType = active;\n    return this;\n  }\n\n  fieldDelimiter(delimieter) {\n    this.delimiter = delimieter;\n    return this;\n  }\n\n  parseSubArray(delimiter = '*', separator = ',') {\n    this.parseSubArrayDelimiter = delimiter;\n    this.parseSubArraySeparator = separator;\n  }\n\n  encoding(encoding) {\n    this.encoding = encoding;\n    return this;\n  }\n\n  generateJsonFileFromCsv(fileInputName, fileOutputName) {\n    let jsonStringified = this.getJsonFromCsvStringified(fileInputName);\n    fileUtils.writeFile(jsonStringified, fileOutputName);\n  }\n\n  getJsonFromCsvStringified(fileInputName) {\n    let json = this.getJsonFromCsv(fileInputName);\n    let jsonStringified = JSON.stringify(json, undefined, 1);\n    jsonUtils.validateJson(jsonStringified);\n    return jsonStringified;\n  }\n\n  getJsonFromCsv(fileInputName) {\n    let parsedCsv = fileUtils.readFile(fileInputName, this.encoding);\n    return this.csvToJson(parsedCsv);\n  }\n\n  csvStringToJson(csvString) {\n    return this.csvToJson(csvString);\n  }\n\n  csvToJson(parsedCsv) {\n    let lines = parsedCsv.split(newLine);\n    let fieldDelimiter = this.getFieldDelimiter();\n    let headers = lines[0].split(fieldDelimiter);\n    let jsonResult = [];\n\n    for (let i = 1; i < lines.length; i++) {\n      let currentLine = lines[i].split(fieldDelimiter);\n\n      if (stringUtils.hasContent(currentLine)) {\n        jsonResult.push(this.buildJsonResult(headers, currentLine));\n      }\n    }\n\n    return jsonResult;\n  }\n\n  getFieldDelimiter() {\n    if (this.delimiter) {\n      return this.delimiter;\n    }\n\n    return defaultFieldDelimiter;\n  }\n\n  buildJsonResult(headers, currentLine) {\n    let jsonObject = {};\n\n    for (let j = 0; j < headers.length; j++) {\n      let propertyName = stringUtils.trimPropertyName(headers[j]);\n      let value = currentLine[j];\n\n      if (this.isParseSubArray(value)) {\n        value = this.buildJsonSubArray(value);\n      }\n\n      if (this.printValueFormatByType && !Array.isArray(value)) {\n        value = stringUtils.getValueFormatByType(currentLine[j]);\n      }\n\n      jsonObject[propertyName] = value;\n    }\n\n    return jsonObject;\n  }\n\n  buildJsonSubArray(value) {\n    let extractedValues = value.substring(value.indexOf(this.parseSubArrayDelimiter) + 1, value.lastIndexOf(this.parseSubArrayDelimiter));\n    extractedValues.trim();\n    value = extractedValues.split(this.parseSubArraySeparator);\n\n    if (this.printValueFormatByType) {\n      for (let i = 0; i < value.length; i++) {\n        value[i] = stringUtils.getValueFormatByType(value[i]);\n      }\n    }\n\n    return value;\n  }\n\n  isParseSubArray(value) {\n    if (this.parseSubArrayDelimiter) {\n      if (value && value.indexOf(this.parseSubArrayDelimiter) === 0 && value.lastIndexOf(this.parseSubArrayDelimiter) === value.length - 1) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}\n\nmodule.exports = new CsvToJson();","map":{"version":3,"names":["fileUtils","require","stringUtils","jsonUtils","newLine","defaultFieldDelimiter","CsvToJson","formatValueByType","active","printValueFormatByType","fieldDelimiter","delimieter","delimiter","parseSubArray","separator","parseSubArrayDelimiter","parseSubArraySeparator","encoding","generateJsonFileFromCsv","fileInputName","fileOutputName","jsonStringified","getJsonFromCsvStringified","writeFile","json","getJsonFromCsv","JSON","stringify","undefined","validateJson","parsedCsv","readFile","csvToJson","csvStringToJson","csvString","lines","split","getFieldDelimiter","headers","jsonResult","i","length","currentLine","hasContent","push","buildJsonResult","jsonObject","j","propertyName","trimPropertyName","value","isParseSubArray","buildJsonSubArray","Array","isArray","getValueFormatByType","extractedValues","substring","indexOf","lastIndexOf","trim","module","exports"],"sources":["/home/asura/github/smartcity/source/node_modules/convert-csv-to-json/src/csvToJson.js"],"sourcesContent":["\"use strict\";\n\nlet fileUtils = require(\"././util/fileUtils\");\nlet stringUtils = require(\"././util/stringUtils\");\nlet jsonUtils = require(\"././util/jsonUtils\");\n\nconst newLine = /\\r?\\n/;\nconst defaultFieldDelimiter = \";\";\n\nclass CsvToJson {\n\n  formatValueByType(active) {\n    this.printValueFormatByType = active;\n    return this;\n  }\n\n  fieldDelimiter(delimieter) {\n    this.delimiter = delimieter;\n    return this;\n  }\n\n  parseSubArray(delimiter = '*',separator = ',') {\n    this.parseSubArrayDelimiter = delimiter;\n    this.parseSubArraySeparator = separator;\n  }\n\n  encoding(encoding){\n    this.encoding = encoding;\n    return this;\n  }\n\n  generateJsonFileFromCsv(fileInputName, fileOutputName) {\n    let jsonStringified = this.getJsonFromCsvStringified(fileInputName);\n    fileUtils.writeFile(jsonStringified, fileOutputName);\n  }\n\n  getJsonFromCsvStringified(fileInputName) {\n    let json = this.getJsonFromCsv(fileInputName);\n    let jsonStringified = JSON.stringify(json, undefined, 1);\n    jsonUtils.validateJson(jsonStringified);\n    return jsonStringified;\n  }\n\n  getJsonFromCsv(fileInputName) {\n    let parsedCsv = fileUtils.readFile(fileInputName, this.encoding);\n    return this.csvToJson(parsedCsv);\n  }\n\n  csvStringToJson(csvString) {\n    return this.csvToJson(csvString);\n  }\n\n  csvToJson(parsedCsv) {\n    let lines = parsedCsv.split(newLine);\n    let fieldDelimiter = this.getFieldDelimiter();\n    let headers = lines[0].split(fieldDelimiter);\n\n    let jsonResult = [];\n    for (let i = 1; i < lines.length; i++) {\n      let currentLine = lines[i].split(fieldDelimiter);\n      if (stringUtils.hasContent(currentLine)) {\n        jsonResult.push(this.buildJsonResult(headers, currentLine));\n      }\n    }\n    return jsonResult;\n  }\n\n  getFieldDelimiter() {\n    if (this.delimiter) {\n      return this.delimiter;\n    }\n    return defaultFieldDelimiter;\n  }\n\n  buildJsonResult(headers, currentLine) {\n    let jsonObject = {};\n    for (let j = 0; j < headers.length; j++) {\n      let propertyName = stringUtils.trimPropertyName(headers[j]);\n      let value = currentLine[j];\n\n      if(this.isParseSubArray(value)){\n        value = this.buildJsonSubArray(value);\n      }\n\n      if (this.printValueFormatByType && !Array.isArray(value)) {\n        value = stringUtils.getValueFormatByType(currentLine[j]);\n      }\n\n      jsonObject[propertyName] = value;\n    }\n    return jsonObject;\n  }\n\n  buildJsonSubArray(value) {\n    let extractedValues = value.substring(\n        value.indexOf(this.parseSubArrayDelimiter) + 1,\n        value.lastIndexOf(this.parseSubArrayDelimiter)\n    );\n    extractedValues.trim();\n    value = extractedValues.split(this.parseSubArraySeparator);\n    if(this.printValueFormatByType){\n      for(let i=0; i < value.length; i++){\n        value[i] = stringUtils.getValueFormatByType(value[i]);\n      }\n    }\n    return value;\n  }\n\n  isParseSubArray(value){\n    if(this.parseSubArrayDelimiter){\n      if (value && (value.indexOf(this.parseSubArrayDelimiter) === 0 && value.lastIndexOf(this.parseSubArrayDelimiter) === (value.length - 1))) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n}\n\nmodule.exports = new CsvToJson();\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}