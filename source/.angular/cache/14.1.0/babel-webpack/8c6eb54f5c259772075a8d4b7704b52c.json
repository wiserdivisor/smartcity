{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/geom/Circle\n */\n\n\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { createOrUpdate, forEachCorner, intersects } from '../extent.js';\nimport { deflateCoordinate } from './flat/deflate.js';\nimport { rotate, translate } from './flat/transform.js';\n/**\n * @classdesc\n * Circle geometry.\n *\n * @api\n */\n\nvar Circle =\n/** @class */\nfunction (_super) {\n  __extends(Circle, _super);\n  /**\n   * @param {!import(\"../coordinate.js\").Coordinate} center Center.\n   *     For internal use, flat coordinates in combination with `opt_layout` and no\n   *     `opt_radius` are also accepted.\n   * @param {number} [opt_radius] Radius.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   */\n\n\n  function Circle(center, opt_radius, opt_layout) {\n    var _this = _super.call(this) || this;\n\n    if (opt_layout !== undefined && opt_radius === undefined) {\n      _this.setFlatCoordinates(opt_layout, center);\n    } else {\n      var radius = opt_radius ? opt_radius : 0;\n\n      _this.setCenterAndRadius(center, radius, opt_layout);\n    }\n\n    return _this;\n  }\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Circle} Clone.\n   * @api\n   */\n\n\n  Circle.prototype.clone = function () {\n    var circle = new Circle(this.flatCoordinates.slice(), undefined, this.layout);\n    circle.applyProperties(this);\n    return circle;\n  };\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n\n\n  Circle.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n    var flatCoordinates = this.flatCoordinates;\n    var dx = x - flatCoordinates[0];\n    var dy = y - flatCoordinates[1];\n    var squaredDistance = dx * dx + dy * dy;\n\n    if (squaredDistance < minSquaredDistance) {\n      if (squaredDistance === 0) {\n        for (var i = 0; i < this.stride; ++i) {\n          closestPoint[i] = flatCoordinates[i];\n        }\n      } else {\n        var delta = this.getRadius() / Math.sqrt(squaredDistance);\n        closestPoint[0] = flatCoordinates[0] + delta * dx;\n        closestPoint[1] = flatCoordinates[1] + delta * dy;\n\n        for (var i = 2; i < this.stride; ++i) {\n          closestPoint[i] = flatCoordinates[i];\n        }\n      }\n\n      closestPoint.length = this.stride;\n      return squaredDistance;\n    } else {\n      return minSquaredDistance;\n    }\n  };\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n\n\n  Circle.prototype.containsXY = function (x, y) {\n    var flatCoordinates = this.flatCoordinates;\n    var dx = x - flatCoordinates[0];\n    var dy = y - flatCoordinates[1];\n    return dx * dx + dy * dy <= this.getRadiusSquared_();\n  };\n  /**\n   * Return the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.\n   * @return {import(\"../coordinate.js\").Coordinate} Center.\n   * @api\n   */\n\n\n  Circle.prototype.getCenter = function () {\n    return this.flatCoordinates.slice(0, this.stride);\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n\n\n  Circle.prototype.computeExtent = function (extent) {\n    var flatCoordinates = this.flatCoordinates;\n    var radius = flatCoordinates[this.stride] - flatCoordinates[0];\n    return createOrUpdate(flatCoordinates[0] - radius, flatCoordinates[1] - radius, flatCoordinates[0] + radius, flatCoordinates[1] + radius, extent);\n  };\n  /**\n   * Return the radius of the circle.\n   * @return {number} Radius.\n   * @api\n   */\n\n\n  Circle.prototype.getRadius = function () {\n    return Math.sqrt(this.getRadiusSquared_());\n  };\n  /**\n   * @private\n   * @return {number} Radius squared.\n   */\n\n\n  Circle.prototype.getRadiusSquared_ = function () {\n    var dx = this.flatCoordinates[this.stride] - this.flatCoordinates[0];\n    var dy = this.flatCoordinates[this.stride + 1] - this.flatCoordinates[1];\n    return dx * dx + dy * dy;\n  };\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n\n\n  Circle.prototype.getType = function () {\n    return 'Circle';\n  };\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n\n\n  Circle.prototype.intersectsExtent = function (extent) {\n    var circleExtent = this.getExtent();\n\n    if (intersects(extent, circleExtent)) {\n      var center = this.getCenter();\n\n      if (extent[0] <= center[0] && extent[2] >= center[0]) {\n        return true;\n      }\n\n      if (extent[1] <= center[1] && extent[3] >= center[1]) {\n        return true;\n      }\n\n      return forEachCorner(extent, this.intersectsCoordinate.bind(this));\n    }\n\n    return false;\n  };\n  /**\n   * Set the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.\n   * @param {import(\"../coordinate.js\").Coordinate} center Center.\n   * @api\n   */\n\n\n  Circle.prototype.setCenter = function (center) {\n    var stride = this.stride;\n    var radius = this.flatCoordinates[stride] - this.flatCoordinates[0];\n    var flatCoordinates = center.slice();\n    flatCoordinates[stride] = flatCoordinates[0] + radius;\n\n    for (var i = 1; i < stride; ++i) {\n      flatCoordinates[stride + i] = center[i];\n    }\n\n    this.setFlatCoordinates(this.layout, flatCoordinates);\n    this.changed();\n  };\n  /**\n   * Set the center (as {@link module:ol/coordinate~Coordinate coordinate}) and the radius (as\n   * number) of the circle.\n   * @param {!import(\"../coordinate.js\").Coordinate} center Center.\n   * @param {number} radius Radius.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   * @api\n   */\n\n\n  Circle.prototype.setCenterAndRadius = function (center, radius, opt_layout) {\n    this.setLayout(opt_layout, center, 0);\n\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    /** @type {Array<number>} */\n\n\n    var flatCoordinates = this.flatCoordinates;\n    var offset = deflateCoordinate(flatCoordinates, 0, center, this.stride);\n    flatCoordinates[offset++] = flatCoordinates[0] + radius;\n\n    for (var i = 1, ii = this.stride; i < ii; ++i) {\n      flatCoordinates[offset++] = flatCoordinates[i];\n    }\n\n    flatCoordinates.length = offset;\n    this.changed();\n  };\n\n  Circle.prototype.getCoordinates = function () {\n    return null;\n  };\n\n  Circle.prototype.setCoordinates = function (coordinates, opt_layout) {};\n  /**\n   * Set the radius of the circle. The radius is in the units of the projection.\n   * @param {number} radius Radius.\n   * @api\n   */\n\n\n  Circle.prototype.setRadius = function (radius) {\n    this.flatCoordinates[this.stride] = this.flatCoordinates[0] + radius;\n    this.changed();\n  };\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @param {number} angle Rotation angle in counter-clockwise radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n\n\n  Circle.prototype.rotate = function (angle, anchor) {\n    var center = this.getCenter();\n    var stride = this.getStride();\n    this.setCenter(rotate(center, 0, center.length, stride, angle, anchor, center));\n    this.changed();\n  };\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n\n\n  Circle.prototype.translate = function (deltaX, deltaY) {\n    var center = this.getCenter();\n    var stride = this.getStride();\n    this.setCenter(translate(center, 0, center.length, stride, deltaX, deltaY, center));\n    this.changed();\n  };\n\n  return Circle;\n}(SimpleGeometry);\n/**\n * Transform each coordinate of the circle from one coordinate reference system\n * to another. The geometry is modified in place.\n * If you do not want the geometry modified in place, first clone() it and\n * then use this function on the clone.\n *\n * Internally a circle is currently represented by two points: the center of\n * the circle `[cx, cy]`, and the point to the right of the circle\n * `[cx + r, cy]`. This `transform` function just transforms these two points.\n * So the resulting geometry is also a circle, and that circle does not\n * correspond to the shape that would be obtained by transforming every point\n * of the original circle.\n *\n * @param {import(\"../proj.js\").ProjectionLike} source The current projection.  Can be a\n *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.  Can be a\n *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n * @return {Circle} This geometry.  Note that original geometry is\n *     modified in place.\n * @function\n * @api\n */\n\n\nCircle.prototype.transform;\nexport default Circle;","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","SimpleGeometry","createOrUpdate","forEachCorner","intersects","deflateCoordinate","rotate","translate","Circle","_super","center","opt_radius","opt_layout","_this","undefined","setFlatCoordinates","radius","setCenterAndRadius","clone","circle","flatCoordinates","slice","layout","applyProperties","closestPointXY","x","y","closestPoint","minSquaredDistance","dx","dy","squaredDistance","i","stride","delta","getRadius","Math","sqrt","length","containsXY","getRadiusSquared_","getCenter","computeExtent","extent","getType","intersectsExtent","circleExtent","getExtent","intersectsCoordinate","bind","setCenter","changed","setLayout","offset","ii","getCoordinates","setCoordinates","coordinates","setRadius","angle","anchor","getStride","deltaX","deltaY","transform"],"sources":["/home/asura/github/smartcity/source/node_modules/ol/geom/Circle.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/geom/Circle\n */\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { createOrUpdate, forEachCorner, intersects } from '../extent.js';\nimport { deflateCoordinate } from './flat/deflate.js';\nimport { rotate, translate } from './flat/transform.js';\n/**\n * @classdesc\n * Circle geometry.\n *\n * @api\n */\nvar Circle = /** @class */ (function (_super) {\n    __extends(Circle, _super);\n    /**\n     * @param {!import(\"../coordinate.js\").Coordinate} center Center.\n     *     For internal use, flat coordinates in combination with `opt_layout` and no\n     *     `opt_radius` are also accepted.\n     * @param {number} [opt_radius] Radius.\n     * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n     */\n    function Circle(center, opt_radius, opt_layout) {\n        var _this = _super.call(this) || this;\n        if (opt_layout !== undefined && opt_radius === undefined) {\n            _this.setFlatCoordinates(opt_layout, center);\n        }\n        else {\n            var radius = opt_radius ? opt_radius : 0;\n            _this.setCenterAndRadius(center, radius, opt_layout);\n        }\n        return _this;\n    }\n    /**\n     * Make a complete copy of the geometry.\n     * @return {!Circle} Clone.\n     * @api\n     */\n    Circle.prototype.clone = function () {\n        var circle = new Circle(this.flatCoordinates.slice(), undefined, this.layout);\n        circle.applyProperties(this);\n        return circle;\n    };\n    /**\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n     * @param {number} minSquaredDistance Minimum squared distance.\n     * @return {number} Minimum squared distance.\n     */\n    Circle.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n        var flatCoordinates = this.flatCoordinates;\n        var dx = x - flatCoordinates[0];\n        var dy = y - flatCoordinates[1];\n        var squaredDistance = dx * dx + dy * dy;\n        if (squaredDistance < minSquaredDistance) {\n            if (squaredDistance === 0) {\n                for (var i = 0; i < this.stride; ++i) {\n                    closestPoint[i] = flatCoordinates[i];\n                }\n            }\n            else {\n                var delta = this.getRadius() / Math.sqrt(squaredDistance);\n                closestPoint[0] = flatCoordinates[0] + delta * dx;\n                closestPoint[1] = flatCoordinates[1] + delta * dy;\n                for (var i = 2; i < this.stride; ++i) {\n                    closestPoint[i] = flatCoordinates[i];\n                }\n            }\n            closestPoint.length = this.stride;\n            return squaredDistance;\n        }\n        else {\n            return minSquaredDistance;\n        }\n    };\n    /**\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @return {boolean} Contains (x, y).\n     */\n    Circle.prototype.containsXY = function (x, y) {\n        var flatCoordinates = this.flatCoordinates;\n        var dx = x - flatCoordinates[0];\n        var dy = y - flatCoordinates[1];\n        return dx * dx + dy * dy <= this.getRadiusSquared_();\n    };\n    /**\n     * Return the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.\n     * @return {import(\"../coordinate.js\").Coordinate} Center.\n     * @api\n     */\n    Circle.prototype.getCenter = function () {\n        return this.flatCoordinates.slice(0, this.stride);\n    };\n    /**\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @protected\n     * @return {import(\"../extent.js\").Extent} extent Extent.\n     */\n    Circle.prototype.computeExtent = function (extent) {\n        var flatCoordinates = this.flatCoordinates;\n        var radius = flatCoordinates[this.stride] - flatCoordinates[0];\n        return createOrUpdate(flatCoordinates[0] - radius, flatCoordinates[1] - radius, flatCoordinates[0] + radius, flatCoordinates[1] + radius, extent);\n    };\n    /**\n     * Return the radius of the circle.\n     * @return {number} Radius.\n     * @api\n     */\n    Circle.prototype.getRadius = function () {\n        return Math.sqrt(this.getRadiusSquared_());\n    };\n    /**\n     * @private\n     * @return {number} Radius squared.\n     */\n    Circle.prototype.getRadiusSquared_ = function () {\n        var dx = this.flatCoordinates[this.stride] - this.flatCoordinates[0];\n        var dy = this.flatCoordinates[this.stride + 1] - this.flatCoordinates[1];\n        return dx * dx + dy * dy;\n    };\n    /**\n     * Get the type of this geometry.\n     * @return {import(\"./Geometry.js\").Type} Geometry type.\n     * @api\n     */\n    Circle.prototype.getType = function () {\n        return 'Circle';\n    };\n    /**\n     * Test if the geometry and the passed extent intersect.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @return {boolean} `true` if the geometry and the extent intersect.\n     * @api\n     */\n    Circle.prototype.intersectsExtent = function (extent) {\n        var circleExtent = this.getExtent();\n        if (intersects(extent, circleExtent)) {\n            var center = this.getCenter();\n            if (extent[0] <= center[0] && extent[2] >= center[0]) {\n                return true;\n            }\n            if (extent[1] <= center[1] && extent[3] >= center[1]) {\n                return true;\n            }\n            return forEachCorner(extent, this.intersectsCoordinate.bind(this));\n        }\n        return false;\n    };\n    /**\n     * Set the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.\n     * @param {import(\"../coordinate.js\").Coordinate} center Center.\n     * @api\n     */\n    Circle.prototype.setCenter = function (center) {\n        var stride = this.stride;\n        var radius = this.flatCoordinates[stride] - this.flatCoordinates[0];\n        var flatCoordinates = center.slice();\n        flatCoordinates[stride] = flatCoordinates[0] + radius;\n        for (var i = 1; i < stride; ++i) {\n            flatCoordinates[stride + i] = center[i];\n        }\n        this.setFlatCoordinates(this.layout, flatCoordinates);\n        this.changed();\n    };\n    /**\n     * Set the center (as {@link module:ol/coordinate~Coordinate coordinate}) and the radius (as\n     * number) of the circle.\n     * @param {!import(\"../coordinate.js\").Coordinate} center Center.\n     * @param {number} radius Radius.\n     * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n     * @api\n     */\n    Circle.prototype.setCenterAndRadius = function (center, radius, opt_layout) {\n        this.setLayout(opt_layout, center, 0);\n        if (!this.flatCoordinates) {\n            this.flatCoordinates = [];\n        }\n        /** @type {Array<number>} */\n        var flatCoordinates = this.flatCoordinates;\n        var offset = deflateCoordinate(flatCoordinates, 0, center, this.stride);\n        flatCoordinates[offset++] = flatCoordinates[0] + radius;\n        for (var i = 1, ii = this.stride; i < ii; ++i) {\n            flatCoordinates[offset++] = flatCoordinates[i];\n        }\n        flatCoordinates.length = offset;\n        this.changed();\n    };\n    Circle.prototype.getCoordinates = function () {\n        return null;\n    };\n    Circle.prototype.setCoordinates = function (coordinates, opt_layout) { };\n    /**\n     * Set the radius of the circle. The radius is in the units of the projection.\n     * @param {number} radius Radius.\n     * @api\n     */\n    Circle.prototype.setRadius = function (radius) {\n        this.flatCoordinates[this.stride] = this.flatCoordinates[0] + radius;\n        this.changed();\n    };\n    /**\n     * Rotate the geometry around a given coordinate. This modifies the geometry\n     * coordinates in place.\n     * @param {number} angle Rotation angle in counter-clockwise radians.\n     * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n     * @api\n     */\n    Circle.prototype.rotate = function (angle, anchor) {\n        var center = this.getCenter();\n        var stride = this.getStride();\n        this.setCenter(rotate(center, 0, center.length, stride, angle, anchor, center));\n        this.changed();\n    };\n    /**\n     * Translate the geometry.  This modifies the geometry coordinates in place.  If\n     * instead you want a new geometry, first `clone()` this geometry.\n     * @param {number} deltaX Delta X.\n     * @param {number} deltaY Delta Y.\n     * @api\n     */\n    Circle.prototype.translate = function (deltaX, deltaY) {\n        var center = this.getCenter();\n        var stride = this.getStride();\n        this.setCenter(translate(center, 0, center.length, stride, deltaX, deltaY, center));\n        this.changed();\n    };\n    return Circle;\n}(SimpleGeometry));\n/**\n * Transform each coordinate of the circle from one coordinate reference system\n * to another. The geometry is modified in place.\n * If you do not want the geometry modified in place, first clone() it and\n * then use this function on the clone.\n *\n * Internally a circle is currently represented by two points: the center of\n * the circle `[cx, cy]`, and the point to the right of the circle\n * `[cx + r, cy]`. This `transform` function just transforms these two points.\n * So the resulting geometry is also a circle, and that circle does not\n * correspond to the shape that would be obtained by transforming every point\n * of the original circle.\n *\n * @param {import(\"../proj.js\").ProjectionLike} source The current projection.  Can be a\n *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.  Can be a\n *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n * @return {Circle} This geometry.  Note that original geometry is\n *     modified in place.\n * @function\n * @api\n */\nCircle.prototype.transform;\nexport default Circle;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}