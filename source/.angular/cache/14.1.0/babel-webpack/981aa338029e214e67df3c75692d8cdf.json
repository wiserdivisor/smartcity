{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/Tile\n */\n\n\nimport EventTarget from './events/Target.js';\nimport EventType from './events/EventType.js';\nimport TileState from './TileState.js';\nimport { abstract } from './util.js';\nimport { easeIn } from './easing.js';\n/**\n * A function that takes an {@link module:ol/Tile~Tile} for the tile and a\n * `{string}` for the url as arguments. The default is\n * ```js\n * source.setTileLoadFunction(function(tile, src) {\n *   tile.getImage().src = src;\n * });\n * ```\n * For more fine grained control, the load function can use fetch or XMLHttpRequest and involve\n * error handling:\n *\n * ```js\n * import TileState from 'ol/TileState';\n *\n * source.setTileLoadFunction(function(tile, src) {\n *   var xhr = new XMLHttpRequest();\n *   xhr.responseType = 'blob';\n *   xhr.addEventListener('loadend', function (evt) {\n *     var data = this.response;\n *     if (data !== undefined) {\n *       tile.getImage().src = URL.createObjectURL(data);\n *     } else {\n *       tile.setState(TileState.ERROR);\n *     }\n *   });\n *   xhr.addEventListener('error', function () {\n *     tile.setState(TileState.ERROR);\n *   });\n *   xhr.open('GET', src);\n *   xhr.send();\n * });\n * ```\n *\n * @typedef {function(Tile, string): void} LoadFunction\n * @api\n */\n\n/**\n * {@link module:ol/source/Tile~TileSource} sources use a function of this type to get\n * the url that provides a tile for a given tile coordinate.\n *\n * This function takes an {@link module:ol/tilecoord~TileCoord} for the tile\n * coordinate, a `{number}` representing the pixel ratio and a\n * {@link module:ol/proj/Projection~Projection} for the projection  as arguments\n * and returns a `{string}` representing the tile URL, or undefined if no tile\n * should be requested for the passed tile coordinate.\n *\n * @typedef {function(import(\"./tilecoord.js\").TileCoord, number,\n *           import(\"./proj/Projection.js\").default): (string|undefined)} UrlFunction\n * @api\n */\n\n/**\n * @typedef {Object} Options\n * @property {number} [transition=250] A duration for tile opacity\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n * @api\n */\n\n/**\n * @classdesc\n * Base class for tiles.\n *\n * @abstract\n */\n\nvar Tile =\n/** @class */\nfunction (_super) {\n  __extends(Tile, _super);\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"./TileState.js\").default} state State.\n   * @param {Options} [opt_options] Tile options.\n   */\n\n\n  function Tile(tileCoord, state, opt_options) {\n    var _this = _super.call(this) || this;\n\n    var options = opt_options ? opt_options : {};\n    /**\n     * @type {import(\"./tilecoord.js\").TileCoord}\n     */\n\n    _this.tileCoord = tileCoord;\n    /**\n     * @protected\n     * @type {import(\"./TileState.js\").default}\n     */\n\n    _this.state = state;\n    /**\n     * An \"interim\" tile for this tile. The interim tile may be used while this\n     * one is loading, for \"smooth\" transitions when changing params/dimensions\n     * on the source.\n     * @type {Tile}\n     */\n\n    _this.interimTile = null;\n    /**\n     * A key assigned to the tile. This is used by the tile source to determine\n     * if this tile can effectively be used, or if a new tile should be created\n     * and this one be used as an interim tile for this new tile.\n     * @type {string}\n     */\n\n    _this.key = '';\n    /**\n     * The duration for the opacity transition.\n     * @type {number}\n     */\n\n    _this.transition_ = options.transition === undefined ? 250 : options.transition;\n    /**\n     * Lookup of start times for rendering transitions.  If the start time is\n     * equal to -1, the transition is complete.\n     * @type {Object<string, number>}\n     */\n\n    _this.transitionStarts_ = {};\n    /**\n     * @type {boolean}\n     */\n\n    _this.interpolate = !!options.interpolate;\n    return _this;\n  }\n  /**\n   * @protected\n   */\n\n\n  Tile.prototype.changed = function () {\n    this.dispatchEvent(EventType.CHANGE);\n  };\n  /**\n   * Called by the tile cache when the tile is removed from the cache due to expiry\n   */\n\n\n  Tile.prototype.release = function () {};\n  /**\n   * @return {string} Key.\n   */\n\n\n  Tile.prototype.getKey = function () {\n    return this.key + '/' + this.tileCoord;\n  };\n  /**\n   * Get the interim tile most suitable for rendering using the chain of interim\n   * tiles. This corresponds to the  most recent tile that has been loaded, if no\n   * such tile exists, the original tile is returned.\n   * @return {!Tile} Best tile for rendering.\n   */\n\n\n  Tile.prototype.getInterimTile = function () {\n    if (!this.interimTile) {\n      //empty chain\n      return this;\n    }\n\n    var tile = this.interimTile; // find the first loaded tile and return it. Since the chain is sorted in\n    // decreasing order of creation time, there is no need to search the remainder\n    // of the list (all those tiles correspond to older requests and will be\n    // cleaned up by refreshInterimChain)\n\n    do {\n      if (tile.getState() == TileState.LOADED) {\n        // Show tile immediately instead of fading it in after loading, because\n        // the interim tile is in place already\n        this.transition_ = 0;\n        return tile;\n      }\n\n      tile = tile.interimTile;\n    } while (tile); // we can not find a better tile\n\n\n    return this;\n  };\n  /**\n   * Goes through the chain of interim tiles and discards sections of the chain\n   * that are no longer relevant.\n   */\n\n\n  Tile.prototype.refreshInterimChain = function () {\n    if (!this.interimTile) {\n      return;\n    }\n\n    var tile = this.interimTile;\n    /**\n     * @type {Tile}\n     */\n\n    var prev = this;\n\n    do {\n      if (tile.getState() == TileState.LOADED) {\n        //we have a loaded tile, we can discard the rest of the list\n        //we would could abort any LOADING tile request\n        //older than this tile (i.e. any LOADING tile following this entry in the chain)\n        tile.interimTile = null;\n        break;\n      } else if (tile.getState() == TileState.LOADING) {\n        //keep this LOADING tile any loaded tiles later in the chain are\n        //older than this tile, so we're still interested in the request\n        prev = tile;\n      } else if (tile.getState() == TileState.IDLE) {\n        //the head of the list is the most current tile, we don't need\n        //to start any other requests for this chain\n        prev.interimTile = tile.interimTile;\n      } else {\n        prev = tile;\n      }\n\n      tile = prev.interimTile;\n    } while (tile);\n  };\n  /**\n   * Get the tile coordinate for this tile.\n   * @return {import(\"./tilecoord.js\").TileCoord} The tile coordinate.\n   * @api\n   */\n\n\n  Tile.prototype.getTileCoord = function () {\n    return this.tileCoord;\n  };\n  /**\n   * @return {import(\"./TileState.js\").default} State.\n   */\n\n\n  Tile.prototype.getState = function () {\n    return this.state;\n  };\n  /**\n   * Sets the state of this tile. If you write your own {@link module:ol/Tile~LoadFunction tileLoadFunction} ,\n   * it is important to set the state correctly to {@link module:ol/TileState~ERROR}\n   * when the tile cannot be loaded. Otherwise the tile cannot be removed from\n   * the tile queue and will block other requests.\n   * @param {import(\"./TileState.js\").default} state State.\n   * @api\n   */\n\n\n  Tile.prototype.setState = function (state) {\n    if (this.state !== TileState.ERROR && this.state > state) {\n      throw new Error('Tile load sequence violation');\n    }\n\n    this.state = state;\n    this.changed();\n  };\n  /**\n   * Load the image or retry if loading previously failed.\n   * Loading is taken care of by the tile queue, and calling this method is\n   * only needed for preloading or for reloading in case of an error.\n   * @abstract\n   * @api\n   */\n\n\n  Tile.prototype.load = function () {\n    abstract();\n  };\n  /**\n   * Get the alpha value for rendering.\n   * @param {string} id An id for the renderer.\n   * @param {number} time The render frame time.\n   * @return {number} A number between 0 and 1.\n   */\n\n\n  Tile.prototype.getAlpha = function (id, time) {\n    if (!this.transition_) {\n      return 1;\n    }\n\n    var start = this.transitionStarts_[id];\n\n    if (!start) {\n      start = time;\n      this.transitionStarts_[id] = start;\n    } else if (start === -1) {\n      return 1;\n    }\n\n    var delta = time - start + 1000 / 60; // avoid rendering at 0\n\n    if (delta >= this.transition_) {\n      return 1;\n    }\n\n    return easeIn(delta / this.transition_);\n  };\n  /**\n   * Determine if a tile is in an alpha transition.  A tile is considered in\n   * transition if tile.getAlpha() has not yet been called or has been called\n   * and returned 1.\n   * @param {string} id An id for the renderer.\n   * @return {boolean} The tile is in transition.\n   */\n\n\n  Tile.prototype.inTransition = function (id) {\n    if (!this.transition_) {\n      return false;\n    }\n\n    return this.transitionStarts_[id] !== -1;\n  };\n  /**\n   * Mark a transition as complete.\n   * @param {string} id An id for the renderer.\n   */\n\n\n  Tile.prototype.endTransition = function (id) {\n    if (this.transition_) {\n      this.transitionStarts_[id] = -1;\n    }\n  };\n\n  return Tile;\n}(EventTarget);\n\nexport default Tile;","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","EventTarget","EventType","TileState","abstract","easeIn","Tile","_super","tileCoord","state","opt_options","_this","options","interimTile","key","transition_","transition","undefined","transitionStarts_","interpolate","changed","dispatchEvent","CHANGE","release","getKey","getInterimTile","tile","getState","LOADED","refreshInterimChain","prev","LOADING","IDLE","getTileCoord","setState","ERROR","Error","load","getAlpha","id","time","start","delta","inTransition","endTransition"],"sources":["/home/asura/github/smartcity/source/node_modules/ol/Tile.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/Tile\n */\nimport EventTarget from './events/Target.js';\nimport EventType from './events/EventType.js';\nimport TileState from './TileState.js';\nimport { abstract } from './util.js';\nimport { easeIn } from './easing.js';\n/**\n * A function that takes an {@link module:ol/Tile~Tile} for the tile and a\n * `{string}` for the url as arguments. The default is\n * ```js\n * source.setTileLoadFunction(function(tile, src) {\n *   tile.getImage().src = src;\n * });\n * ```\n * For more fine grained control, the load function can use fetch or XMLHttpRequest and involve\n * error handling:\n *\n * ```js\n * import TileState from 'ol/TileState';\n *\n * source.setTileLoadFunction(function(tile, src) {\n *   var xhr = new XMLHttpRequest();\n *   xhr.responseType = 'blob';\n *   xhr.addEventListener('loadend', function (evt) {\n *     var data = this.response;\n *     if (data !== undefined) {\n *       tile.getImage().src = URL.createObjectURL(data);\n *     } else {\n *       tile.setState(TileState.ERROR);\n *     }\n *   });\n *   xhr.addEventListener('error', function () {\n *     tile.setState(TileState.ERROR);\n *   });\n *   xhr.open('GET', src);\n *   xhr.send();\n * });\n * ```\n *\n * @typedef {function(Tile, string): void} LoadFunction\n * @api\n */\n/**\n * {@link module:ol/source/Tile~TileSource} sources use a function of this type to get\n * the url that provides a tile for a given tile coordinate.\n *\n * This function takes an {@link module:ol/tilecoord~TileCoord} for the tile\n * coordinate, a `{number}` representing the pixel ratio and a\n * {@link module:ol/proj/Projection~Projection} for the projection  as arguments\n * and returns a `{string}` representing the tile URL, or undefined if no tile\n * should be requested for the passed tile coordinate.\n *\n * @typedef {function(import(\"./tilecoord.js\").TileCoord, number,\n *           import(\"./proj/Projection.js\").default): (string|undefined)} UrlFunction\n * @api\n */\n/**\n * @typedef {Object} Options\n * @property {number} [transition=250] A duration for tile opacity\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n * @api\n */\n/**\n * @classdesc\n * Base class for tiles.\n *\n * @abstract\n */\nvar Tile = /** @class */ (function (_super) {\n    __extends(Tile, _super);\n    /**\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n     * @param {import(\"./TileState.js\").default} state State.\n     * @param {Options} [opt_options] Tile options.\n     */\n    function Tile(tileCoord, state, opt_options) {\n        var _this = _super.call(this) || this;\n        var options = opt_options ? opt_options : {};\n        /**\n         * @type {import(\"./tilecoord.js\").TileCoord}\n         */\n        _this.tileCoord = tileCoord;\n        /**\n         * @protected\n         * @type {import(\"./TileState.js\").default}\n         */\n        _this.state = state;\n        /**\n         * An \"interim\" tile for this tile. The interim tile may be used while this\n         * one is loading, for \"smooth\" transitions when changing params/dimensions\n         * on the source.\n         * @type {Tile}\n         */\n        _this.interimTile = null;\n        /**\n         * A key assigned to the tile. This is used by the tile source to determine\n         * if this tile can effectively be used, or if a new tile should be created\n         * and this one be used as an interim tile for this new tile.\n         * @type {string}\n         */\n        _this.key = '';\n        /**\n         * The duration for the opacity transition.\n         * @type {number}\n         */\n        _this.transition_ =\n            options.transition === undefined ? 250 : options.transition;\n        /**\n         * Lookup of start times for rendering transitions.  If the start time is\n         * equal to -1, the transition is complete.\n         * @type {Object<string, number>}\n         */\n        _this.transitionStarts_ = {};\n        /**\n         * @type {boolean}\n         */\n        _this.interpolate = !!options.interpolate;\n        return _this;\n    }\n    /**\n     * @protected\n     */\n    Tile.prototype.changed = function () {\n        this.dispatchEvent(EventType.CHANGE);\n    };\n    /**\n     * Called by the tile cache when the tile is removed from the cache due to expiry\n     */\n    Tile.prototype.release = function () { };\n    /**\n     * @return {string} Key.\n     */\n    Tile.prototype.getKey = function () {\n        return this.key + '/' + this.tileCoord;\n    };\n    /**\n     * Get the interim tile most suitable for rendering using the chain of interim\n     * tiles. This corresponds to the  most recent tile that has been loaded, if no\n     * such tile exists, the original tile is returned.\n     * @return {!Tile} Best tile for rendering.\n     */\n    Tile.prototype.getInterimTile = function () {\n        if (!this.interimTile) {\n            //empty chain\n            return this;\n        }\n        var tile = this.interimTile;\n        // find the first loaded tile and return it. Since the chain is sorted in\n        // decreasing order of creation time, there is no need to search the remainder\n        // of the list (all those tiles correspond to older requests and will be\n        // cleaned up by refreshInterimChain)\n        do {\n            if (tile.getState() == TileState.LOADED) {\n                // Show tile immediately instead of fading it in after loading, because\n                // the interim tile is in place already\n                this.transition_ = 0;\n                return tile;\n            }\n            tile = tile.interimTile;\n        } while (tile);\n        // we can not find a better tile\n        return this;\n    };\n    /**\n     * Goes through the chain of interim tiles and discards sections of the chain\n     * that are no longer relevant.\n     */\n    Tile.prototype.refreshInterimChain = function () {\n        if (!this.interimTile) {\n            return;\n        }\n        var tile = this.interimTile;\n        /**\n         * @type {Tile}\n         */\n        var prev = this;\n        do {\n            if (tile.getState() == TileState.LOADED) {\n                //we have a loaded tile, we can discard the rest of the list\n                //we would could abort any LOADING tile request\n                //older than this tile (i.e. any LOADING tile following this entry in the chain)\n                tile.interimTile = null;\n                break;\n            }\n            else if (tile.getState() == TileState.LOADING) {\n                //keep this LOADING tile any loaded tiles later in the chain are\n                //older than this tile, so we're still interested in the request\n                prev = tile;\n            }\n            else if (tile.getState() == TileState.IDLE) {\n                //the head of the list is the most current tile, we don't need\n                //to start any other requests for this chain\n                prev.interimTile = tile.interimTile;\n            }\n            else {\n                prev = tile;\n            }\n            tile = prev.interimTile;\n        } while (tile);\n    };\n    /**\n     * Get the tile coordinate for this tile.\n     * @return {import(\"./tilecoord.js\").TileCoord} The tile coordinate.\n     * @api\n     */\n    Tile.prototype.getTileCoord = function () {\n        return this.tileCoord;\n    };\n    /**\n     * @return {import(\"./TileState.js\").default} State.\n     */\n    Tile.prototype.getState = function () {\n        return this.state;\n    };\n    /**\n     * Sets the state of this tile. If you write your own {@link module:ol/Tile~LoadFunction tileLoadFunction} ,\n     * it is important to set the state correctly to {@link module:ol/TileState~ERROR}\n     * when the tile cannot be loaded. Otherwise the tile cannot be removed from\n     * the tile queue and will block other requests.\n     * @param {import(\"./TileState.js\").default} state State.\n     * @api\n     */\n    Tile.prototype.setState = function (state) {\n        if (this.state !== TileState.ERROR && this.state > state) {\n            throw new Error('Tile load sequence violation');\n        }\n        this.state = state;\n        this.changed();\n    };\n    /**\n     * Load the image or retry if loading previously failed.\n     * Loading is taken care of by the tile queue, and calling this method is\n     * only needed for preloading or for reloading in case of an error.\n     * @abstract\n     * @api\n     */\n    Tile.prototype.load = function () {\n        abstract();\n    };\n    /**\n     * Get the alpha value for rendering.\n     * @param {string} id An id for the renderer.\n     * @param {number} time The render frame time.\n     * @return {number} A number between 0 and 1.\n     */\n    Tile.prototype.getAlpha = function (id, time) {\n        if (!this.transition_) {\n            return 1;\n        }\n        var start = this.transitionStarts_[id];\n        if (!start) {\n            start = time;\n            this.transitionStarts_[id] = start;\n        }\n        else if (start === -1) {\n            return 1;\n        }\n        var delta = time - start + 1000 / 60; // avoid rendering at 0\n        if (delta >= this.transition_) {\n            return 1;\n        }\n        return easeIn(delta / this.transition_);\n    };\n    /**\n     * Determine if a tile is in an alpha transition.  A tile is considered in\n     * transition if tile.getAlpha() has not yet been called or has been called\n     * and returned 1.\n     * @param {string} id An id for the renderer.\n     * @return {boolean} The tile is in transition.\n     */\n    Tile.prototype.inTransition = function (id) {\n        if (!this.transition_) {\n            return false;\n        }\n        return this.transitionStarts_[id] !== -1;\n    };\n    /**\n     * Mark a transition as complete.\n     * @param {string} id An id for the renderer.\n     */\n    Tile.prototype.endTransition = function (id) {\n        if (this.transition_) {\n            this.transitionStarts_[id] = -1;\n        }\n    };\n    return Tile;\n}(EventTarget));\nexport default Tile;\n"],"mappings":"AAAA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA6B,YAAY;EACrD,IAAIC,aAAa,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;IAChCF,aAAa,GAAGG,MAAM,CAACC,cAAP,IACX;MAAEC,SAAS,EAAE;IAAb,aAA6BC,KAA7B,IAAsC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;MAAED,CAAC,CAACI,SAAF,GAAcH,CAAd;IAAkB,CAD/D,IAEZ,UAAUD,CAAV,EAAaC,CAAb,EAAgB;MAAE,KAAK,IAAIK,CAAT,IAAcL,CAAd,EAAiB,IAAIC,MAAM,CAACK,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EAAgDN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;IAAc,CAFrG;;IAGA,OAAOP,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAApB;EACH,CALD;;EAMA,OAAO,UAAUD,CAAV,EAAaC,CAAb,EAAgB;IACnB,IAAI,OAAOA,CAAP,KAAa,UAAb,IAA2BA,CAAC,KAAK,IAArC,EACI,MAAM,IAAIS,SAAJ,CAAc,yBAAyBC,MAAM,CAACV,CAAD,CAA/B,GAAqC,+BAAnD,CAAN;IACJF,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAAb;;IACA,SAASW,EAAT,GAAc;MAAE,KAAKC,WAAL,GAAmBb,CAAnB;IAAuB;;IACvCA,CAAC,CAACO,SAAF,GAAcN,CAAC,KAAK,IAAN,GAAaC,MAAM,CAACY,MAAP,CAAcb,CAAd,CAAb,IAAiCW,EAAE,CAACL,SAAH,GAAeN,CAAC,CAACM,SAAjB,EAA4B,IAAIK,EAAJ,EAA7D,CAAd;EACH,CAND;AAOH,CAd2C,EAA5C;AAeA;AACA;AACA;;;AACA,OAAOG,WAAP,MAAwB,oBAAxB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,SAASC,QAAT,QAAyB,WAAzB;AACA,SAASC,MAAT,QAAuB,aAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,IAAI;AAAG;AAAe,UAAUC,MAAV,EAAkB;EACxCvB,SAAS,CAACsB,IAAD,EAAOC,MAAP,CAAT;EACA;AACJ;AACA;AACA;AACA;;;EACI,SAASD,IAAT,CAAcE,SAAd,EAAyBC,KAAzB,EAAgCC,WAAhC,EAA6C;IACzC,IAAIC,KAAK,GAAGJ,MAAM,CAACZ,IAAP,CAAY,IAAZ,KAAqB,IAAjC;;IACA,IAAIiB,OAAO,GAAGF,WAAW,GAAGA,WAAH,GAAiB,EAA1C;IACA;AACR;AACA;;IACQC,KAAK,CAACH,SAAN,GAAkBA,SAAlB;IACA;AACR;AACA;AACA;;IACQG,KAAK,CAACF,KAAN,GAAcA,KAAd;IACA;AACR;AACA;AACA;AACA;AACA;;IACQE,KAAK,CAACE,WAAN,GAAoB,IAApB;IACA;AACR;AACA;AACA;AACA;AACA;;IACQF,KAAK,CAACG,GAAN,GAAY,EAAZ;IACA;AACR;AACA;AACA;;IACQH,KAAK,CAACI,WAAN,GACIH,OAAO,CAACI,UAAR,KAAuBC,SAAvB,GAAmC,GAAnC,GAAyCL,OAAO,CAACI,UADrD;IAEA;AACR;AACA;AACA;AACA;;IACQL,KAAK,CAACO,iBAAN,GAA0B,EAA1B;IACA;AACR;AACA;;IACQP,KAAK,CAACQ,WAAN,GAAoB,CAAC,CAACP,OAAO,CAACO,WAA9B;IACA,OAAOR,KAAP;EACH;EACD;AACJ;AACA;;;EACIL,IAAI,CAACb,SAAL,CAAe2B,OAAf,GAAyB,YAAY;IACjC,KAAKC,aAAL,CAAmBnB,SAAS,CAACoB,MAA7B;EACH,CAFD;EAGA;AACJ;AACA;;;EACIhB,IAAI,CAACb,SAAL,CAAe8B,OA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"},"metadata":{},"sourceType":"module"}