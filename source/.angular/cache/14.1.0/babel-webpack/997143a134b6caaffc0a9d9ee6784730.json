{"ast":null,"code":"/**\n * @module ol/color\n */\nimport { assert } from './asserts.js';\nimport { clamp } from './math.js';\n/**\n * A color represented as a short array [red, green, blue, alpha].\n * red, green, and blue should be integers in the range 0..255 inclusive.\n * alpha should be a float in the range 0..1 inclusive. If no alpha value is\n * given then `1` will be used.\n * @typedef {Array<number>} Color\n * @api\n */\n\n/**\n * This RegExp matches # followed by 3, 4, 6, or 8 hex digits.\n * @const\n * @type {RegExp}\n * @private\n */\n\nvar HEX_COLOR_RE_ = /^#([a-f0-9]{3}|[a-f0-9]{4}(?:[a-f0-9]{2}){0,2})$/i;\n/**\n * Regular expression for matching potential named color style strings.\n * @const\n * @type {RegExp}\n * @private\n */\n\nvar NAMED_COLOR_RE_ = /^([a-z]*)$|^hsla?\\(.*\\)$/i;\n/**\n * Return the color as an rgba string.\n * @param {Color|string} color Color.\n * @return {string} Rgba string.\n * @api\n */\n\nexport function asString(color) {\n  if (typeof color === 'string') {\n    return color;\n  } else {\n    return toString(color);\n  }\n}\n/**\n * Return named color as an rgba string.\n * @param {string} color Named color.\n * @return {string} Rgb string.\n */\n\nfunction fromNamed(color) {\n  var el = document.createElement('div');\n  el.style.color = color;\n\n  if (el.style.color !== '') {\n    document.body.appendChild(el);\n    var rgb = getComputedStyle(el).color;\n    document.body.removeChild(el);\n    return rgb;\n  } else {\n    return '';\n  }\n}\n/**\n * @param {string} s String.\n * @return {Color} Color.\n */\n\n\nexport var fromString = function () {\n  // We maintain a small cache of parsed strings.  To provide cheap LRU-like\n  // semantics, whenever the cache grows too large we simply delete an\n  // arbitrary 25% of the entries.\n\n  /**\n   * @const\n   * @type {number}\n   */\n  var MAX_CACHE_SIZE = 1024;\n  /**\n   * @type {Object<string, Color>}\n   */\n\n  var cache = {};\n  /**\n   * @type {number}\n   */\n\n  var cacheSize = 0;\n  return (\n    /**\n     * @param {string} s String.\n     * @return {Color} Color.\n     */\n    function (s) {\n      var color;\n\n      if (cache.hasOwnProperty(s)) {\n        color = cache[s];\n      } else {\n        if (cacheSize >= MAX_CACHE_SIZE) {\n          var i = 0;\n\n          for (var key in cache) {\n            if ((i++ & 3) === 0) {\n              delete cache[key];\n              --cacheSize;\n            }\n          }\n        }\n\n        color = fromStringInternal_(s);\n        cache[s] = color;\n        ++cacheSize;\n      }\n\n      return color;\n    }\n  );\n}();\n/**\n * Return the color as an array. This function maintains a cache of calculated\n * arrays which means the result should not be modified.\n * @param {Color|string} color Color.\n * @return {Color} Color.\n * @api\n */\n\nexport function asArray(color) {\n  if (Array.isArray(color)) {\n    return color;\n  } else {\n    return fromString(color);\n  }\n}\n/**\n * @param {string} s String.\n * @private\n * @return {Color} Color.\n */\n\nfunction fromStringInternal_(s) {\n  var r, g, b, a, color;\n\n  if (NAMED_COLOR_RE_.exec(s)) {\n    s = fromNamed(s);\n  }\n\n  if (HEX_COLOR_RE_.exec(s)) {\n    // hex\n    var n = s.length - 1; // number of hex digits\n\n    var d = // number of digits per channel\n    void 0; // number of digits per channel\n\n    if (n <= 4) {\n      d = 1;\n    } else {\n      d = 2;\n    }\n\n    var hasAlpha = n === 4 || n === 8;\n    r = parseInt(s.substr(1 + 0 * d, d), 16);\n    g = parseInt(s.substr(1 + 1 * d, d), 16);\n    b = parseInt(s.substr(1 + 2 * d, d), 16);\n\n    if (hasAlpha) {\n      a = parseInt(s.substr(1 + 3 * d, d), 16);\n    } else {\n      a = 255;\n    }\n\n    if (d == 1) {\n      r = (r << 4) + r;\n      g = (g << 4) + g;\n      b = (b << 4) + b;\n\n      if (hasAlpha) {\n        a = (a << 4) + a;\n      }\n    }\n\n    color = [r, g, b, a / 255];\n  } else if (s.indexOf('rgba(') == 0) {\n    // rgba()\n    color = s.slice(5, -1).split(',').map(Number);\n    normalize(color);\n  } else if (s.indexOf('rgb(') == 0) {\n    // rgb()\n    color = s.slice(4, -1).split(',').map(Number);\n    color.push(1);\n    normalize(color);\n  } else {\n    assert(false, 14); // Invalid color\n  }\n\n  return color;\n}\n/**\n * TODO this function is only used in the test, we probably shouldn't export it\n * @param {Color} color Color.\n * @return {Color} Clamped color.\n */\n\n\nexport function normalize(color) {\n  color[0] = clamp(color[0] + 0.5 | 0, 0, 255);\n  color[1] = clamp(color[1] + 0.5 | 0, 0, 255);\n  color[2] = clamp(color[2] + 0.5 | 0, 0, 255);\n  color[3] = clamp(color[3], 0, 1);\n  return color;\n}\n/**\n * @param {Color} color Color.\n * @return {string} String.\n */\n\nexport function toString(color) {\n  var r = color[0];\n\n  if (r != (r | 0)) {\n    r = r + 0.5 | 0;\n  }\n\n  var g = color[1];\n\n  if (g != (g | 0)) {\n    g = g + 0.5 | 0;\n  }\n\n  var b = color[2];\n\n  if (b != (b | 0)) {\n    b = b + 0.5 | 0;\n  }\n\n  var a = color[3] === undefined ? 1 : Math.round(color[3] * 100) / 100;\n  return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n}\n/**\n * @param {string} s String.\n * @return {boolean} Whether the string is actually a valid color\n */\n\nexport function isStringColor(s) {\n  if (NAMED_COLOR_RE_.test(s)) {\n    s = fromNamed(s);\n  }\n\n  return HEX_COLOR_RE_.test(s) || s.indexOf('rgba(') === 0 || s.indexOf('rgb(') === 0;\n}","map":{"version":3,"names":["assert","clamp","HEX_COLOR_RE_","NAMED_COLOR_RE_","asString","color","toString","fromNamed","el","document","createElement","style","body","appendChild","rgb","getComputedStyle","removeChild","fromString","MAX_CACHE_SIZE","cache","cacheSize","s","hasOwnProperty","i","key","fromStringInternal_","asArray","Array","isArray","r","g","b","a","exec","n","length","d","hasAlpha","parseInt","substr","indexOf","slice","split","map","Number","normalize","push","undefined","Math","round","isStringColor","test"],"sources":["/home/asura/github/smartcity/source/node_modules/ol/color.js"],"sourcesContent":["/**\n * @module ol/color\n */\nimport { assert } from './asserts.js';\nimport { clamp } from './math.js';\n/**\n * A color represented as a short array [red, green, blue, alpha].\n * red, green, and blue should be integers in the range 0..255 inclusive.\n * alpha should be a float in the range 0..1 inclusive. If no alpha value is\n * given then `1` will be used.\n * @typedef {Array<number>} Color\n * @api\n */\n/**\n * This RegExp matches # followed by 3, 4, 6, or 8 hex digits.\n * @const\n * @type {RegExp}\n * @private\n */\nvar HEX_COLOR_RE_ = /^#([a-f0-9]{3}|[a-f0-9]{4}(?:[a-f0-9]{2}){0,2})$/i;\n/**\n * Regular expression for matching potential named color style strings.\n * @const\n * @type {RegExp}\n * @private\n */\nvar NAMED_COLOR_RE_ = /^([a-z]*)$|^hsla?\\(.*\\)$/i;\n/**\n * Return the color as an rgba string.\n * @param {Color|string} color Color.\n * @return {string} Rgba string.\n * @api\n */\nexport function asString(color) {\n    if (typeof color === 'string') {\n        return color;\n    }\n    else {\n        return toString(color);\n    }\n}\n/**\n * Return named color as an rgba string.\n * @param {string} color Named color.\n * @return {string} Rgb string.\n */\nfunction fromNamed(color) {\n    var el = document.createElement('div');\n    el.style.color = color;\n    if (el.style.color !== '') {\n        document.body.appendChild(el);\n        var rgb = getComputedStyle(el).color;\n        document.body.removeChild(el);\n        return rgb;\n    }\n    else {\n        return '';\n    }\n}\n/**\n * @param {string} s String.\n * @return {Color} Color.\n */\nexport var fromString = (function () {\n    // We maintain a small cache of parsed strings.  To provide cheap LRU-like\n    // semantics, whenever the cache grows too large we simply delete an\n    // arbitrary 25% of the entries.\n    /**\n     * @const\n     * @type {number}\n     */\n    var MAX_CACHE_SIZE = 1024;\n    /**\n     * @type {Object<string, Color>}\n     */\n    var cache = {};\n    /**\n     * @type {number}\n     */\n    var cacheSize = 0;\n    return (\n    /**\n     * @param {string} s String.\n     * @return {Color} Color.\n     */\n    function (s) {\n        var color;\n        if (cache.hasOwnProperty(s)) {\n            color = cache[s];\n        }\n        else {\n            if (cacheSize >= MAX_CACHE_SIZE) {\n                var i = 0;\n                for (var key in cache) {\n                    if ((i++ & 3) === 0) {\n                        delete cache[key];\n                        --cacheSize;\n                    }\n                }\n            }\n            color = fromStringInternal_(s);\n            cache[s] = color;\n            ++cacheSize;\n        }\n        return color;\n    });\n})();\n/**\n * Return the color as an array. This function maintains a cache of calculated\n * arrays which means the result should not be modified.\n * @param {Color|string} color Color.\n * @return {Color} Color.\n * @api\n */\nexport function asArray(color) {\n    if (Array.isArray(color)) {\n        return color;\n    }\n    else {\n        return fromString(color);\n    }\n}\n/**\n * @param {string} s String.\n * @private\n * @return {Color} Color.\n */\nfunction fromStringInternal_(s) {\n    var r, g, b, a, color;\n    if (NAMED_COLOR_RE_.exec(s)) {\n        s = fromNamed(s);\n    }\n    if (HEX_COLOR_RE_.exec(s)) {\n        // hex\n        var n = s.length - 1; // number of hex digits\n        var d = // number of digits per channel\n         void 0; // number of digits per channel\n        if (n <= 4) {\n            d = 1;\n        }\n        else {\n            d = 2;\n        }\n        var hasAlpha = n === 4 || n === 8;\n        r = parseInt(s.substr(1 + 0 * d, d), 16);\n        g = parseInt(s.substr(1 + 1 * d, d), 16);\n        b = parseInt(s.substr(1 + 2 * d, d), 16);\n        if (hasAlpha) {\n            a = parseInt(s.substr(1 + 3 * d, d), 16);\n        }\n        else {\n            a = 255;\n        }\n        if (d == 1) {\n            r = (r << 4) + r;\n            g = (g << 4) + g;\n            b = (b << 4) + b;\n            if (hasAlpha) {\n                a = (a << 4) + a;\n            }\n        }\n        color = [r, g, b, a / 255];\n    }\n    else if (s.indexOf('rgba(') == 0) {\n        // rgba()\n        color = s.slice(5, -1).split(',').map(Number);\n        normalize(color);\n    }\n    else if (s.indexOf('rgb(') == 0) {\n        // rgb()\n        color = s.slice(4, -1).split(',').map(Number);\n        color.push(1);\n        normalize(color);\n    }\n    else {\n        assert(false, 14); // Invalid color\n    }\n    return color;\n}\n/**\n * TODO this function is only used in the test, we probably shouldn't export it\n * @param {Color} color Color.\n * @return {Color} Clamped color.\n */\nexport function normalize(color) {\n    color[0] = clamp((color[0] + 0.5) | 0, 0, 255);\n    color[1] = clamp((color[1] + 0.5) | 0, 0, 255);\n    color[2] = clamp((color[2] + 0.5) | 0, 0, 255);\n    color[3] = clamp(color[3], 0, 1);\n    return color;\n}\n/**\n * @param {Color} color Color.\n * @return {string} String.\n */\nexport function toString(color) {\n    var r = color[0];\n    if (r != (r | 0)) {\n        r = (r + 0.5) | 0;\n    }\n    var g = color[1];\n    if (g != (g | 0)) {\n        g = (g + 0.5) | 0;\n    }\n    var b = color[2];\n    if (b != (b | 0)) {\n        b = (b + 0.5) | 0;\n    }\n    var a = color[3] === undefined ? 1 : Math.round(color[3] * 100) / 100;\n    return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n}\n/**\n * @param {string} s String.\n * @return {boolean} Whether the string is actually a valid color\n */\nexport function isStringColor(s) {\n    if (NAMED_COLOR_RE_.test(s)) {\n        s = fromNamed(s);\n    }\n    return (HEX_COLOR_RE_.test(s) || s.indexOf('rgba(') === 0 || s.indexOf('rgb(') === 0);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}