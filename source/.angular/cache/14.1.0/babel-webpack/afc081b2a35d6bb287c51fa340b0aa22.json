{"ast":null,"code":"/**\n * @module ol/size\n */\n\n/**\n * An array of numbers representing a size: `[width, height]`.\n * @typedef {Array<number>} Size\n * @api\n */\n\n/**\n * Returns a buffered size.\n * @param {Size} size Size.\n * @param {number} num The amount by which to buffer.\n * @param {Size} [opt_size] Optional reusable size array.\n * @return {Size} The buffered size.\n */\nexport function buffer(size, num, opt_size) {\n  if (opt_size === undefined) {\n    opt_size = [0, 0];\n  }\n\n  opt_size[0] = size[0] + 2 * num;\n  opt_size[1] = size[1] + 2 * num;\n  return opt_size;\n}\n/**\n * Determines if a size has a positive area.\n * @param {Size} size The size to test.\n * @return {boolean} The size has a positive area.\n */\n\nexport function hasArea(size) {\n  return size[0] > 0 && size[1] > 0;\n}\n/**\n * Returns a size scaled by a ratio. The result will be an array of integers.\n * @param {Size} size Size.\n * @param {number} ratio Ratio.\n * @param {Size} [opt_size] Optional reusable size array.\n * @return {Size} The scaled size.\n */\n\nexport function scale(size, ratio, opt_size) {\n  if (opt_size === undefined) {\n    opt_size = [0, 0];\n  }\n\n  opt_size[0] = size[0] * ratio + 0.5 | 0;\n  opt_size[1] = size[1] * ratio + 0.5 | 0;\n  return opt_size;\n}\n/**\n * Returns an `Size` array for the passed in number (meaning: square) or\n * `Size` array.\n * (meaning: non-square),\n * @param {number|Size} size Width and height.\n * @param {Size} [opt_size] Optional reusable size array.\n * @return {Size} Size.\n * @api\n */\n\nexport function toSize(size, opt_size) {\n  if (Array.isArray(size)) {\n    return size;\n  } else {\n    if (opt_size === undefined) {\n      opt_size = [size, size];\n    } else {\n      opt_size[0] = size;\n      opt_size[1] = size;\n    }\n\n    return opt_size;\n  }\n}","map":{"version":3,"names":["buffer","size","num","opt_size","undefined","hasArea","scale","ratio","toSize","Array","isArray"],"sources":["/home/asura/github/smartcity/source/node_modules/ol/size.js"],"sourcesContent":["/**\n * @module ol/size\n */\n/**\n * An array of numbers representing a size: `[width, height]`.\n * @typedef {Array<number>} Size\n * @api\n */\n/**\n * Returns a buffered size.\n * @param {Size} size Size.\n * @param {number} num The amount by which to buffer.\n * @param {Size} [opt_size] Optional reusable size array.\n * @return {Size} The buffered size.\n */\nexport function buffer(size, num, opt_size) {\n    if (opt_size === undefined) {\n        opt_size = [0, 0];\n    }\n    opt_size[0] = size[0] + 2 * num;\n    opt_size[1] = size[1] + 2 * num;\n    return opt_size;\n}\n/**\n * Determines if a size has a positive area.\n * @param {Size} size The size to test.\n * @return {boolean} The size has a positive area.\n */\nexport function hasArea(size) {\n    return size[0] > 0 && size[1] > 0;\n}\n/**\n * Returns a size scaled by a ratio. The result will be an array of integers.\n * @param {Size} size Size.\n * @param {number} ratio Ratio.\n * @param {Size} [opt_size] Optional reusable size array.\n * @return {Size} The scaled size.\n */\nexport function scale(size, ratio, opt_size) {\n    if (opt_size === undefined) {\n        opt_size = [0, 0];\n    }\n    opt_size[0] = (size[0] * ratio + 0.5) | 0;\n    opt_size[1] = (size[1] * ratio + 0.5) | 0;\n    return opt_size;\n}\n/**\n * Returns an `Size` array for the passed in number (meaning: square) or\n * `Size` array.\n * (meaning: non-square),\n * @param {number|Size} size Width and height.\n * @param {Size} [opt_size] Optional reusable size array.\n * @return {Size} Size.\n * @api\n */\nexport function toSize(size, opt_size) {\n    if (Array.isArray(size)) {\n        return size;\n    }\n    else {\n        if (opt_size === undefined) {\n            opt_size = [size, size];\n        }\n        else {\n            opt_size[0] = size;\n            opt_size[1] = size;\n        }\n        return opt_size;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,MAAT,CAAgBC,IAAhB,EAAsBC,GAAtB,EAA2BC,QAA3B,EAAqC;EACxC,IAAIA,QAAQ,KAAKC,SAAjB,EAA4B;IACxBD,QAAQ,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAX;EACH;;EACDA,QAAQ,CAAC,CAAD,CAAR,GAAcF,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAIC,GAA5B;EACAC,QAAQ,CAAC,CAAD,CAAR,GAAcF,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAIC,GAA5B;EACA,OAAOC,QAAP;AACH;AACD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,OAAT,CAAiBJ,IAAjB,EAAuB;EAC1B,OAAOA,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAV,IAAeA,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAhC;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASK,KAAT,CAAeL,IAAf,EAAqBM,KAArB,EAA4BJ,QAA5B,EAAsC;EACzC,IAAIA,QAAQ,KAAKC,SAAjB,EAA4B;IACxBD,QAAQ,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAX;EACH;;EACDA,QAAQ,CAAC,CAAD,CAAR,GAAeF,IAAI,CAAC,CAAD,CAAJ,GAAUM,KAAV,GAAkB,GAAnB,GAA0B,CAAxC;EACAJ,QAAQ,CAAC,CAAD,CAAR,GAAeF,IAAI,CAAC,CAAD,CAAJ,GAAUM,KAAV,GAAkB,GAAnB,GAA0B,CAAxC;EACA,OAAOJ,QAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASK,MAAT,CAAgBP,IAAhB,EAAsBE,QAAtB,EAAgC;EACnC,IAAIM,KAAK,CAACC,OAAN,CAAcT,IAAd,CAAJ,EAAyB;IACrB,OAAOA,IAAP;EACH,CAFD,MAGK;IACD,IAAIE,QAAQ,KAAKC,SAAjB,EAA4B;MACxBD,QAAQ,GAAG,CAACF,IAAD,EAAOA,IAAP,CAAX;IACH,CAFD,MAGK;MACDE,QAAQ,CAAC,CAAD,CAAR,GAAcF,IAAd;MACAE,QAAQ,CAAC,CAAD,CAAR,GAAcF,IAAd;IACH;;IACD,OAAOE,QAAP;EACH;AACJ"},"metadata":{},"sourceType":"module"}