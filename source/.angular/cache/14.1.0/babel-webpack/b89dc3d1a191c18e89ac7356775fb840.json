{"ast":null,"code":"/**\n * @module ol/render/canvas/hitdetect\n */\nimport CanvasImmediateRenderer from './Immediate.js';\nimport IconAnchorUnits from '../../style/IconAnchorUnits.js';\nimport { Icon } from '../../style.js';\nimport { clamp } from '../../math.js';\nimport { createCanvasContext2D } from '../../dom.js';\nimport { intersects } from '../../extent.js';\nimport { numberSafeCompareFunction } from '../../array.js';\nexport var HIT_DETECT_RESOLUTION = 0.5;\n/**\n * @param {import(\"../../size.js\").Size} size Canvas size in css pixels.\n * @param {Array<import(\"../../transform.js\").Transform>} transforms Transforms\n * for rendering features to all worlds of the viewport, from coordinates to css\n * pixels.\n * @param {Array<import(\"../../Feature.js\").FeatureLike>} features\n * Features to consider for hit detection.\n * @param {import(\"../../style/Style.js\").StyleFunction|undefined} styleFunction\n * Layer style function.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @return {ImageData} Hit detection image data.\n */\n\nexport function createHitDetectionImageData(size, transforms, features, styleFunction, extent, resolution, rotation) {\n  var width = size[0] * HIT_DETECT_RESOLUTION;\n  var height = size[1] * HIT_DETECT_RESOLUTION;\n  var context = createCanvasContext2D(width, height);\n  context.imageSmoothingEnabled = false;\n  var canvas = context.canvas;\n  var renderer = new CanvasImmediateRenderer(context, HIT_DETECT_RESOLUTION, extent, null, rotation);\n  var featureCount = features.length; // Stretch hit detection index to use the whole available color range\n\n  var indexFactor = Math.floor((256 * 256 * 256 - 1) / featureCount);\n  var featuresByZIndex = {};\n\n  for (var i = 1; i <= featureCount; ++i) {\n    var feature = features[i - 1];\n    var featureStyleFunction = feature.getStyleFunction() || styleFunction;\n\n    if (!styleFunction) {\n      continue;\n    }\n\n    var styles = featureStyleFunction(feature, resolution);\n\n    if (!styles) {\n      continue;\n    }\n\n    if (!Array.isArray(styles)) {\n      styles = [styles];\n    }\n\n    var index = i * indexFactor;\n    var color = '#' + ('000000' + index.toString(16)).slice(-6);\n\n    for (var j = 0, jj = styles.length; j < jj; ++j) {\n      var originalStyle = styles[j];\n      var geometry = originalStyle.getGeometryFunction()(feature);\n\n      if (!geometry || !intersects(extent, geometry.getExtent())) {\n        continue;\n      }\n\n      var style = originalStyle.clone();\n      var fill = style.getFill();\n\n      if (fill) {\n        fill.setColor(color);\n      }\n\n      var stroke = style.getStroke();\n\n      if (stroke) {\n        stroke.setColor(color);\n        stroke.setLineDash(null);\n      }\n\n      style.setText(undefined);\n      var image = originalStyle.getImage();\n\n      if (image && image.getOpacity() !== 0) {\n        var imgSize = image.getImageSize();\n\n        if (!imgSize) {\n          continue;\n        }\n\n        var imgContext = createCanvasContext2D(imgSize[0], imgSize[1], undefined, {\n          alpha: false\n        });\n        var img = imgContext.canvas;\n        imgContext.fillStyle = color;\n        imgContext.fillRect(0, 0, img.width, img.height);\n        style.setImage(new Icon({\n          img: img,\n          imgSize: imgSize,\n          anchor: image.getAnchor(),\n          anchorXUnits: IconAnchorUnits.PIXELS,\n          anchorYUnits: IconAnchorUnits.PIXELS,\n          offset: image.getOrigin(),\n          opacity: 1,\n          size: image.getSize(),\n          scale: image.getScale(),\n          rotation: image.getRotation(),\n          rotateWithView: image.getRotateWithView()\n        }));\n      }\n\n      var zIndex = style.getZIndex() || 0;\n      var byGeometryType = featuresByZIndex[zIndex];\n\n      if (!byGeometryType) {\n        byGeometryType = {};\n        featuresByZIndex[zIndex] = byGeometryType;\n        byGeometryType['Polygon'] = [];\n        byGeometryType['Circle'] = [];\n        byGeometryType['LineString'] = [];\n        byGeometryType['Point'] = [];\n      }\n\n      byGeometryType[geometry.getType().replace('Multi', '')].push(geometry, style);\n    }\n  }\n\n  var zIndexKeys = Object.keys(featuresByZIndex).map(Number).sort(numberSafeCompareFunction);\n\n  for (var i = 0, ii = zIndexKeys.length; i < ii; ++i) {\n    var byGeometryType = featuresByZIndex[zIndexKeys[i]];\n\n    for (var type in byGeometryType) {\n      var geomAndStyle = byGeometryType[type];\n\n      for (var j = 0, jj = geomAndStyle.length; j < jj; j += 2) {\n        renderer.setStyle(geomAndStyle[j + 1]);\n\n        for (var k = 0, kk = transforms.length; k < kk; ++k) {\n          renderer.setTransform(transforms[k]);\n          renderer.drawGeometry(geomAndStyle[j]);\n        }\n      }\n    }\n  }\n\n  return context.getImageData(0, 0, canvas.width, canvas.height);\n}\n/**\n * @param {import(\"../../pixel\").Pixel} pixel Pixel coordinate on the hit\n * detection canvas in css pixels.\n * @param {Array<import(\"../../Feature\").FeatureLike>} features Features. Has to\n * match the `features` array that was passed to `createHitDetectionImageData()`.\n * @param {ImageData} imageData Hit detection image data generated by\n * `createHitDetectionImageData()`.\n * @return {Array<import(\"../../Feature\").FeatureLike>} features Features.\n */\n\nexport function hitDetect(pixel, features, imageData) {\n  var resultFeatures = [];\n\n  if (imageData) {\n    var x = Math.floor(Math.round(pixel[0]) * HIT_DETECT_RESOLUTION);\n    var y = Math.floor(Math.round(pixel[1]) * HIT_DETECT_RESOLUTION); // The pixel coordinate is clamped down to the hit-detect canvas' size to account\n    // for browsers returning coordinates slightly larger than the actual canvas size\n    // due to a non-integer pixel ratio.\n\n    var index = (clamp(x, 0, imageData.width - 1) + clamp(y, 0, imageData.height - 1) * imageData.width) * 4;\n    var r = imageData.data[index];\n    var g = imageData.data[index + 1];\n    var b = imageData.data[index + 2];\n    var i = b + 256 * (g + 256 * r);\n    var indexFactor = Math.floor((256 * 256 * 256 - 1) / features.length);\n\n    if (i && i % indexFactor === 0) {\n      resultFeatures.push(features[i / indexFactor - 1]);\n    }\n  }\n\n  return resultFeatures;\n}","map":{"version":3,"names":["CanvasImmediateRenderer","IconAnchorUnits","Icon","clamp","createCanvasContext2D","intersects","numberSafeCompareFunction","HIT_DETECT_RESOLUTION","createHitDetectionImageData","size","transforms","features","styleFunction","extent","resolution","rotation","width","height","context","imageSmoothingEnabled","canvas","renderer","featureCount","length","indexFactor","Math","floor","featuresByZIndex","i","feature","featureStyleFunction","getStyleFunction","styles","Array","isArray","index","color","toString","slice","j","jj","originalStyle","geometry","getGeometryFunction","getExtent","style","clone","fill","getFill","setColor","stroke","getStroke","setLineDash","setText","undefined","image","getImage","getOpacity","imgSize","getImageSize","imgContext","alpha","img","fillStyle","fillRect","setImage","anchor","getAnchor","anchorXUnits","PIXELS","anchorYUnits","offset","getOrigin","opacity","getSize","scale","getScale","getRotation","rotateWithView","getRotateWithView","zIndex","getZIndex","byGeometryType","getType","replace","push","zIndexKeys","Object","keys","map","Number","sort","ii","type","geomAndStyle","setStyle","k","kk","setTransform","drawGeometry","getImageData","hitDetect","pixel","imageData","resultFeatures","x","round","y","r","data","g","b"],"sources":["/home/asura/github/smartcity/source/node_modules/ol/render/canvas/hitdetect.js"],"sourcesContent":["/**\n * @module ol/render/canvas/hitdetect\n */\nimport CanvasImmediateRenderer from './Immediate.js';\nimport IconAnchorUnits from '../../style/IconAnchorUnits.js';\nimport { Icon } from '../../style.js';\nimport { clamp } from '../../math.js';\nimport { createCanvasContext2D } from '../../dom.js';\nimport { intersects } from '../../extent.js';\nimport { numberSafeCompareFunction } from '../../array.js';\nexport var HIT_DETECT_RESOLUTION = 0.5;\n/**\n * @param {import(\"../../size.js\").Size} size Canvas size in css pixels.\n * @param {Array<import(\"../../transform.js\").Transform>} transforms Transforms\n * for rendering features to all worlds of the viewport, from coordinates to css\n * pixels.\n * @param {Array<import(\"../../Feature.js\").FeatureLike>} features\n * Features to consider for hit detection.\n * @param {import(\"../../style/Style.js\").StyleFunction|undefined} styleFunction\n * Layer style function.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @return {ImageData} Hit detection image data.\n */\nexport function createHitDetectionImageData(size, transforms, features, styleFunction, extent, resolution, rotation) {\n    var width = size[0] * HIT_DETECT_RESOLUTION;\n    var height = size[1] * HIT_DETECT_RESOLUTION;\n    var context = createCanvasContext2D(width, height);\n    context.imageSmoothingEnabled = false;\n    var canvas = context.canvas;\n    var renderer = new CanvasImmediateRenderer(context, HIT_DETECT_RESOLUTION, extent, null, rotation);\n    var featureCount = features.length;\n    // Stretch hit detection index to use the whole available color range\n    var indexFactor = Math.floor((256 * 256 * 256 - 1) / featureCount);\n    var featuresByZIndex = {};\n    for (var i = 1; i <= featureCount; ++i) {\n        var feature = features[i - 1];\n        var featureStyleFunction = feature.getStyleFunction() || styleFunction;\n        if (!styleFunction) {\n            continue;\n        }\n        var styles = featureStyleFunction(feature, resolution);\n        if (!styles) {\n            continue;\n        }\n        if (!Array.isArray(styles)) {\n            styles = [styles];\n        }\n        var index = i * indexFactor;\n        var color = '#' + ('000000' + index.toString(16)).slice(-6);\n        for (var j = 0, jj = styles.length; j < jj; ++j) {\n            var originalStyle = styles[j];\n            var geometry = originalStyle.getGeometryFunction()(feature);\n            if (!geometry || !intersects(extent, geometry.getExtent())) {\n                continue;\n            }\n            var style = originalStyle.clone();\n            var fill = style.getFill();\n            if (fill) {\n                fill.setColor(color);\n            }\n            var stroke = style.getStroke();\n            if (stroke) {\n                stroke.setColor(color);\n                stroke.setLineDash(null);\n            }\n            style.setText(undefined);\n            var image = originalStyle.getImage();\n            if (image && image.getOpacity() !== 0) {\n                var imgSize = image.getImageSize();\n                if (!imgSize) {\n                    continue;\n                }\n                var imgContext = createCanvasContext2D(imgSize[0], imgSize[1], undefined, { alpha: false });\n                var img = imgContext.canvas;\n                imgContext.fillStyle = color;\n                imgContext.fillRect(0, 0, img.width, img.height);\n                style.setImage(new Icon({\n                    img: img,\n                    imgSize: imgSize,\n                    anchor: image.getAnchor(),\n                    anchorXUnits: IconAnchorUnits.PIXELS,\n                    anchorYUnits: IconAnchorUnits.PIXELS,\n                    offset: image.getOrigin(),\n                    opacity: 1,\n                    size: image.getSize(),\n                    scale: image.getScale(),\n                    rotation: image.getRotation(),\n                    rotateWithView: image.getRotateWithView(),\n                }));\n            }\n            var zIndex = style.getZIndex() || 0;\n            var byGeometryType = featuresByZIndex[zIndex];\n            if (!byGeometryType) {\n                byGeometryType = {};\n                featuresByZIndex[zIndex] = byGeometryType;\n                byGeometryType['Polygon'] = [];\n                byGeometryType['Circle'] = [];\n                byGeometryType['LineString'] = [];\n                byGeometryType['Point'] = [];\n            }\n            byGeometryType[geometry.getType().replace('Multi', '')].push(geometry, style);\n        }\n    }\n    var zIndexKeys = Object.keys(featuresByZIndex)\n        .map(Number)\n        .sort(numberSafeCompareFunction);\n    for (var i = 0, ii = zIndexKeys.length; i < ii; ++i) {\n        var byGeometryType = featuresByZIndex[zIndexKeys[i]];\n        for (var type in byGeometryType) {\n            var geomAndStyle = byGeometryType[type];\n            for (var j = 0, jj = geomAndStyle.length; j < jj; j += 2) {\n                renderer.setStyle(geomAndStyle[j + 1]);\n                for (var k = 0, kk = transforms.length; k < kk; ++k) {\n                    renderer.setTransform(transforms[k]);\n                    renderer.drawGeometry(geomAndStyle[j]);\n                }\n            }\n        }\n    }\n    return context.getImageData(0, 0, canvas.width, canvas.height);\n}\n/**\n * @param {import(\"../../pixel\").Pixel} pixel Pixel coordinate on the hit\n * detection canvas in css pixels.\n * @param {Array<import(\"../../Feature\").FeatureLike>} features Features. Has to\n * match the `features` array that was passed to `createHitDetectionImageData()`.\n * @param {ImageData} imageData Hit detection image data generated by\n * `createHitDetectionImageData()`.\n * @return {Array<import(\"../../Feature\").FeatureLike>} features Features.\n */\nexport function hitDetect(pixel, features, imageData) {\n    var resultFeatures = [];\n    if (imageData) {\n        var x = Math.floor(Math.round(pixel[0]) * HIT_DETECT_RESOLUTION);\n        var y = Math.floor(Math.round(pixel[1]) * HIT_DETECT_RESOLUTION);\n        // The pixel coordinate is clamped down to the hit-detect canvas' size to account\n        // for browsers returning coordinates slightly larger than the actual canvas size\n        // due to a non-integer pixel ratio.\n        var index = (clamp(x, 0, imageData.width - 1) +\n            clamp(y, 0, imageData.height - 1) * imageData.width) *\n            4;\n        var r = imageData.data[index];\n        var g = imageData.data[index + 1];\n        var b = imageData.data[index + 2];\n        var i = b + 256 * (g + 256 * r);\n        var indexFactor = Math.floor((256 * 256 * 256 - 1) / features.length);\n        if (i && i % indexFactor === 0) {\n            resultFeatures.push(features[i / indexFactor - 1]);\n        }\n    }\n    return resultFeatures;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}