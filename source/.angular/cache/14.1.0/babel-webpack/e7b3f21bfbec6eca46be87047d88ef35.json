{"ast":null,"code":"/**\n * @module ol/structs/RBush\n */\nimport RBush_ from 'rbush';\nimport { createOrUpdate, equals } from '../extent.js';\nimport { getUid } from '../util.js';\nimport { isEmpty } from '../obj.js';\n/**\n * @typedef {Object} Entry\n * @property {number} minX MinX.\n * @property {number} minY MinY.\n * @property {number} maxX MaxX.\n * @property {number} maxY MaxY.\n * @property {Object} [value] Value.\n */\n\n/**\n * @classdesc\n * Wrapper around the RBush by Vladimir Agafonkin.\n * See https://github.com/mourner/rbush.\n *\n * @template T\n */\n\nvar RBush =\n/** @class */\nfunction () {\n  /**\n   * @param {number} [opt_maxEntries] Max entries.\n   */\n  function RBush(opt_maxEntries) {\n    /**\n     * @private\n     */\n    this.rbush_ = new RBush_(opt_maxEntries);\n    /**\n     * A mapping between the objects added to this rbush wrapper\n     * and the objects that are actually added to the internal rbush.\n     * @private\n     * @type {Object<string, Entry>}\n     */\n\n    this.items_ = {};\n  }\n  /**\n   * Insert a value into the RBush.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {T} value Value.\n   */\n\n\n  RBush.prototype.insert = function (extent, value) {\n    /** @type {Entry} */\n    var item = {\n      minX: extent[0],\n      minY: extent[1],\n      maxX: extent[2],\n      maxY: extent[3],\n      value: value\n    };\n    this.rbush_.insert(item);\n    this.items_[getUid(value)] = item;\n  };\n  /**\n   * Bulk-insert values into the RBush.\n   * @param {Array<import(\"../extent.js\").Extent>} extents Extents.\n   * @param {Array<T>} values Values.\n   */\n\n\n  RBush.prototype.load = function (extents, values) {\n    var items = new Array(values.length);\n\n    for (var i = 0, l = values.length; i < l; i++) {\n      var extent = extents[i];\n      var value = values[i];\n      /** @type {Entry} */\n\n      var item = {\n        minX: extent[0],\n        minY: extent[1],\n        maxX: extent[2],\n        maxY: extent[3],\n        value: value\n      };\n      items[i] = item;\n      this.items_[getUid(value)] = item;\n    }\n\n    this.rbush_.load(items);\n  };\n  /**\n   * Remove a value from the RBush.\n   * @param {T} value Value.\n   * @return {boolean} Removed.\n   */\n\n\n  RBush.prototype.remove = function (value) {\n    var uid = getUid(value); // get the object in which the value was wrapped when adding to the\n    // internal rbush. then use that object to do the removal.\n\n    var item = this.items_[uid];\n    delete this.items_[uid];\n    return this.rbush_.remove(item) !== null;\n  };\n  /**\n   * Update the extent of a value in the RBush.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {T} value Value.\n   */\n\n\n  RBush.prototype.update = function (extent, value) {\n    var item = this.items_[getUid(value)];\n    var bbox = [item.minX, item.minY, item.maxX, item.maxY];\n\n    if (!equals(bbox, extent)) {\n      this.remove(value);\n      this.insert(extent, value);\n    }\n  };\n  /**\n   * Return all values in the RBush.\n   * @return {Array<T>} All.\n   */\n\n\n  RBush.prototype.getAll = function () {\n    var items = this.rbush_.all();\n    return items.map(function (item) {\n      return item.value;\n    });\n  };\n  /**\n   * Return all values in the given extent.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {Array<T>} All in extent.\n   */\n\n\n  RBush.prototype.getInExtent = function (extent) {\n    /** @type {Entry} */\n    var bbox = {\n      minX: extent[0],\n      minY: extent[1],\n      maxX: extent[2],\n      maxY: extent[3]\n    };\n    var items = this.rbush_.search(bbox);\n    return items.map(function (item) {\n      return item.value;\n    });\n  };\n  /**\n   * Calls a callback function with each value in the tree.\n   * If the callback returns a truthy value, this value is returned without\n   * checking the rest of the tree.\n   * @param {function(T): *} callback Callback.\n   * @return {*} Callback return value.\n   */\n\n\n  RBush.prototype.forEach = function (callback) {\n    return this.forEach_(this.getAll(), callback);\n  };\n  /**\n   * Calls a callback function with each value in the provided extent.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(T): *} callback Callback.\n   * @return {*} Callback return value.\n   */\n\n\n  RBush.prototype.forEachInExtent = function (extent, callback) {\n    return this.forEach_(this.getInExtent(extent), callback);\n  };\n  /**\n   * @param {Array<T>} values Values.\n   * @param {function(T): *} callback Callback.\n   * @private\n   * @return {*} Callback return value.\n   */\n\n\n  RBush.prototype.forEach_ = function (values, callback) {\n    var result;\n\n    for (var i = 0, l = values.length; i < l; i++) {\n      result = callback(values[i]);\n\n      if (result) {\n        return result;\n      }\n    }\n\n    return result;\n  };\n  /**\n   * @return {boolean} Is empty.\n   */\n\n\n  RBush.prototype.isEmpty = function () {\n    return isEmpty(this.items_);\n  };\n  /**\n   * Remove all values from the RBush.\n   */\n\n\n  RBush.prototype.clear = function () {\n    this.rbush_.clear();\n    this.items_ = {};\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Extent.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   */\n\n\n  RBush.prototype.getExtent = function (opt_extent) {\n    var data = this.rbush_.toJSON();\n    return createOrUpdate(data.minX, data.minY, data.maxX, data.maxY, opt_extent);\n  };\n  /**\n   * @param {RBush} rbush R-Tree.\n   */\n\n\n  RBush.prototype.concat = function (rbush) {\n    this.rbush_.load(rbush.rbush_.all());\n\n    for (var i in rbush.items_) {\n      this.items_[i] = rbush.items_[i];\n    }\n  };\n\n  return RBush;\n}();\n\nexport default RBush;","map":{"version":3,"names":["RBush_","createOrUpdate","equals","getUid","isEmpty","RBush","opt_maxEntries","rbush_","items_","prototype","insert","extent","value","item","minX","minY","maxX","maxY","load","extents","values","items","Array","length","i","l","remove","uid","update","bbox","getAll","all","map","getInExtent","search","forEach","callback","forEach_","forEachInExtent","result","clear","getExtent","opt_extent","data","toJSON","concat","rbush"],"sources":["/home/asura/github/smartcity/source/node_modules/ol/structs/RBush.js"],"sourcesContent":["/**\n * @module ol/structs/RBush\n */\nimport RBush_ from 'rbush';\nimport { createOrUpdate, equals } from '../extent.js';\nimport { getUid } from '../util.js';\nimport { isEmpty } from '../obj.js';\n/**\n * @typedef {Object} Entry\n * @property {number} minX MinX.\n * @property {number} minY MinY.\n * @property {number} maxX MaxX.\n * @property {number} maxY MaxY.\n * @property {Object} [value] Value.\n */\n/**\n * @classdesc\n * Wrapper around the RBush by Vladimir Agafonkin.\n * See https://github.com/mourner/rbush.\n *\n * @template T\n */\nvar RBush = /** @class */ (function () {\n    /**\n     * @param {number} [opt_maxEntries] Max entries.\n     */\n    function RBush(opt_maxEntries) {\n        /**\n         * @private\n         */\n        this.rbush_ = new RBush_(opt_maxEntries);\n        /**\n         * A mapping between the objects added to this rbush wrapper\n         * and the objects that are actually added to the internal rbush.\n         * @private\n         * @type {Object<string, Entry>}\n         */\n        this.items_ = {};\n    }\n    /**\n     * Insert a value into the RBush.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {T} value Value.\n     */\n    RBush.prototype.insert = function (extent, value) {\n        /** @type {Entry} */\n        var item = {\n            minX: extent[0],\n            minY: extent[1],\n            maxX: extent[2],\n            maxY: extent[3],\n            value: value,\n        };\n        this.rbush_.insert(item);\n        this.items_[getUid(value)] = item;\n    };\n    /**\n     * Bulk-insert values into the RBush.\n     * @param {Array<import(\"../extent.js\").Extent>} extents Extents.\n     * @param {Array<T>} values Values.\n     */\n    RBush.prototype.load = function (extents, values) {\n        var items = new Array(values.length);\n        for (var i = 0, l = values.length; i < l; i++) {\n            var extent = extents[i];\n            var value = values[i];\n            /** @type {Entry} */\n            var item = {\n                minX: extent[0],\n                minY: extent[1],\n                maxX: extent[2],\n                maxY: extent[3],\n                value: value,\n            };\n            items[i] = item;\n            this.items_[getUid(value)] = item;\n        }\n        this.rbush_.load(items);\n    };\n    /**\n     * Remove a value from the RBush.\n     * @param {T} value Value.\n     * @return {boolean} Removed.\n     */\n    RBush.prototype.remove = function (value) {\n        var uid = getUid(value);\n        // get the object in which the value was wrapped when adding to the\n        // internal rbush. then use that object to do the removal.\n        var item = this.items_[uid];\n        delete this.items_[uid];\n        return this.rbush_.remove(item) !== null;\n    };\n    /**\n     * Update the extent of a value in the RBush.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {T} value Value.\n     */\n    RBush.prototype.update = function (extent, value) {\n        var item = this.items_[getUid(value)];\n        var bbox = [item.minX, item.minY, item.maxX, item.maxY];\n        if (!equals(bbox, extent)) {\n            this.remove(value);\n            this.insert(extent, value);\n        }\n    };\n    /**\n     * Return all values in the RBush.\n     * @return {Array<T>} All.\n     */\n    RBush.prototype.getAll = function () {\n        var items = this.rbush_.all();\n        return items.map(function (item) {\n            return item.value;\n        });\n    };\n    /**\n     * Return all values in the given extent.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @return {Array<T>} All in extent.\n     */\n    RBush.prototype.getInExtent = function (extent) {\n        /** @type {Entry} */\n        var bbox = {\n            minX: extent[0],\n            minY: extent[1],\n            maxX: extent[2],\n            maxY: extent[3],\n        };\n        var items = this.rbush_.search(bbox);\n        return items.map(function (item) {\n            return item.value;\n        });\n    };\n    /**\n     * Calls a callback function with each value in the tree.\n     * If the callback returns a truthy value, this value is returned without\n     * checking the rest of the tree.\n     * @param {function(T): *} callback Callback.\n     * @return {*} Callback return value.\n     */\n    RBush.prototype.forEach = function (callback) {\n        return this.forEach_(this.getAll(), callback);\n    };\n    /**\n     * Calls a callback function with each value in the provided extent.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {function(T): *} callback Callback.\n     * @return {*} Callback return value.\n     */\n    RBush.prototype.forEachInExtent = function (extent, callback) {\n        return this.forEach_(this.getInExtent(extent), callback);\n    };\n    /**\n     * @param {Array<T>} values Values.\n     * @param {function(T): *} callback Callback.\n     * @private\n     * @return {*} Callback return value.\n     */\n    RBush.prototype.forEach_ = function (values, callback) {\n        var result;\n        for (var i = 0, l = values.length; i < l; i++) {\n            result = callback(values[i]);\n            if (result) {\n                return result;\n            }\n        }\n        return result;\n    };\n    /**\n     * @return {boolean} Is empty.\n     */\n    RBush.prototype.isEmpty = function () {\n        return isEmpty(this.items_);\n    };\n    /**\n     * Remove all values from the RBush.\n     */\n    RBush.prototype.clear = function () {\n        this.rbush_.clear();\n        this.items_ = {};\n    };\n    /**\n     * @param {import(\"../extent.js\").Extent} [opt_extent] Extent.\n     * @return {import(\"../extent.js\").Extent} Extent.\n     */\n    RBush.prototype.getExtent = function (opt_extent) {\n        var data = this.rbush_.toJSON();\n        return createOrUpdate(data.minX, data.minY, data.maxX, data.maxY, opt_extent);\n    };\n    /**\n     * @param {RBush} rbush R-Tree.\n     */\n    RBush.prototype.concat = function (rbush) {\n        this.rbush_.load(rbush.rbush_.all());\n        for (var i in rbush.items_) {\n            this.items_[i] = rbush.items_[i];\n        }\n    };\n    return RBush;\n}());\nexport default RBush;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}