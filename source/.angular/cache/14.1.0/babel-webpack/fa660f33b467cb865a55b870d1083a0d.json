{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/PluggableMap\n */\n\n\nimport BaseObject from './Object.js';\nimport Collection from './Collection.js';\nimport CollectionEventType from './CollectionEventType.js';\nimport EventType from './events/EventType.js';\nimport Layer from './layer/Layer.js';\nimport LayerGroup, { GroupEvent } from './layer/Group.js';\nimport MapBrowserEvent from './MapBrowserEvent.js';\nimport MapBrowserEventHandler from './MapBrowserEventHandler.js';\nimport MapBrowserEventType from './MapBrowserEventType.js';\nimport MapEvent from './MapEvent.js';\nimport MapEventType from './MapEventType.js';\nimport MapProperty from './MapProperty.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport PointerEventType from './pointer/EventType.js';\nimport RenderEventType from './render/EventType.js';\nimport TileQueue, { getTilePriority } from './TileQueue.js';\nimport View from './View.js';\nimport ViewHint from './ViewHint.js';\nimport { DEVICE_PIXEL_RATIO, PASSIVE_EVENT_LISTENERS } from './has.js';\nimport { TRUE } from './functions.js';\nimport { apply as applyTransform, create as createTransform } from './transform.js';\nimport { assert } from './asserts.js';\nimport { clone, createOrUpdateEmpty, equals, getForViewAndSize, isEmpty } from './extent.js';\nimport { fromUserCoordinate, toUserCoordinate } from './proj.js';\nimport { getUid } from './util.js';\nimport { hasArea } from './size.js';\nimport { listen, unlistenByKey } from './events.js';\nimport { removeNode } from './dom.js';\n/**\n * State of the current frame. Only `pixelRatio`, `time` and `viewState` should\n * be used in applications.\n * @typedef {Object} FrameState\n * @property {number} pixelRatio The pixel ratio of the frame.\n * @property {number} time The time when rendering of the frame was requested.\n * @property {import(\"./View.js\").State} viewState The state of the current view.\n * @property {boolean} animate Animate.\n * @property {import(\"./transform.js\").Transform} coordinateToPixelTransform CoordinateToPixelTransform.\n * @property {import(\"rbush\").default} declutterTree DeclutterTree.\n * @property {null|import(\"./extent.js\").Extent} extent Extent.\n * @property {import(\"./extent.js\").Extent} [nextExtent] Next extent during an animation series.\n * @property {number} index Index.\n * @property {Array<import(\"./layer/Layer.js\").State>} layerStatesArray LayerStatesArray.\n * @property {number} layerIndex LayerIndex.\n * @property {import(\"./transform.js\").Transform} pixelToCoordinateTransform PixelToCoordinateTransform.\n * @property {Array<PostRenderFunction>} postRenderFunctions PostRenderFunctions.\n * @property {import(\"./size.js\").Size} size Size.\n * @property {TileQueue} tileQueue TileQueue.\n * @property {!Object<string, Object<string, boolean>>} usedTiles UsedTiles.\n * @property {Array<number>} viewHints ViewHints.\n * @property {!Object<string, Object<string, boolean>>} wantedTiles WantedTiles.\n * @property {string} mapId The id of the map.\n * @property {Object<string, boolean>} renderTargets Identifiers of previously rendered elements.\n */\n\n/**\n * @typedef {function(PluggableMap, ?FrameState): any} PostRenderFunction\n */\n\n/**\n * @typedef {Object} AtPixelOptions\n * @property {undefined|function(import(\"./layer/Layer.js\").default<import(\"./source/Source\").default>): boolean} [layerFilter] Layer filter\n * function. The filter function will receive one argument, the\n * {@link module:ol/layer/Layer~Layer layer-candidate} and it should return a boolean value.\n * Only layers which are visible and for which this function returns `true`\n * will be tested for features. By default, all visible layers will be tested.\n * @property {number} [hitTolerance=0] Hit-detection tolerance in css pixels. Pixels\n * inside the radius around the given position will be checked for features.\n * @property {boolean} [checkWrapped=true] Check-Wrapped Will check for for wrapped geometries inside the range of\n *   +/- 1 world width. Works only if a projection is used that can be wrapped.\n */\n\n/**\n * @typedef {Object} MapOptionsInternal\n * @property {Collection<import(\"./control/Control.js\").default>} [controls] Controls.\n * @property {Collection<import(\"./interaction/Interaction.js\").default>} [interactions] Interactions.\n * @property {HTMLElement|Document} keyboardEventTarget KeyboardEventTarget.\n * @property {Collection<import(\"./Overlay.js\").default>} overlays Overlays.\n * @property {Object<string, *>} values Values.\n */\n\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:layergroup'|'change:size'|'change:target'|'change:view'} MapObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *    import(\"./Observable\").OnSignature<MapObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./MapBrowserEventType\").Types, import(\"./MapBrowserEvent\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./MapEventType\").Types, import(\"./MapEvent\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./render/EventType\").MapRenderEventTypes, import(\"./render/Event\").default, Return> &\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|MapObjectEventTypes|\n *      import(\"./MapBrowserEventType\").Types|import(\"./MapEventType\").Types|\n *      import(\"./render/EventType\").MapRenderEventTypes, Return>} PluggableMapOnSignature\n */\n\n/**\n * Object literal with config options for the map.\n * @typedef {Object} MapOptions\n * @property {Collection<import(\"./control/Control.js\").default>|Array<import(\"./control/Control.js\").default>} [controls]\n * Controls initially added to the map. If not specified,\n * {@link module:ol/control.defaults} is used.\n * @property {number} [pixelRatio=window.devicePixelRatio] The ratio between\n * physical pixels and device-independent pixels (dips) on the device.\n * @property {Collection<import(\"./interaction/Interaction.js\").default>|Array<import(\"./interaction/Interaction.js\").default>} [interactions]\n * Interactions that are initially added to the map. If not specified,\n * {@link module:ol/interaction.defaults} is used.\n * @property {HTMLElement|Document|string} [keyboardEventTarget] The element to\n * listen to keyboard events on. This determines when the `KeyboardPan` and\n * `KeyboardZoom` interactions trigger. For example, if this option is set to\n * `document` the keyboard interactions will always trigger. If this option is\n * not specified, the element the library listens to keyboard events on is the\n * map target (i.e. the user-provided div for the map). If this is not\n * `document`, the target element needs to be focused for key events to be\n * emitted, requiring that the target element has a `tabindex` attribute.\n * @property {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>|LayerGroup} [layers]\n * Layers. If this is not defined, a map with no layers will be rendered. Note\n * that layers are rendered in the order supplied, so if you want, for example,\n * a vector layer to appear on top of a tile layer, it must come after the tile\n * layer.\n * @property {number} [maxTilesLoading=16] Maximum number tiles to load\n * simultaneously.\n * @property {number} [moveTolerance=1] The minimum distance in pixels the\n * cursor must move to be detected as a map move event instead of a click.\n * Increasing this value can make it easier to click on the map.\n * @property {Collection<import(\"./Overlay.js\").default>|Array<import(\"./Overlay.js\").default>} [overlays]\n * Overlays initially added to the map. By default, no overlays are added.\n * @property {HTMLElement|string} [target] The container for the map, either the\n * element itself or the `id` of the element. If not specified at construction\n * time, {@link module:ol/Map~Map#setTarget} must be called for the map to be\n * rendered. If passed by element, the container can be in a secondary document.\n * @property {View|Promise<import(\"./View.js\").ViewOptions>} [view] The map's view.  No layer sources will be\n * fetched unless this is specified at construction time or through\n * {@link module:ol/Map~Map#setView}.\n */\n\n/**\n * @param {import(\"./layer/Base.js\").default} layer Layer.\n */\n\nfunction removeLayerMapProperty(layer) {\n  if (layer instanceof Layer) {\n    layer.setMapInternal(null);\n    return;\n  }\n\n  if (layer instanceof LayerGroup) {\n    layer.getLayers().forEach(removeLayerMapProperty);\n  }\n}\n/**\n * @param {import(\"./layer/Base.js\").default} layer Layer.\n * @param {PluggableMap} map Map.\n */\n\n\nfunction setLayerMapProperty(layer, map) {\n  if (layer instanceof Layer) {\n    layer.setMapInternal(map);\n    return;\n  }\n\n  if (layer instanceof LayerGroup) {\n    var layers = layer.getLayers().getArray();\n\n    for (var i = 0, ii = layers.length; i < ii; ++i) {\n      setLayerMapProperty(layers[i], map);\n    }\n  }\n}\n/**\n * @fires import(\"./MapBrowserEvent.js\").MapBrowserEvent\n * @fires import(\"./MapEvent.js\").MapEvent\n * @fires import(\"./render/Event.js\").default#precompose\n * @fires import(\"./render/Event.js\").default#postcompose\n * @fires import(\"./render/Event.js\").default#rendercomplete\n * @api\n */\n\n\nvar PluggableMap =\n/** @class */\nfunction (_super) {\n  __extends(PluggableMap, _super);\n  /**\n   * @param {MapOptions} options Map options.\n   */\n\n\n  function PluggableMap(options) {\n    var _this = _super.call(this) || this;\n    /***\n     * @type {PluggableMapOnSignature<import(\"./events\").EventsKey>}\n     */\n\n\n    _this.on;\n    /***\n     * @type {PluggableMapOnSignature<import(\"./events\").EventsKey>}\n     */\n\n    _this.once;\n    /***\n     * @type {PluggableMapOnSignature<void>}\n     */\n\n    _this.un;\n    var optionsInternal = createOptionsInternal(options);\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n\n    _this.renderComplete_;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.loaded_ = true;\n    /** @private */\n\n    _this.boundHandleBrowserEvent_ = _this.handleBrowserEvent.bind(_this);\n    /**\n     * @type {number}\n     * @private\n     */\n\n    _this.maxTilesLoading_ = options.maxTilesLoading !== undefined ? options.maxTilesLoading : 16;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.pixelRatio_ = options.pixelRatio !== undefined ? options.pixelRatio : DEVICE_PIXEL_RATIO;\n    /**\n     * @private\n     * @type {*}\n     */\n\n    _this.postRenderTimeoutHandle_;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    _this.animationDelayKey_;\n    /**\n     * @private\n     */\n\n    _this.animationDelay_ =\n    /** @this {PluggableMap} */\n    function () {\n      this.animationDelayKey_ = undefined;\n      this.renderFrame_(Date.now());\n    }.bind(_this);\n    /**\n     * @private\n     * @type {import(\"./transform.js\").Transform}\n     */\n\n\n    _this.coordinateToPixelTransform_ = createTransform();\n    /**\n     * @private\n     * @type {import(\"./transform.js\").Transform}\n     */\n\n    _this.pixelToCoordinateTransform_ = createTransform();\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.frameIndex_ = 0;\n    /**\n     * @private\n     * @type {?FrameState}\n     */\n\n    _this.frameState_ = null;\n    /**\n     * The extent at the previous 'moveend' event.\n     * @private\n     * @type {import(\"./extent.js\").Extent}\n     */\n\n    _this.previousExtent_ = null;\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n\n    _this.viewPropertyListenerKey_ = null;\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n\n    _this.viewChangeListenerKey_ = null;\n    /**\n     * @private\n     * @type {?Array<import(\"./events.js\").EventsKey>}\n     */\n\n    _this.layerGroupPropertyListenerKeys_ = null;\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n\n    _this.viewport_ = document.createElement('div');\n    _this.viewport_.className = 'ol-viewport' + ('ontouchstart' in window ? ' ol-touch' : '');\n    _this.viewport_.style.position = 'relative';\n    _this.viewport_.style.overflow = 'hidden';\n    _this.viewport_.style.width = '100%';\n    _this.viewport_.style.height = '100%';\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n\n    _this.overlayContainer_ = document.createElement('div');\n    _this.overlayContainer_.style.position = 'absolute';\n    _this.overlayContainer_.style.zIndex = '0';\n    _this.overlayContainer_.style.width = '100%';\n    _this.overlayContainer_.style.height = '100%';\n    _this.overlayContainer_.style.pointerEvents = 'none';\n    _this.overlayContainer_.className = 'ol-overlaycontainer';\n\n    _this.viewport_.appendChild(_this.overlayContainer_);\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n\n\n    _this.overlayContainerStopEvent_ = document.createElement('div');\n    _this.overlayContainerStopEvent_.style.position = 'absolute';\n    _this.overlayContainerStopEvent_.style.zIndex = '0';\n    _this.overlayContainerStopEvent_.style.width = '100%';\n    _this.overlayContainerStopEvent_.style.height = '100%';\n    _this.overlayContainerStopEvent_.style.pointerEvents = 'none';\n    _this.overlayContainerStopEvent_.className = 'ol-overlaycontainer-stopevent';\n\n    _this.viewport_.appendChild(_this.overlayContainerStopEvent_);\n    /**\n     * @private\n     * @type {MapBrowserEventHandler}\n     */\n\n\n    _this.mapBrowserEventHandler_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.moveTolerance_ = options.moveTolerance;\n    /**\n     * @private\n     * @type {HTMLElement|Document}\n     */\n\n    _this.keyboardEventTarget_ = optionsInternal.keyboardEventTarget;\n    /**\n     * @private\n     * @type {?Array<import(\"./events.js\").EventsKey>}\n     */\n\n    _this.targetChangeHandlerKeys_ = null;\n    /**\n     * @type {Collection<import(\"./control/Control.js\").default>}\n     * @protected\n     */\n\n    _this.controls = optionsInternal.controls || new Collection();\n    /**\n     * @type {Collection<import(\"./interaction/Interaction.js\").default>}\n     * @protected\n     */\n\n    _this.interactions = optionsInternal.interactions || new Collection();\n    /**\n     * @type {Collection<import(\"./Overlay.js\").default>}\n     * @private\n     */\n\n    _this.overlays_ = optionsInternal.overlays;\n    /**\n     * A lookup of overlays by id.\n     * @private\n     * @type {Object<string, import(\"./Overlay.js\").default>}\n     */\n\n    _this.overlayIdIndex_ = {};\n    /**\n     * @type {import(\"./renderer/Map.js\").default|null}\n     * @private\n     */\n\n    _this.renderer_ = null;\n    /**\n     * @private\n     * @type {!Array<PostRenderFunction>}\n     */\n\n    _this.postRenderFunctions_ = [];\n    /**\n     * @private\n     * @type {TileQueue}\n     */\n\n    _this.tileQueue_ = new TileQueue(_this.getTilePriority.bind(_this), _this.handleTileChange_.bind(_this));\n\n    _this.addChangeListener(MapProperty.LAYERGROUP, _this.handleLayerGroupChanged_);\n\n    _this.addChangeListener(MapProperty.VIEW, _this.handleViewChanged_);\n\n    _this.addChangeListener(MapProperty.SIZE, _this.handleSizeChanged_);\n\n    _this.addChangeListener(MapProperty.TARGET, _this.handleTargetChanged_); // setProperties will trigger the rendering of the map if the map\n    // is \"defined\" already.\n\n\n    _this.setProperties(optionsInternal.values);\n\n    var map = _this;\n\n    if (options.view && !(options.view instanceof View)) {\n      options.view.then(function (viewOptions) {\n        map.setView(new View(viewOptions));\n      });\n    }\n\n    _this.controls.addEventListener(CollectionEventType.ADD,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n     */\n    function (event) {\n      event.element.setMap(this);\n    }.bind(_this));\n\n    _this.controls.addEventListener(CollectionEventType.REMOVE,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n     */\n    function (event) {\n      event.element.setMap(null);\n    }.bind(_this));\n\n    _this.interactions.addEventListener(CollectionEventType.ADD,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n     */\n    function (event) {\n      event.element.setMap(this);\n    }.bind(_this));\n\n    _this.interactions.addEventListener(CollectionEventType.REMOVE,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n     */\n    function (event) {\n      event.element.setMap(null);\n    }.bind(_this));\n\n    _this.overlays_.addEventListener(CollectionEventType.ADD,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n     */\n    function (event) {\n      this.addOverlayInternal_(\n      /** @type {import(\"./Overlay.js\").default} */\n      event.element);\n    }.bind(_this));\n\n    _this.overlays_.addEventListener(CollectionEventType.REMOVE,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n     */\n    function (event) {\n      var overlay =\n      /** @type {import(\"./Overlay.js\").default} */\n      event.element;\n      var id = overlay.getId();\n\n      if (id !== undefined) {\n        delete this.overlayIdIndex_[id.toString()];\n      }\n\n      event.element.setMap(null);\n    }.bind(_this));\n\n    _this.controls.forEach(\n    /**\n     * @param {import(\"./control/Control.js\").default} control Control.\n     * @this {PluggableMap}\n     */\n    function (control) {\n      control.setMap(this);\n    }.bind(_this));\n\n    _this.interactions.forEach(\n    /**\n     * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction.\n     * @this {PluggableMap}\n     */\n    function (interaction) {\n      interaction.setMap(this);\n    }.bind(_this));\n\n    _this.overlays_.forEach(_this.addOverlayInternal_.bind(_this));\n\n    return _this;\n  }\n  /**\n   * @abstract\n   * @return {import(\"./renderer/Map.js\").default} The map renderer\n   */\n\n\n  PluggableMap.prototype.createRenderer = function () {\n    throw new Error('Use a map type that has a createRenderer method');\n  };\n  /**\n   * Add the given control to the map.\n   * @param {import(\"./control/Control.js\").default} control Control.\n   * @api\n   */\n\n\n  PluggableMap.prototype.addControl = function (control) {\n    this.getControls().push(control);\n  };\n  /**\n   * Add the given interaction to the map. If you want to add an interaction\n   * at another point of the collection use `getInteractions()` and the methods\n   * available on {@link module:ol/Collection~Collection}. This can be used to\n   * stop the event propagation from the handleEvent function. The interactions\n   * get to handle the events in the reverse order of this collection.\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to add.\n   * @api\n   */\n\n\n  PluggableMap.prototype.addInteraction = function (interaction) {\n    this.getInteractions().push(interaction);\n  };\n  /**\n   * Adds the given layer to the top of this map. If you want to add a layer\n   * elsewhere in the stack, use `getLayers()` and the methods available on\n   * {@link module:ol/Collection~Collection}.\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\n   * @api\n   */\n\n\n  PluggableMap.prototype.addLayer = function (layer) {\n    var layers = this.getLayerGroup().getLayers();\n    layers.push(layer);\n  };\n  /**\n   * @param {import(\"./layer/Group.js\").GroupEvent} event The layer add event.\n   * @private\n   */\n\n\n  PluggableMap.prototype.handleLayerAdd_ = function (event) {\n    setLayerMapProperty(event.layer, this);\n  };\n  /**\n   * Add the given overlay to the map.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @api\n   */\n\n\n  PluggableMap.prototype.addOverlay = function (overlay) {\n    this.getOverlays().push(overlay);\n  };\n  /**\n   * This deals with map's overlay collection changes.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @private\n   */\n\n\n  PluggableMap.prototype.addOverlayInternal_ = function (overlay) {\n    var id = overlay.getId();\n\n    if (id !== undefined) {\n      this.overlayIdIndex_[id.toString()] = overlay;\n    }\n\n    overlay.setMap(this);\n  };\n  /**\n   *\n   * Clean up.\n   */\n\n\n  PluggableMap.prototype.disposeInternal = function () {\n    this.controls.clear();\n    this.interactions.clear();\n    this.overlays_.clear();\n    this.setTarget(null);\n\n    _super.prototype.disposeInternal.call(this);\n  };\n  /**\n   * Detect features that intersect a pixel on the viewport, and execute a\n   * callback with each intersecting feature. Layers included in the detection can\n   * be configured through the `layerFilter` option in `opt_options`.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {function(import(\"./Feature.js\").FeatureLike, import(\"./layer/Layer.js\").default<import(\"./source/Source\").default>, import(\"./geom/SimpleGeometry.js\").default): T} callback Feature callback. The callback will be\n   *     called with two arguments. The first argument is one\n   *     {@link module:ol/Feature~Feature feature} or\n   *     {@link module:ol/render/Feature~RenderFeature render feature} at the pixel, the second is\n   *     the {@link module:ol/layer/Layer~Layer layer} of the feature and will be null for\n   *     unmanaged layers. To stop detection, callback functions can return a\n   *     truthy value.\n   * @param {AtPixelOptions} [opt_options] Optional options.\n   * @return {T|undefined} Callback result, i.e. the return value of last\n   * callback execution, or the first truthy callback return value.\n   * @template T\n   * @api\n   */\n\n\n  PluggableMap.prototype.forEachFeatureAtPixel = function (pixel, callback, opt_options) {\n    if (!this.frameState_ || !this.renderer_) {\n      return;\n    }\n\n    var coordinate = this.getCoordinateFromPixelInternal(pixel);\n    opt_options = opt_options !== undefined ? opt_options : {};\n    var hitTolerance = opt_options.hitTolerance !== undefined ? opt_options.hitTolerance : 0;\n    var layerFilter = opt_options.layerFilter !== undefined ? opt_options.layerFilter : TRUE;\n    var checkWrapped = opt_options.checkWrapped !== false;\n    return this.renderer_.forEachFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, checkWrapped, callback, null, layerFilter, null);\n  };\n  /**\n   * Get all features that intersect a pixel on the viewport.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {AtPixelOptions} [opt_options] Optional options.\n   * @return {Array<import(\"./Feature.js\").FeatureLike>} The detected features or\n   * an empty array if none were found.\n   * @api\n   */\n\n\n  PluggableMap.prototype.getFeaturesAtPixel = function (pixel, opt_options) {\n    var features = [];\n    this.forEachFeatureAtPixel(pixel, function (feature) {\n      features.push(feature);\n    }, opt_options);\n    return features;\n  };\n  /**\n   * Get all layers from all layer groups.\n   * @return {Array<import(\"./layer/Layer.js\").default>} Layers.\n   * @api\n   */\n\n\n  PluggableMap.prototype.getAllLayers = function () {\n    var layers = [];\n\n    function addLayersFrom(layerGroup) {\n      layerGroup.forEach(function (layer) {\n        if (layer instanceof LayerGroup) {\n          addLayersFrom(layer.getLayers());\n        } else {\n          layers.push(layer);\n        }\n      });\n    }\n\n    addLayersFrom(this.getLayers());\n    return layers;\n  };\n  /**\n   * Please the `layer.getData()` method for {@link module:ol/layer/Tile~TileLayer#getData tile layers} or\n   * {@link module:ol/layer/Image~ImageLayer#getData image layers} instead of using this method.\n   *\n   * Detect layers that have a color value at a pixel on the viewport, and\n   * execute a callback with each matching layer. Layers included in the\n   * detection can be configured through `opt_layerFilter`.\n   *\n   * Note: In maps with more than one layer, this method will typically return pixel data\n   * representing the composed image of all layers visible at the given pixel – because layers\n   * will generally share the same rendering context.  To force layers to render separately, and\n   * to get pixel data representing only one layer at a time, you can assign each layer a unique\n   * `className` in its constructor.\n   *\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {function(this: S, import(\"./layer/Layer.js\").default, (Uint8ClampedArray|Uint8Array)): T} callback\n   *     Layer callback. This callback will receive two arguments: first is the\n   *     {@link module:ol/layer/Layer~Layer layer}, second argument is an array representing\n   *     [R, G, B, A] pixel values (0 - 255) and will be `null` for layer types\n   *     that do not currently support this argument. To stop detection, callback\n   *     functions can return a truthy value.\n   * @param {AtPixelOptions} [opt_options] Configuration options.\n   * @return {T|undefined} Callback result, i.e. the return value of last\n   * callback execution, or the first truthy callback return value.\n   * @template S,T\n   * @api\n   * @deprecated\n   */\n\n\n  PluggableMap.prototype.forEachLayerAtPixel = function (pixel, callback, opt_options) {\n    if (!this.frameState_ || !this.renderer_) {\n      return;\n    }\n\n    var options = opt_options || {};\n    var hitTolerance = options.hitTolerance !== undefined ? options.hitTolerance : 0;\n    var layerFilter = options.layerFilter || TRUE;\n    return this.renderer_.forEachLayerAtPixel(pixel, this.frameState_, hitTolerance, callback, layerFilter);\n  };\n  /**\n   * Detect if features intersect a pixel on the viewport. Layers included in the\n   * detection can be configured through `opt_layerFilter`.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {AtPixelOptions} [opt_options] Optional options.\n   * @return {boolean} Is there a feature at the given pixel?\n   * @api\n   */\n\n\n  PluggableMap.prototype.hasFeatureAtPixel = function (pixel, opt_options) {\n    if (!this.frameState_ || !this.renderer_) {\n      return false;\n    }\n\n    var coordinate = this.getCoordinateFromPixelInternal(pixel);\n    opt_options = opt_options !== undefined ? opt_options : {};\n    var layerFilter = opt_options.layerFilter !== undefined ? opt_options.layerFilter : TRUE;\n    var hitTolerance = opt_options.hitTolerance !== undefined ? opt_options.hitTolerance : 0;\n    var checkWrapped = opt_options.checkWrapped !== false;\n    return this.renderer_.hasFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, checkWrapped, layerFilter, null);\n  };\n  /**\n   * Returns the coordinate in user projection for a browser event.\n   * @param {MouseEvent} event Event.\n   * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n   * @api\n   */\n\n\n  PluggableMap.prototype.getEventCoordinate = function (event) {\n    return this.getCoordinateFromPixel(this.getEventPixel(event));\n  };\n  /**\n   * Returns the coordinate in view projection for a browser event.\n   * @param {MouseEvent} event Event.\n   * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n   */\n\n\n  PluggableMap.prototype.getEventCoordinateInternal = function (event) {\n    return this.getCoordinateFromPixelInternal(this.getEventPixel(event));\n  };\n  /**\n   * Returns the map pixel position for a browser event relative to the viewport.\n   * @param {UIEvent} event Event.\n   * @return {import(\"./pixel.js\").Pixel} Pixel.\n   * @api\n   */\n\n\n  PluggableMap.prototype.getEventPixel = function (event) {\n    var viewportPosition = this.viewport_.getBoundingClientRect();\n    var eventPosition = //FIXME Are we really calling this with a TouchEvent anywhere?\n    'changedTouches' in event ?\n    /** @type {TouchEvent} */\n    event.changedTouches[0] :\n    /** @type {MouseEvent} */\n    event;\n    return [eventPosition.clientX - viewportPosition.left, eventPosition.clientY - viewportPosition.top];\n  };\n  /**\n   * Get the target in which this map is rendered.\n   * Note that this returns what is entered as an option or in setTarget:\n   * if that was an element, it returns an element; if a string, it returns that.\n   * @return {HTMLElement|string|undefined} The Element or id of the Element that the\n   *     map is rendered in.\n   * @observable\n   * @api\n   */\n\n\n  PluggableMap.prototype.getTarget = function () {\n    return (\n      /** @type {HTMLElement|string|undefined} */\n      this.get(MapProperty.TARGET)\n    );\n  };\n  /**\n   * Get the DOM element into which this map is rendered. In contrast to\n   * `getTarget` this method always return an `Element`, or `null` if the\n   * map has no target.\n   * @return {HTMLElement} The element that the map is rendered in.\n   * @api\n   */\n\n\n  PluggableMap.prototype.getTargetElement = function () {\n    var target = this.getTarget();\n\n    if (target !== undefined) {\n      return typeof target === 'string' ? document.getElementById(target) : target;\n    } else {\n      return null;\n    }\n  };\n  /**\n   * Get the coordinate for a given pixel.  This returns a coordinate in the\n   * user projection.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\n   * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\n   * @api\n   */\n\n\n  PluggableMap.prototype.getCoordinateFromPixel = function (pixel) {\n    return toUserCoordinate(this.getCoordinateFromPixelInternal(pixel), this.getView().getProjection());\n  };\n  /**\n   * Get the coordinate for a given pixel.  This returns a coordinate in the\n   * map view projection.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\n   * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\n   */\n\n\n  PluggableMap.prototype.getCoordinateFromPixelInternal = function (pixel) {\n    var frameState = this.frameState_;\n\n    if (!frameState) {\n      return null;\n    } else {\n      return applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n    }\n  };\n  /**\n   * Get the map controls. Modifying this collection changes the controls\n   * associated with the map.\n   * @return {Collection<import(\"./control/Control.js\").default>} Controls.\n   * @api\n   */\n\n\n  PluggableMap.prototype.getControls = function () {\n    return this.controls;\n  };\n  /**\n   * Get the map overlays. Modifying this collection changes the overlays\n   * associated with the map.\n   * @return {Collection<import(\"./Overlay.js\").default>} Overlays.\n   * @api\n   */\n\n\n  PluggableMap.prototype.getOverlays = function () {\n    return this.overlays_;\n  };\n  /**\n   * Get an overlay by its identifier (the value returned by overlay.getId()).\n   * Note that the index treats string and numeric identifiers as the same. So\n   * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.\n   * @param {string|number} id Overlay identifier.\n   * @return {import(\"./Overlay.js\").default} Overlay.\n   * @api\n   */\n\n\n  PluggableMap.prototype.getOverlayById = function (id) {\n    var overlay = this.overlayIdIndex_[id.toString()];\n    return overlay !== undefined ? overlay : null;\n  };\n  /**\n   * Get the map interactions. Modifying this collection changes the interactions\n   * associated with the map.\n   *\n   * Interactions are used for e.g. pan, zoom and rotate.\n   * @return {Collection<import(\"./interaction/Interaction.js\").default>} Interactions.\n   * @api\n   */\n\n\n  PluggableMap.prototype.getInteractions = function () {\n    return this.interactions;\n  };\n  /**\n   * Get the layergroup associated with this map.\n   * @return {LayerGroup} A layer group containing the layers in this map.\n   * @observable\n   * @api\n   */\n\n\n  PluggableMap.prototype.getLayerGroup = function () {\n    return (\n      /** @type {LayerGroup} */\n      this.get(MapProperty.LAYERGROUP)\n    );\n  };\n  /**\n   * Clear any existing layers and add layers to the map.\n   * @param {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>} layers The layers to be added to the map.\n   * @api\n   */\n\n\n  PluggableMap.prototype.setLayers = function (layers) {\n    var group = this.getLayerGroup();\n\n    if (layers instanceof Collection) {\n      group.setLayers(layers);\n      return;\n    }\n\n    var collection = group.getLayers();\n    collection.clear();\n    collection.extend(layers);\n  };\n  /**\n   * Get the collection of layers associated with this map.\n   * @return {!Collection<import(\"./layer/Base.js\").default>} Layers.\n   * @api\n   */\n\n\n  PluggableMap.prototype.getLayers = function () {\n    var layers = this.getLayerGroup().getLayers();\n    return layers;\n  };\n  /**\n   * @return {boolean} Layers have sources that are still loading.\n   */\n\n\n  PluggableMap.prototype.getLoadingOrNotReady = function () {\n    var layerStatesArray = this.getLayerGroup().getLayerStatesArray();\n\n    for (var i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n      var state = layerStatesArray[i];\n\n      if (!state.visible) {\n        continue;\n      }\n\n      var renderer = state.layer.getRenderer();\n\n      if (renderer && !renderer.ready) {\n        return true;\n      }\n\n      var source =\n      /** @type {import(\"./layer/Layer.js\").default} */\n      state.layer.getSource();\n\n      if (source && source.loading) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Get the pixel for a coordinate.  This takes a coordinate in the user\n   * projection and returns the corresponding pixel.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\n   * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\n   * @api\n   */\n\n\n  PluggableMap.prototype.getPixelFromCoordinate = function (coordinate) {\n    var viewCoordinate = fromUserCoordinate(coordinate, this.getView().getProjection());\n    return this.getPixelFromCoordinateInternal(viewCoordinate);\n  };\n  /**\n   * Get the pixel for a coordinate.  This takes a coordinate in the map view\n   * projection and returns the corresponding pixel.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\n   * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\n   */\n\n\n  PluggableMap.prototype.getPixelFromCoordinateInternal = function (coordinate) {\n    var frameState = this.frameState_;\n\n    if (!frameState) {\n      return null;\n    } else {\n      return applyTransform(frameState.coordinateToPixelTransform, coordinate.slice(0, 2));\n    }\n  };\n  /**\n   * Get the map renderer.\n   * @return {import(\"./renderer/Map.js\").default|null} Renderer\n   */\n\n\n  PluggableMap.prototype.getRenderer = function () {\n    return this.renderer_;\n  };\n  /**\n   * Get the size of this map.\n   * @return {import(\"./size.js\").Size|undefined} The size in pixels of the map in the DOM.\n   * @observable\n   * @api\n   */\n\n\n  PluggableMap.prototype.getSize = function () {\n    return (\n      /** @type {import(\"./size.js\").Size|undefined} */\n      this.get(MapProperty.SIZE)\n    );\n  };\n  /**\n   * Get the view associated with this map. A view manages properties such as\n   * center and resolution.\n   * @return {View} The view that controls this map.\n   * @observable\n   * @api\n   */\n\n\n  PluggableMap.prototype.getView = function () {\n    return (\n      /** @type {View} */\n      this.get(MapProperty.VIEW)\n    );\n  };\n  /**\n   * Get the element that serves as the map viewport.\n   * @return {HTMLElement} Viewport.\n   * @api\n   */\n\n\n  PluggableMap.prototype.getViewport = function () {\n    return this.viewport_;\n  };\n  /**\n   * Get the element that serves as the container for overlays.  Elements added to\n   * this container will let mousedown and touchstart events through to the map,\n   * so clicks and gestures on an overlay will trigger {@link module:ol/MapBrowserEvent~MapBrowserEvent}\n   * events.\n   * @return {!HTMLElement} The map's overlay container.\n   */\n\n\n  PluggableMap.prototype.getOverlayContainer = function () {\n    return this.overlayContainer_;\n  };\n  /**\n   * Get the element that serves as a container for overlays that don't allow\n   * event propagation. Elements added to this container won't let mousedown and\n   * touchstart events through to the map, so clicks and gestures on an overlay\n   * don't trigger any {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n   * @return {!HTMLElement} The map's overlay container that stops events.\n   */\n\n\n  PluggableMap.prototype.getOverlayContainerStopEvent = function () {\n    return this.overlayContainerStopEvent_;\n  };\n  /**\n   * @return {!Document} The document where the map is displayed.\n   */\n\n\n  PluggableMap.prototype.getOwnerDocument = function () {\n    var targetElement = this.getTargetElement();\n    return targetElement ? targetElement.ownerDocument : document;\n  };\n  /**\n   * @param {import(\"./Tile.js\").default} tile Tile.\n   * @param {string} tileSourceKey Tile source key.\n   * @param {import(\"./coordinate.js\").Coordinate} tileCenter Tile center.\n   * @param {number} tileResolution Tile resolution.\n   * @return {number} Tile priority.\n   */\n\n\n  PluggableMap.prototype.getTilePriority = function (tile, tileSourceKey, tileCenter, tileResolution) {\n    return getTilePriority(this.frameState_, tile, tileSourceKey, tileCenter, tileResolution);\n  };\n  /**\n   * @param {UIEvent} browserEvent Browser event.\n   * @param {string} [opt_type] Type.\n   */\n\n\n  PluggableMap.prototype.handleBrowserEvent = function (browserEvent, opt_type) {\n    var type = opt_type || browserEvent.type;\n    var mapBrowserEvent = new MapBrowserEvent(type, this, browserEvent);\n    this.handleMapBrowserEvent(mapBrowserEvent);\n  };\n  /**\n   * @param {MapBrowserEvent} mapBrowserEvent The event to handle.\n   */\n\n\n  PluggableMap.prototype.handleMapBrowserEvent = function (mapBrowserEvent) {\n    if (!this.frameState_) {\n      // With no view defined, we cannot translate pixels into geographical\n      // coordinates so interactions cannot be used.\n      return;\n    }\n\n    var originalEvent =\n    /** @type {PointerEvent} */\n    mapBrowserEvent.originalEvent;\n    var eventType = originalEvent.type;\n\n    if (eventType === PointerEventType.POINTERDOWN || eventType === EventType.WHEEL || eventType === EventType.KEYDOWN) {\n      var doc = this.getOwnerDocument();\n      var rootNode = this.viewport_.getRootNode ? this.viewport_.getRootNode() : doc;\n      var target =\n      /** @type {Node} */\n      originalEvent.target;\n\n      if ( // Abort if the target is a child of the container for elements whose events are not meant\n      // to be handled by map interactions.\n      this.overlayContainerStopEvent_.contains(target) || // Abort if the event target is a child of the container that is no longer in the page.\n      // It's possible for the target to no longer be in the page if it has been removed in an\n      // event listener, this might happen in a Control that recreates it's content based on\n      // user interaction either manually or via a render in something like https://reactjs.org/\n      !(rootNode === doc ? doc.documentElement : rootNode).contains(target)) {\n        return;\n      }\n    }\n\n    mapBrowserEvent.frameState = this.frameState_;\n\n    if (this.dispatchEvent(mapBrowserEvent) !== false) {\n      var interactionsArray = this.getInteractions().getArray().slice();\n\n      for (var i = interactionsArray.length - 1; i >= 0; i--) {\n        var interaction = interactionsArray[i];\n\n        if (interaction.getMap() !== this || !interaction.getActive() || !this.getTargetElement()) {\n          continue;\n        }\n\n        var cont = interaction.handleEvent(mapBrowserEvent);\n\n        if (!cont || mapBrowserEvent.propagationStopped) {\n          break;\n        }\n      }\n    }\n  };\n  /**\n   * @protected\n   */\n\n\n  PluggableMap.prototype.handlePostRender = function () {\n    var frameState = this.frameState_; // Manage the tile queue\n    // Image loads are expensive and a limited resource, so try to use them\n    // efficiently:\n    // * When the view is static we allow a large number of parallel tile loads\n    //   to complete the frame as quickly as possible.\n    // * When animating or interacting, image loads can cause janks, so we reduce\n    //   the maximum number of loads per frame and limit the number of parallel\n    //   tile loads to remain reactive to view changes and to reduce the chance of\n    //   loading tiles that will quickly disappear from view.\n\n    var tileQueue = this.tileQueue_;\n\n    if (!tileQueue.isEmpty()) {\n      var maxTotalLoading = this.maxTilesLoading_;\n      var maxNewLoads = maxTotalLoading;\n\n      if (frameState) {\n        var hints = frameState.viewHints;\n\n        if (hints[ViewHint.ANIMATING] || hints[ViewHint.INTERACTING]) {\n          var lowOnFrameBudget = Date.now() - frameState.time > 8;\n          maxTotalLoading = lowOnFrameBudget ? 0 : 8;\n          maxNewLoads = lowOnFrameBudget ? 0 : 2;\n        }\n      }\n\n      if (tileQueue.getTilesLoading() < maxTotalLoading) {\n        tileQueue.reprioritize(); // FIXME only call if view has changed\n\n        tileQueue.loadMoreTiles(maxTotalLoading, maxNewLoads);\n      }\n    }\n\n    if (frameState && this.renderer_ && !frameState.animate) {\n      if (this.renderComplete_ === true) {\n        if (this.hasListener(RenderEventType.RENDERCOMPLETE)) {\n          this.renderer_.dispatchRenderEvent(RenderEventType.RENDERCOMPLETE, frameState);\n        }\n\n        if (this.loaded_ === false) {\n          this.loaded_ = true;\n          this.dispatchEvent(new MapEvent(MapEventType.LOADEND, this, frameState));\n        }\n      } else if (this.loaded_ === true) {\n        this.loaded_ = false;\n        this.dispatchEvent(new MapEvent(MapEventType.LOADSTART, this, frameState));\n      }\n    }\n\n    var postRenderFunctions = this.postRenderFunctions_;\n\n    for (var i = 0, ii = postRenderFunctions.length; i < ii; ++i) {\n      postRenderFunctions[i](this, frameState);\n    }\n\n    postRenderFunctions.length = 0;\n  };\n  /**\n   * @private\n   */\n\n\n  PluggableMap.prototype.handleSizeChanged_ = function () {\n    if (this.getView() && !this.getView().getAnimating()) {\n      this.getView().resolveConstraints(0);\n    }\n\n    this.render();\n  };\n  /**\n   * @private\n   */\n\n\n  PluggableMap.prototype.handleTargetChanged_ = function () {\n    if (this.mapBrowserEventHandler_) {\n      for (var i = 0, ii = this.targetChangeHandlerKeys_.length; i < ii; ++i) {\n        unlistenByKey(this.targetChangeHandlerKeys_[i]);\n      }\n\n      this.targetChangeHandlerKeys_ = null;\n      this.viewport_.removeEventListener(EventType.CONTEXTMENU, this.boundHandleBrowserEvent_);\n      this.viewport_.removeEventListener(EventType.WHEEL, this.boundHandleBrowserEvent_);\n      this.mapBrowserEventHandler_.dispose();\n      this.mapBrowserEventHandler_ = null;\n      removeNode(this.viewport_);\n    } // target may be undefined, null, a string or an Element.\n    // If it's a string we convert it to an Element before proceeding.\n    // If it's not now an Element we remove the viewport from the DOM.\n    // If it's an Element we append the viewport element to it.\n\n\n    var targetElement = this.getTargetElement();\n\n    if (!targetElement) {\n      if (this.renderer_) {\n        clearTimeout(this.postRenderTimeoutHandle_);\n        this.postRenderTimeoutHandle_ = undefined;\n        this.postRenderFunctions_.length = 0;\n        this.renderer_.dispose();\n        this.renderer_ = null;\n      }\n\n      if (this.animationDelayKey_) {\n        cancelAnimationFrame(this.animationDelayKey_);\n        this.animationDelayKey_ = undefined;\n      }\n    } else {\n      targetElement.appendChild(this.viewport_);\n\n      if (!this.renderer_) {\n        this.renderer_ = this.createRenderer();\n      }\n\n      this.mapBrowserEventHandler_ = new MapBrowserEventHandler(this, this.moveTolerance_);\n\n      for (var key in MapBrowserEventType) {\n        this.mapBrowserEventHandler_.addEventListener(MapBrowserEventType[key], this.handleMapBrowserEvent.bind(this));\n      }\n\n      this.viewport_.addEventListener(EventType.CONTEXTMENU, this.boundHandleBrowserEvent_, false);\n      this.viewport_.addEventListener(EventType.WHEEL, this.boundHandleBrowserEvent_, PASSIVE_EVENT_LISTENERS ? {\n        passive: false\n      } : false);\n      var defaultView = this.getOwnerDocument().defaultView;\n      var keyboardEventTarget = !this.keyboardEventTarget_ ? targetElement : this.keyboardEventTarget_;\n      this.targetChangeHandlerKeys_ = [listen(keyboardEventTarget, EventType.KEYDOWN, this.handleBrowserEvent, this), listen(keyboardEventTarget, EventType.KEYPRESS, this.handleBrowserEvent, this), listen(defaultView, EventType.RESIZE, this.updateSize, this)];\n    }\n\n    this.updateSize(); // updateSize calls setSize, so no need to call this.render\n    // ourselves here.\n  };\n  /**\n   * @private\n   */\n\n\n  PluggableMap.prototype.handleTileChange_ = function () {\n    this.render();\n  };\n  /**\n   * @private\n   */\n\n\n  PluggableMap.prototype.handleViewPropertyChanged_ = function () {\n    this.render();\n  };\n  /**\n   * @private\n   */\n\n\n  PluggableMap.prototype.handleViewChanged_ = function () {\n    if (this.viewPropertyListenerKey_) {\n      unlistenByKey(this.viewPropertyListenerKey_);\n      this.viewPropertyListenerKey_ = null;\n    }\n\n    if (this.viewChangeListenerKey_) {\n      unlistenByKey(this.viewChangeListenerKey_);\n      this.viewChangeListenerKey_ = null;\n    }\n\n    var view = this.getView();\n\n    if (view) {\n      this.updateViewportSize_();\n      this.viewPropertyListenerKey_ = listen(view, ObjectEventType.PROPERTYCHANGE, this.handleViewPropertyChanged_, this);\n      this.viewChangeListenerKey_ = listen(view, EventType.CHANGE, this.handleViewPropertyChanged_, this);\n      view.resolveConstraints(0);\n    }\n\n    this.render();\n  };\n  /**\n   * @private\n   */\n\n\n  PluggableMap.prototype.handleLayerGroupChanged_ = function () {\n    if (this.layerGroupPropertyListenerKeys_) {\n      this.layerGroupPropertyListenerKeys_.forEach(unlistenByKey);\n      this.layerGroupPropertyListenerKeys_ = null;\n    }\n\n    var layerGroup = this.getLayerGroup();\n\n    if (layerGroup) {\n      this.handleLayerAdd_(new GroupEvent('addlayer', layerGroup));\n      this.layerGroupPropertyListenerKeys_ = [listen(layerGroup, ObjectEventType.PROPERTYCHANGE, this.render, this), listen(layerGroup, EventType.CHANGE, this.render, this), listen(layerGroup, 'addlayer', this.handleLayerAdd_, this), listen(layerGroup, 'removelayer', this.handleLayerRemove_, this)];\n    }\n\n    this.render();\n  };\n  /**\n   * @return {boolean} Is rendered.\n   */\n\n\n  PluggableMap.prototype.isRendered = function () {\n    return !!this.frameState_;\n  };\n  /**\n   * Requests an immediate render in a synchronous manner.\n   * @api\n   */\n\n\n  PluggableMap.prototype.renderSync = function () {\n    if (this.animationDelayKey_) {\n      cancelAnimationFrame(this.animationDelayKey_);\n    }\n\n    this.animationDelay_();\n  };\n  /**\n   * Redraws all text after new fonts have loaded\n   */\n\n\n  PluggableMap.prototype.redrawText = function () {\n    var layerStates = this.getLayerGroup().getLayerStatesArray();\n\n    for (var i = 0, ii = layerStates.length; i < ii; ++i) {\n      var layer = layerStates[i].layer;\n\n      if (layer.hasRenderer()) {\n        layer.getRenderer().handleFontsChanged();\n      }\n    }\n  };\n  /**\n   * Request a map rendering (at the next animation frame).\n   * @api\n   */\n\n\n  PluggableMap.prototype.render = function () {\n    if (this.renderer_ && this.animationDelayKey_ === undefined) {\n      this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_);\n    }\n  };\n  /**\n   * Remove the given control from the map.\n   * @param {import(\"./control/Control.js\").default} control Control.\n   * @return {import(\"./control/Control.js\").default|undefined} The removed control (or undefined\n   *     if the control was not found).\n   * @api\n   */\n\n\n  PluggableMap.prototype.removeControl = function (control) {\n    return this.getControls().remove(control);\n  };\n  /**\n   * Remove the given interaction from the map.\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to remove.\n   * @return {import(\"./interaction/Interaction.js\").default|undefined} The removed interaction (or\n   *     undefined if the interaction was not found).\n   * @api\n   */\n\n\n  PluggableMap.prototype.removeInteraction = function (interaction) {\n    return this.getInteractions().remove(interaction);\n  };\n  /**\n   * Removes the given layer from the map.\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\n   * @return {import(\"./layer/Base.js\").default|undefined} The removed layer (or undefined if the\n   *     layer was not found).\n   * @api\n   */\n\n\n  PluggableMap.prototype.removeLayer = function (layer) {\n    var layers = this.getLayerGroup().getLayers();\n    return layers.remove(layer);\n  };\n  /**\n   * @param {import(\"./layer/Group.js\").GroupEvent} event The layer remove event.\n   * @private\n   */\n\n\n  PluggableMap.prototype.handleLayerRemove_ = function (event) {\n    removeLayerMapProperty(event.layer);\n  };\n  /**\n   * Remove the given overlay from the map.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @return {import(\"./Overlay.js\").default|undefined} The removed overlay (or undefined\n   *     if the overlay was not found).\n   * @api\n   */\n\n\n  PluggableMap.prototype.removeOverlay = function (overlay) {\n    return this.getOverlays().remove(overlay);\n  };\n  /**\n   * @param {number} time Time.\n   * @private\n   */\n\n\n  PluggableMap.prototype.renderFrame_ = function (time) {\n    var _this = this;\n\n    var size = this.getSize();\n    var view = this.getView();\n    var previousFrameState = this.frameState_;\n    /** @type {?FrameState} */\n\n    var frameState = null;\n\n    if (size !== undefined && hasArea(size) && view && view.isDef()) {\n      var viewHints = view.getHints(this.frameState_ ? this.frameState_.viewHints : undefined);\n      var viewState = view.getState();\n      frameState = {\n        animate: false,\n        coordinateToPixelTransform: this.coordinateToPixelTransform_,\n        declutterTree: null,\n        extent: getForViewAndSize(viewState.center, viewState.resolution, viewState.rotation, size),\n        index: this.frameIndex_++,\n        layerIndex: 0,\n        layerStatesArray: this.getLayerGroup().getLayerStatesArray(),\n        pixelRatio: this.pixelRatio_,\n        pixelToCoordinateTransform: this.pixelToCoordinateTransform_,\n        postRenderFunctions: [],\n        size: size,\n        tileQueue: this.tileQueue_,\n        time: time,\n        usedTiles: {},\n        viewState: viewState,\n        viewHints: viewHints,\n        wantedTiles: {},\n        mapId: getUid(this),\n        renderTargets: {}\n      };\n\n      if (viewState.nextCenter && viewState.nextResolution) {\n        var rotation = isNaN(viewState.nextRotation) ? viewState.rotation : viewState.nextRotation;\n        frameState.nextExtent = getForViewAndSize(viewState.nextCenter, viewState.nextResolution, rotation, size);\n      }\n    }\n\n    this.frameState_ = frameState;\n    /** @type {import(\"./renderer/Map.js\").default} */\n\n    this.renderer_.renderFrame(frameState);\n\n    if (frameState) {\n      if (frameState.animate) {\n        this.render();\n      }\n\n      Array.prototype.push.apply(this.postRenderFunctions_, frameState.postRenderFunctions);\n\n      if (previousFrameState) {\n        var moveStart = !this.previousExtent_ || !isEmpty(this.previousExtent_) && !equals(frameState.extent, this.previousExtent_);\n\n        if (moveStart) {\n          this.dispatchEvent(new MapEvent(MapEventType.MOVESTART, this, previousFrameState));\n          this.previousExtent_ = createOrUpdateEmpty(this.previousExtent_);\n        }\n      }\n\n      var idle = this.previousExtent_ && !frameState.viewHints[ViewHint.ANIMATING] && !frameState.viewHints[ViewHint.INTERACTING] && !equals(frameState.extent, this.previousExtent_);\n\n      if (idle) {\n        this.dispatchEvent(new MapEvent(MapEventType.MOVEEND, this, frameState));\n        clone(frameState.extent, this.previousExtent_);\n      }\n    }\n\n    this.dispatchEvent(new MapEvent(MapEventType.POSTRENDER, this, frameState));\n    this.renderComplete_ = this.hasListener(MapEventType.LOADSTART) || this.hasListener(MapEventType.LOADEND) || this.hasListener(RenderEventType.RENDERCOMPLETE) ? !this.tileQueue_.getTilesLoading() && !this.tileQueue_.getCount() && !this.getLoadingOrNotReady() : undefined;\n\n    if (!this.postRenderTimeoutHandle_) {\n      this.postRenderTimeoutHandle_ = setTimeout(function () {\n        _this.postRenderTimeoutHandle_ = undefined;\n\n        _this.handlePostRender();\n      }, 0);\n    }\n  };\n  /**\n   * Sets the layergroup of this map.\n   * @param {LayerGroup} layerGroup A layer group containing the layers in this map.\n   * @observable\n   * @api\n   */\n\n\n  PluggableMap.prototype.setLayerGroup = function (layerGroup) {\n    var oldLayerGroup = this.getLayerGroup();\n\n    if (oldLayerGroup) {\n      this.handleLayerRemove_(new GroupEvent('removelayer', oldLayerGroup));\n    }\n\n    this.set(MapProperty.LAYERGROUP, layerGroup);\n  };\n  /**\n   * Set the size of this map.\n   * @param {import(\"./size.js\").Size|undefined} size The size in pixels of the map in the DOM.\n   * @observable\n   * @api\n   */\n\n\n  PluggableMap.prototype.setSize = function (size) {\n    this.set(MapProperty.SIZE, size);\n  };\n  /**\n   * Set the target element to render this map into.\n   * @param {HTMLElement|string} [target] The Element or id of the Element\n   *     that the map is rendered in.\n   * @observable\n   * @api\n   */\n\n\n  PluggableMap.prototype.setTarget = function (target) {\n    this.set(MapProperty.TARGET, target);\n  };\n  /**\n   * Set the view for this map.\n   * @param {View|Promise<import(\"./View.js\").ViewOptions>} view The view that controls this map.\n   * It is also possible to pass a promise that resolves to options for constructing a view.  This\n   * alternative allows view properties to be resolved by sources or other components that load\n   * view-related metadata.\n   * @observable\n   * @api\n   */\n\n\n  PluggableMap.prototype.setView = function (view) {\n    if (!view || view instanceof View) {\n      this.set(MapProperty.VIEW, view);\n      return;\n    }\n\n    this.set(MapProperty.VIEW, new View());\n    var map = this;\n    view.then(function (viewOptions) {\n      map.setView(new View(viewOptions));\n    });\n  };\n  /**\n   * Force a recalculation of the map viewport size.  This should be called when\n   * third-party code changes the size of the map viewport.\n   * @api\n   */\n\n\n  PluggableMap.prototype.updateSize = function () {\n    var targetElement = this.getTargetElement();\n    var size = undefined;\n\n    if (targetElement) {\n      var computedStyle = getComputedStyle(targetElement);\n      var width = targetElement.offsetWidth - parseFloat(computedStyle['borderLeftWidth']) - parseFloat(computedStyle['paddingLeft']) - parseFloat(computedStyle['paddingRight']) - parseFloat(computedStyle['borderRightWidth']);\n      var height = targetElement.offsetHeight - parseFloat(computedStyle['borderTopWidth']) - parseFloat(computedStyle['paddingTop']) - parseFloat(computedStyle['paddingBottom']) - parseFloat(computedStyle['borderBottomWidth']);\n\n      if (!isNaN(width) && !isNaN(height)) {\n        size = [width, height];\n\n        if (!hasArea(size) && !!(targetElement.offsetWidth || targetElement.offsetHeight || targetElement.getClientRects().length)) {\n          // eslint-disable-next-line\n          console.warn(\"No map visible because the map container's width or height are 0.\");\n        }\n      }\n    }\n\n    this.setSize(size);\n    this.updateViewportSize_();\n  };\n  /**\n   * Recomputes the viewport size and save it on the view object (if any)\n   * @private\n   */\n\n\n  PluggableMap.prototype.updateViewportSize_ = function () {\n    var view = this.getView();\n\n    if (view) {\n      var size = undefined;\n      var computedStyle = getComputedStyle(this.viewport_);\n\n      if (computedStyle.width && computedStyle.height) {\n        size = [parseInt(computedStyle.width, 10), parseInt(computedStyle.height, 10)];\n      }\n\n      view.setViewportSize(size);\n    }\n  };\n\n  return PluggableMap;\n}(BaseObject);\n/**\n * @param {MapOptions} options Map options.\n * @return {MapOptionsInternal} Internal map options.\n */\n\n\nfunction createOptionsInternal(options) {\n  /**\n   * @type {HTMLElement|Document}\n   */\n  var keyboardEventTarget = null;\n\n  if (options.keyboardEventTarget !== undefined) {\n    keyboardEventTarget = typeof options.keyboardEventTarget === 'string' ? document.getElementById(options.keyboardEventTarget) : options.keyboardEventTarget;\n  }\n  /**\n   * @type {Object<string, *>}\n   */\n\n\n  var values = {};\n  var layerGroup = options.layers && typeof\n  /** @type {?} */\n  options.layers.getLayers === 'function' ?\n  /** @type {LayerGroup} */\n  options.layers : new LayerGroup({\n    layers:\n    /** @type {Collection} */\n    options.layers\n  });\n  values[MapProperty.LAYERGROUP] = layerGroup;\n  values[MapProperty.TARGET] = options.target;\n  values[MapProperty.VIEW] = options.view instanceof View ? options.view : new View();\n  var controls;\n\n  if (options.controls !== undefined) {\n    if (Array.isArray(options.controls)) {\n      controls = new Collection(options.controls.slice());\n    } else {\n      assert(typeof\n      /** @type {?} */\n      options.controls.getArray === 'function', 47); // Expected `controls` to be an array or an `import(\"./Collection.js\").Collection`\n\n      controls =\n      /** @type {Collection} */\n      options.controls;\n    }\n  }\n\n  var interactions;\n\n  if (options.interactions !== undefined) {\n    if (Array.isArray(options.interactions)) {\n      interactions = new Collection(options.interactions.slice());\n    } else {\n      assert(typeof\n      /** @type {?} */\n      options.interactions.getArray === 'function', 48); // Expected `interactions` to be an array or an `import(\"./Collection.js\").Collection`\n\n      interactions =\n      /** @type {Collection} */\n      options.interactions;\n    }\n  }\n\n  var overlays;\n\n  if (options.overlays !== undefined) {\n    if (Array.isArray(options.overlays)) {\n      overlays = new Collection(options.overlays.slice());\n    } else {\n      assert(typeof\n      /** @type {?} */\n      options.overlays.getArray === 'function', 49); // Expected `overlays` to be an array or an `import(\"./Collection.js\").Collection`\n\n      overlays = options.overlays;\n    }\n  } else {\n    overlays = new Collection();\n  }\n\n  return {\n    controls: controls,\n    interactions: interactions,\n    keyboardEventTarget: keyboardEventTarget,\n    overlays: overlays,\n    values: values\n  };\n}\n\nexport default PluggableMap;","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","BaseObject","Collection","CollectionEventType","EventType","Layer","LayerGroup","GroupEvent","MapBrowserEvent","MapBrowserEventHandler","MapBrowserEventType","MapEvent","MapEventType","MapProperty","ObjectEventType","PointerEventType","RenderEventType","TileQueue","getTilePriority","View","ViewHint","DEVICE_PIXEL_RATIO","PASSIVE_EVENT_LISTENERS","TRUE","apply","applyTransform","createTransform","assert","clone","createOrUpdateEmpty","equals","getForViewAndSize","isEmpty","fromUserCoordinate","toUserCoordinate","getUid","hasArea","listen","unlistenByKey","removeNode","removeLayerMapProperty","layer","setMapInternal","getLayers","forEach","setLayerMapProperty","map","layers","getArray","i","ii","length","PluggableMap","_super","options","_this","on","once","un","optionsInternal","createOptionsInternal","renderComplete_","loaded_","boundHandleBrowserEvent_","handleBrowserEvent","bind","maxTilesLoading_","maxTilesLoading","undefined","pixelRatio_","pixelRatio","postRenderTimeoutHandle_","animationDelayKey_","animationDelay_","renderFrame_","Date","now","coordinateToPixelTransform_","pixelToCoordinateTransform_","frameIndex_","frameState_","previousExtent_","viewPropertyListenerKey_","viewChangeListenerKey_","layerGroupPropertyListenerKeys_","viewport_","document","createElement","className","window","style","position","overflow","width","height","overlayContainer_","zIndex","pointerEvents","appendChild","overlayContainerStopEvent_","mapBrowserEventHandler_","moveTolerance_","moveTolerance","keyboardEventTarget_","keyboardEventTarget","targetChangeHandlerKeys_","controls","interactions","overlays_","overlays","overlayIdIndex_","renderer_","postRenderFunctions_","tileQueue_","handleTileChange_","addChangeListener","LAYERGROUP","handleLayerGroupChanged_","VIEW","handleViewChanged_","SIZE","handleSizeChanged_","TARGET","handleTargetChanged_","setProperties","values","view","then","viewOptions","setView","addEventListener","ADD","event","element","setMap","REMOVE","addOverlayInternal_","overlay","id","getId","toString","control","interaction","createRenderer","Error","addControl","getControls","push","addInteraction","getInteractions","addLayer","getLayerGroup","handleLayerAdd_","addOverlay","getOverlays","disposeInternal","clear","setTarget","forEachFeatureAtPixel","pixel","callback","opt_options","coordinate","getCoordinateFromPixelInternal","hitTolerance","layerFilter","checkWrapped","forEachFeatureAtCoordinate","getFeaturesAtPixel","features","feature","getAllLayers","addLayersFrom","layerGroup","forEachLayerAtPixel","hasFeatureAtPixel","hasFeatureAtCoordinate","getEventCoordinate","getCoordinateFromPixel","getEventPixel","getEventCoordinateInternal","viewportPosition","getBoundingClientRect","eventPosition","changedTouches","clientX","left","clientY","top","getTarget","get","getTargetElement","target","getElementById","getView","getProjection","frameState","pixelToCoordinateTransform","slice","getOverlayById","setLayers","group","collection","extend","getLoadingOrNotReady","layerStatesArray","getLayerStatesArray","state","visible","renderer","getRenderer","ready","source","getSource","loading","getPixelFromCoordinate","viewCoordinate","getPixelFromCoordinateInternal","coordinateToPixelTransform","getSize","getViewport","getOverlayContainer","getOverlayContainerStopEvent","getOwnerDocument","targetElement","ownerDocument","tile","tileSourceKey","tileCenter","tileResolution","browserEvent","opt_type","type","mapBrowserEvent","handleMapBrowserEvent","originalEvent","eventType","POINTERDOWN","WHEEL","KEYDOWN","doc","rootNode","getRootNode","contains","documentElement","dispatchEvent","interactionsArray","getMap","getActive","cont","handleEvent","propagationStopped","handlePostRender","tileQueue","maxTotalLoading","maxNewLoads","hints","viewHints","ANIMATING","INTERACTING","lowOnFrameBudget","time","getTilesLoading","reprioritize","loadMoreTiles","animate","hasListener","RENDERCOMPLETE","dispatchRenderEvent","LOADEND","LOADSTART","postRenderFunctions","getAnimating","resolveConstraints","render","removeEventListener","CONTEXTMENU","dispose","clearTimeout","cancelAnimationFrame","key","passive","defaultView","KEYPRESS","RESIZE","updateSize","handleViewPropertyChanged_","updateViewportSize_","PROPERTYCHANGE","CHANGE","handleLayerRemove_","isRendered","renderSync","redrawText","layerStates","hasRenderer","handleFontsChanged","requestAnimationFrame","removeControl","remove","removeInteraction","removeLayer","removeOverlay","size","previousFrameState","isDef","getHints","viewState","getState","declutterTree","extent","center","resolution","rotation","index","layerIndex","usedTiles","wantedTiles","mapId","renderTargets","nextCenter","nextResolution","isNaN","nextRotation","nextExtent","renderFrame","moveStart","MOVESTART","idle","MOVEEND","POSTRENDER","getCount","setTimeout","setLayerGroup","oldLayerGroup","set","setSize","computedStyle","getComputedStyle","offsetWidth","parseFloat","offsetHeight","getClientRects","console","warn","parseInt","setViewportSize","isArray"],"sources":["/home/asura/github/smartcity/source/node_modules/ol/PluggableMap.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/PluggableMap\n */\nimport BaseObject from './Object.js';\nimport Collection from './Collection.js';\nimport CollectionEventType from './CollectionEventType.js';\nimport EventType from './events/EventType.js';\nimport Layer from './layer/Layer.js';\nimport LayerGroup, { GroupEvent } from './layer/Group.js';\nimport MapBrowserEvent from './MapBrowserEvent.js';\nimport MapBrowserEventHandler from './MapBrowserEventHandler.js';\nimport MapBrowserEventType from './MapBrowserEventType.js';\nimport MapEvent from './MapEvent.js';\nimport MapEventType from './MapEventType.js';\nimport MapProperty from './MapProperty.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport PointerEventType from './pointer/EventType.js';\nimport RenderEventType from './render/EventType.js';\nimport TileQueue, { getTilePriority } from './TileQueue.js';\nimport View from './View.js';\nimport ViewHint from './ViewHint.js';\nimport { DEVICE_PIXEL_RATIO, PASSIVE_EVENT_LISTENERS } from './has.js';\nimport { TRUE } from './functions.js';\nimport { apply as applyTransform, create as createTransform, } from './transform.js';\nimport { assert } from './asserts.js';\nimport { clone, createOrUpdateEmpty, equals, getForViewAndSize, isEmpty, } from './extent.js';\nimport { fromUserCoordinate, toUserCoordinate } from './proj.js';\nimport { getUid } from './util.js';\nimport { hasArea } from './size.js';\nimport { listen, unlistenByKey } from './events.js';\nimport { removeNode } from './dom.js';\n/**\n * State of the current frame. Only `pixelRatio`, `time` and `viewState` should\n * be used in applications.\n * @typedef {Object} FrameState\n * @property {number} pixelRatio The pixel ratio of the frame.\n * @property {number} time The time when rendering of the frame was requested.\n * @property {import(\"./View.js\").State} viewState The state of the current view.\n * @property {boolean} animate Animate.\n * @property {import(\"./transform.js\").Transform} coordinateToPixelTransform CoordinateToPixelTransform.\n * @property {import(\"rbush\").default} declutterTree DeclutterTree.\n * @property {null|import(\"./extent.js\").Extent} extent Extent.\n * @property {import(\"./extent.js\").Extent} [nextExtent] Next extent during an animation series.\n * @property {number} index Index.\n * @property {Array<import(\"./layer/Layer.js\").State>} layerStatesArray LayerStatesArray.\n * @property {number} layerIndex LayerIndex.\n * @property {import(\"./transform.js\").Transform} pixelToCoordinateTransform PixelToCoordinateTransform.\n * @property {Array<PostRenderFunction>} postRenderFunctions PostRenderFunctions.\n * @property {import(\"./size.js\").Size} size Size.\n * @property {TileQueue} tileQueue TileQueue.\n * @property {!Object<string, Object<string, boolean>>} usedTiles UsedTiles.\n * @property {Array<number>} viewHints ViewHints.\n * @property {!Object<string, Object<string, boolean>>} wantedTiles WantedTiles.\n * @property {string} mapId The id of the map.\n * @property {Object<string, boolean>} renderTargets Identifiers of previously rendered elements.\n */\n/**\n * @typedef {function(PluggableMap, ?FrameState): any} PostRenderFunction\n */\n/**\n * @typedef {Object} AtPixelOptions\n * @property {undefined|function(import(\"./layer/Layer.js\").default<import(\"./source/Source\").default>): boolean} [layerFilter] Layer filter\n * function. The filter function will receive one argument, the\n * {@link module:ol/layer/Layer~Layer layer-candidate} and it should return a boolean value.\n * Only layers which are visible and for which this function returns `true`\n * will be tested for features. By default, all visible layers will be tested.\n * @property {number} [hitTolerance=0] Hit-detection tolerance in css pixels. Pixels\n * inside the radius around the given position will be checked for features.\n * @property {boolean} [checkWrapped=true] Check-Wrapped Will check for for wrapped geometries inside the range of\n *   +/- 1 world width. Works only if a projection is used that can be wrapped.\n */\n/**\n * @typedef {Object} MapOptionsInternal\n * @property {Collection<import(\"./control/Control.js\").default>} [controls] Controls.\n * @property {Collection<import(\"./interaction/Interaction.js\").default>} [interactions] Interactions.\n * @property {HTMLElement|Document} keyboardEventTarget KeyboardEventTarget.\n * @property {Collection<import(\"./Overlay.js\").default>} overlays Overlays.\n * @property {Object<string, *>} values Values.\n */\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:layergroup'|'change:size'|'change:target'|'change:view'} MapObjectEventTypes\n */\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *    import(\"./Observable\").OnSignature<MapObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./MapBrowserEventType\").Types, import(\"./MapBrowserEvent\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./MapEventType\").Types, import(\"./MapEvent\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./render/EventType\").MapRenderEventTypes, import(\"./render/Event\").default, Return> &\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|MapObjectEventTypes|\n *      import(\"./MapBrowserEventType\").Types|import(\"./MapEventType\").Types|\n *      import(\"./render/EventType\").MapRenderEventTypes, Return>} PluggableMapOnSignature\n */\n/**\n * Object literal with config options for the map.\n * @typedef {Object} MapOptions\n * @property {Collection<import(\"./control/Control.js\").default>|Array<import(\"./control/Control.js\").default>} [controls]\n * Controls initially added to the map. If not specified,\n * {@link module:ol/control.defaults} is used.\n * @property {number} [pixelRatio=window.devicePixelRatio] The ratio between\n * physical pixels and device-independent pixels (dips) on the device.\n * @property {Collection<import(\"./interaction/Interaction.js\").default>|Array<import(\"./interaction/Interaction.js\").default>} [interactions]\n * Interactions that are initially added to the map. If not specified,\n * {@link module:ol/interaction.defaults} is used.\n * @property {HTMLElement|Document|string} [keyboardEventTarget] The element to\n * listen to keyboard events on. This determines when the `KeyboardPan` and\n * `KeyboardZoom` interactions trigger. For example, if this option is set to\n * `document` the keyboard interactions will always trigger. If this option is\n * not specified, the element the library listens to keyboard events on is the\n * map target (i.e. the user-provided div for the map). If this is not\n * `document`, the target element needs to be focused for key events to be\n * emitted, requiring that the target element has a `tabindex` attribute.\n * @property {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>|LayerGroup} [layers]\n * Layers. If this is not defined, a map with no layers will be rendered. Note\n * that layers are rendered in the order supplied, so if you want, for example,\n * a vector layer to appear on top of a tile layer, it must come after the tile\n * layer.\n * @property {number} [maxTilesLoading=16] Maximum number tiles to load\n * simultaneously.\n * @property {number} [moveTolerance=1] The minimum distance in pixels the\n * cursor must move to be detected as a map move event instead of a click.\n * Increasing this value can make it easier to click on the map.\n * @property {Collection<import(\"./Overlay.js\").default>|Array<import(\"./Overlay.js\").default>} [overlays]\n * Overlays initially added to the map. By default, no overlays are added.\n * @property {HTMLElement|string} [target] The container for the map, either the\n * element itself or the `id` of the element. If not specified at construction\n * time, {@link module:ol/Map~Map#setTarget} must be called for the map to be\n * rendered. If passed by element, the container can be in a secondary document.\n * @property {View|Promise<import(\"./View.js\").ViewOptions>} [view] The map's view.  No layer sources will be\n * fetched unless this is specified at construction time or through\n * {@link module:ol/Map~Map#setView}.\n */\n/**\n * @param {import(\"./layer/Base.js\").default} layer Layer.\n */\nfunction removeLayerMapProperty(layer) {\n    if (layer instanceof Layer) {\n        layer.setMapInternal(null);\n        return;\n    }\n    if (layer instanceof LayerGroup) {\n        layer.getLayers().forEach(removeLayerMapProperty);\n    }\n}\n/**\n * @param {import(\"./layer/Base.js\").default} layer Layer.\n * @param {PluggableMap} map Map.\n */\nfunction setLayerMapProperty(layer, map) {\n    if (layer instanceof Layer) {\n        layer.setMapInternal(map);\n        return;\n    }\n    if (layer instanceof LayerGroup) {\n        var layers = layer.getLayers().getArray();\n        for (var i = 0, ii = layers.length; i < ii; ++i) {\n            setLayerMapProperty(layers[i], map);\n        }\n    }\n}\n/**\n * @fires import(\"./MapBrowserEvent.js\").MapBrowserEvent\n * @fires import(\"./MapEvent.js\").MapEvent\n * @fires import(\"./render/Event.js\").default#precompose\n * @fires import(\"./render/Event.js\").default#postcompose\n * @fires import(\"./render/Event.js\").default#rendercomplete\n * @api\n */\nvar PluggableMap = /** @class */ (function (_super) {\n    __extends(PluggableMap, _super);\n    /**\n     * @param {MapOptions} options Map options.\n     */\n    function PluggableMap(options) {\n        var _this = _super.call(this) || this;\n        /***\n         * @type {PluggableMapOnSignature<import(\"./events\").EventsKey>}\n         */\n        _this.on;\n        /***\n         * @type {PluggableMapOnSignature<import(\"./events\").EventsKey>}\n         */\n        _this.once;\n        /***\n         * @type {PluggableMapOnSignature<void>}\n         */\n        _this.un;\n        var optionsInternal = createOptionsInternal(options);\n        /**\n         * @private\n         * @type {boolean|undefined}\n         */\n        _this.renderComplete_;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.loaded_ = true;\n        /** @private */\n        _this.boundHandleBrowserEvent_ = _this.handleBrowserEvent.bind(_this);\n        /**\n         * @type {number}\n         * @private\n         */\n        _this.maxTilesLoading_ =\n            options.maxTilesLoading !== undefined ? options.maxTilesLoading : 16;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.pixelRatio_ =\n            options.pixelRatio !== undefined\n                ? options.pixelRatio\n                : DEVICE_PIXEL_RATIO;\n        /**\n         * @private\n         * @type {*}\n         */\n        _this.postRenderTimeoutHandle_;\n        /**\n         * @private\n         * @type {number|undefined}\n         */\n        _this.animationDelayKey_;\n        /**\n         * @private\n         */\n        _this.animationDelay_ = /** @this {PluggableMap} */ function () {\n            this.animationDelayKey_ = undefined;\n            this.renderFrame_(Date.now());\n        }.bind(_this);\n        /**\n         * @private\n         * @type {import(\"./transform.js\").Transform}\n         */\n        _this.coordinateToPixelTransform_ = createTransform();\n        /**\n         * @private\n         * @type {import(\"./transform.js\").Transform}\n         */\n        _this.pixelToCoordinateTransform_ = createTransform();\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.frameIndex_ = 0;\n        /**\n         * @private\n         * @type {?FrameState}\n         */\n        _this.frameState_ = null;\n        /**\n         * The extent at the previous 'moveend' event.\n         * @private\n         * @type {import(\"./extent.js\").Extent}\n         */\n        _this.previousExtent_ = null;\n        /**\n         * @private\n         * @type {?import(\"./events.js\").EventsKey}\n         */\n        _this.viewPropertyListenerKey_ = null;\n        /**\n         * @private\n         * @type {?import(\"./events.js\").EventsKey}\n         */\n        _this.viewChangeListenerKey_ = null;\n        /**\n         * @private\n         * @type {?Array<import(\"./events.js\").EventsKey>}\n         */\n        _this.layerGroupPropertyListenerKeys_ = null;\n        /**\n         * @private\n         * @type {!HTMLElement}\n         */\n        _this.viewport_ = document.createElement('div');\n        _this.viewport_.className =\n            'ol-viewport' + ('ontouchstart' in window ? ' ol-touch' : '');\n        _this.viewport_.style.position = 'relative';\n        _this.viewport_.style.overflow = 'hidden';\n        _this.viewport_.style.width = '100%';\n        _this.viewport_.style.height = '100%';\n        /**\n         * @private\n         * @type {!HTMLElement}\n         */\n        _this.overlayContainer_ = document.createElement('div');\n        _this.overlayContainer_.style.position = 'absolute';\n        _this.overlayContainer_.style.zIndex = '0';\n        _this.overlayContainer_.style.width = '100%';\n        _this.overlayContainer_.style.height = '100%';\n        _this.overlayContainer_.style.pointerEvents = 'none';\n        _this.overlayContainer_.className = 'ol-overlaycontainer';\n        _this.viewport_.appendChild(_this.overlayContainer_);\n        /**\n         * @private\n         * @type {!HTMLElement}\n         */\n        _this.overlayContainerStopEvent_ = document.createElement('div');\n        _this.overlayContainerStopEvent_.style.position = 'absolute';\n        _this.overlayContainerStopEvent_.style.zIndex = '0';\n        _this.overlayContainerStopEvent_.style.width = '100%';\n        _this.overlayContainerStopEvent_.style.height = '100%';\n        _this.overlayContainerStopEvent_.style.pointerEvents = 'none';\n        _this.overlayContainerStopEvent_.className = 'ol-overlaycontainer-stopevent';\n        _this.viewport_.appendChild(_this.overlayContainerStopEvent_);\n        /**\n         * @private\n         * @type {MapBrowserEventHandler}\n         */\n        _this.mapBrowserEventHandler_ = null;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.moveTolerance_ = options.moveTolerance;\n        /**\n         * @private\n         * @type {HTMLElement|Document}\n         */\n        _this.keyboardEventTarget_ = optionsInternal.keyboardEventTarget;\n        /**\n         * @private\n         * @type {?Array<import(\"./events.js\").EventsKey>}\n         */\n        _this.targetChangeHandlerKeys_ = null;\n        /**\n         * @type {Collection<import(\"./control/Control.js\").default>}\n         * @protected\n         */\n        _this.controls = optionsInternal.controls || new Collection();\n        /**\n         * @type {Collection<import(\"./interaction/Interaction.js\").default>}\n         * @protected\n         */\n        _this.interactions = optionsInternal.interactions || new Collection();\n        /**\n         * @type {Collection<import(\"./Overlay.js\").default>}\n         * @private\n         */\n        _this.overlays_ = optionsInternal.overlays;\n        /**\n         * A lookup of overlays by id.\n         * @private\n         * @type {Object<string, import(\"./Overlay.js\").default>}\n         */\n        _this.overlayIdIndex_ = {};\n        /**\n         * @type {import(\"./renderer/Map.js\").default|null}\n         * @private\n         */\n        _this.renderer_ = null;\n        /**\n         * @private\n         * @type {!Array<PostRenderFunction>}\n         */\n        _this.postRenderFunctions_ = [];\n        /**\n         * @private\n         * @type {TileQueue}\n         */\n        _this.tileQueue_ = new TileQueue(_this.getTilePriority.bind(_this), _this.handleTileChange_.bind(_this));\n        _this.addChangeListener(MapProperty.LAYERGROUP, _this.handleLayerGroupChanged_);\n        _this.addChangeListener(MapProperty.VIEW, _this.handleViewChanged_);\n        _this.addChangeListener(MapProperty.SIZE, _this.handleSizeChanged_);\n        _this.addChangeListener(MapProperty.TARGET, _this.handleTargetChanged_);\n        // setProperties will trigger the rendering of the map if the map\n        // is \"defined\" already.\n        _this.setProperties(optionsInternal.values);\n        var map = _this;\n        if (options.view && !(options.view instanceof View)) {\n            options.view.then(function (viewOptions) {\n                map.setView(new View(viewOptions));\n            });\n        }\n        _this.controls.addEventListener(CollectionEventType.ADD, \n        /**\n         * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n         */\n        function (event) {\n            event.element.setMap(this);\n        }.bind(_this));\n        _this.controls.addEventListener(CollectionEventType.REMOVE, \n        /**\n         * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n         */\n        function (event) {\n            event.element.setMap(null);\n        }.bind(_this));\n        _this.interactions.addEventListener(CollectionEventType.ADD, \n        /**\n         * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n         */\n        function (event) {\n            event.element.setMap(this);\n        }.bind(_this));\n        _this.interactions.addEventListener(CollectionEventType.REMOVE, \n        /**\n         * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n         */\n        function (event) {\n            event.element.setMap(null);\n        }.bind(_this));\n        _this.overlays_.addEventListener(CollectionEventType.ADD, \n        /**\n         * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n         */\n        function (event) {\n            this.addOverlayInternal_(\n            /** @type {import(\"./Overlay.js\").default} */ (event.element));\n        }.bind(_this));\n        _this.overlays_.addEventListener(CollectionEventType.REMOVE, \n        /**\n         * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n         */\n        function (event) {\n            var overlay = /** @type {import(\"./Overlay.js\").default} */ (event.element);\n            var id = overlay.getId();\n            if (id !== undefined) {\n                delete this.overlayIdIndex_[id.toString()];\n            }\n            event.element.setMap(null);\n        }.bind(_this));\n        _this.controls.forEach(\n        /**\n         * @param {import(\"./control/Control.js\").default} control Control.\n         * @this {PluggableMap}\n         */\n        function (control) {\n            control.setMap(this);\n        }.bind(_this));\n        _this.interactions.forEach(\n        /**\n         * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction.\n         * @this {PluggableMap}\n         */\n        function (interaction) {\n            interaction.setMap(this);\n        }.bind(_this));\n        _this.overlays_.forEach(_this.addOverlayInternal_.bind(_this));\n        return _this;\n    }\n    /**\n     * @abstract\n     * @return {import(\"./renderer/Map.js\").default} The map renderer\n     */\n    PluggableMap.prototype.createRenderer = function () {\n        throw new Error('Use a map type that has a createRenderer method');\n    };\n    /**\n     * Add the given control to the map.\n     * @param {import(\"./control/Control.js\").default} control Control.\n     * @api\n     */\n    PluggableMap.prototype.addControl = function (control) {\n        this.getControls().push(control);\n    };\n    /**\n     * Add the given interaction to the map. If you want to add an interaction\n     * at another point of the collection use `getInteractions()` and the methods\n     * available on {@link module:ol/Collection~Collection}. This can be used to\n     * stop the event propagation from the handleEvent function. The interactions\n     * get to handle the events in the reverse order of this collection.\n     * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to add.\n     * @api\n     */\n    PluggableMap.prototype.addInteraction = function (interaction) {\n        this.getInteractions().push(interaction);\n    };\n    /**\n     * Adds the given layer to the top of this map. If you want to add a layer\n     * elsewhere in the stack, use `getLayers()` and the methods available on\n     * {@link module:ol/Collection~Collection}.\n     * @param {import(\"./layer/Base.js\").default} layer Layer.\n     * @api\n     */\n    PluggableMap.prototype.addLayer = function (layer) {\n        var layers = this.getLayerGroup().getLayers();\n        layers.push(layer);\n    };\n    /**\n     * @param {import(\"./layer/Group.js\").GroupEvent} event The layer add event.\n     * @private\n     */\n    PluggableMap.prototype.handleLayerAdd_ = function (event) {\n        setLayerMapProperty(event.layer, this);\n    };\n    /**\n     * Add the given overlay to the map.\n     * @param {import(\"./Overlay.js\").default} overlay Overlay.\n     * @api\n     */\n    PluggableMap.prototype.addOverlay = function (overlay) {\n        this.getOverlays().push(overlay);\n    };\n    /**\n     * This deals with map's overlay collection changes.\n     * @param {import(\"./Overlay.js\").default} overlay Overlay.\n     * @private\n     */\n    PluggableMap.prototype.addOverlayInternal_ = function (overlay) {\n        var id = overlay.getId();\n        if (id !== undefined) {\n            this.overlayIdIndex_[id.toString()] = overlay;\n        }\n        overlay.setMap(this);\n    };\n    /**\n     *\n     * Clean up.\n     */\n    PluggableMap.prototype.disposeInternal = function () {\n        this.controls.clear();\n        this.interactions.clear();\n        this.overlays_.clear();\n        this.setTarget(null);\n        _super.prototype.disposeInternal.call(this);\n    };\n    /**\n     * Detect features that intersect a pixel on the viewport, and execute a\n     * callback with each intersecting feature. Layers included in the detection can\n     * be configured through the `layerFilter` option in `opt_options`.\n     * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n     * @param {function(import(\"./Feature.js\").FeatureLike, import(\"./layer/Layer.js\").default<import(\"./source/Source\").default>, import(\"./geom/SimpleGeometry.js\").default): T} callback Feature callback. The callback will be\n     *     called with two arguments. The first argument is one\n     *     {@link module:ol/Feature~Feature feature} or\n     *     {@link module:ol/render/Feature~RenderFeature render feature} at the pixel, the second is\n     *     the {@link module:ol/layer/Layer~Layer layer} of the feature and will be null for\n     *     unmanaged layers. To stop detection, callback functions can return a\n     *     truthy value.\n     * @param {AtPixelOptions} [opt_options] Optional options.\n     * @return {T|undefined} Callback result, i.e. the return value of last\n     * callback execution, or the first truthy callback return value.\n     * @template T\n     * @api\n     */\n    PluggableMap.prototype.forEachFeatureAtPixel = function (pixel, callback, opt_options) {\n        if (!this.frameState_ || !this.renderer_) {\n            return;\n        }\n        var coordinate = this.getCoordinateFromPixelInternal(pixel);\n        opt_options = opt_options !== undefined ? opt_options : {};\n        var hitTolerance = opt_options.hitTolerance !== undefined ? opt_options.hitTolerance : 0;\n        var layerFilter = opt_options.layerFilter !== undefined ? opt_options.layerFilter : TRUE;\n        var checkWrapped = opt_options.checkWrapped !== false;\n        return this.renderer_.forEachFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, checkWrapped, callback, null, layerFilter, null);\n    };\n    /**\n     * Get all features that intersect a pixel on the viewport.\n     * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n     * @param {AtPixelOptions} [opt_options] Optional options.\n     * @return {Array<import(\"./Feature.js\").FeatureLike>} The detected features or\n     * an empty array if none were found.\n     * @api\n     */\n    PluggableMap.prototype.getFeaturesAtPixel = function (pixel, opt_options) {\n        var features = [];\n        this.forEachFeatureAtPixel(pixel, function (feature) {\n            features.push(feature);\n        }, opt_options);\n        return features;\n    };\n    /**\n     * Get all layers from all layer groups.\n     * @return {Array<import(\"./layer/Layer.js\").default>} Layers.\n     * @api\n     */\n    PluggableMap.prototype.getAllLayers = function () {\n        var layers = [];\n        function addLayersFrom(layerGroup) {\n            layerGroup.forEach(function (layer) {\n                if (layer instanceof LayerGroup) {\n                    addLayersFrom(layer.getLayers());\n                }\n                else {\n                    layers.push(layer);\n                }\n            });\n        }\n        addLayersFrom(this.getLayers());\n        return layers;\n    };\n    /**\n     * Please the `layer.getData()` method for {@link module:ol/layer/Tile~TileLayer#getData tile layers} or\n     * {@link module:ol/layer/Image~ImageLayer#getData image layers} instead of using this method.\n     *\n     * Detect layers that have a color value at a pixel on the viewport, and\n     * execute a callback with each matching layer. Layers included in the\n     * detection can be configured through `opt_layerFilter`.\n     *\n     * Note: In maps with more than one layer, this method will typically return pixel data\n     * representing the composed image of all layers visible at the given pixel – because layers\n     * will generally share the same rendering context.  To force layers to render separately, and\n     * to get pixel data representing only one layer at a time, you can assign each layer a unique\n     * `className` in its constructor.\n     *\n     * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n     * @param {function(this: S, import(\"./layer/Layer.js\").default, (Uint8ClampedArray|Uint8Array)): T} callback\n     *     Layer callback. This callback will receive two arguments: first is the\n     *     {@link module:ol/layer/Layer~Layer layer}, second argument is an array representing\n     *     [R, G, B, A] pixel values (0 - 255) and will be `null` for layer types\n     *     that do not currently support this argument. To stop detection, callback\n     *     functions can return a truthy value.\n     * @param {AtPixelOptions} [opt_options] Configuration options.\n     * @return {T|undefined} Callback result, i.e. the return value of last\n     * callback execution, or the first truthy callback return value.\n     * @template S,T\n     * @api\n     * @deprecated\n     */\n    PluggableMap.prototype.forEachLayerAtPixel = function (pixel, callback, opt_options) {\n        if (!this.frameState_ || !this.renderer_) {\n            return;\n        }\n        var options = opt_options || {};\n        var hitTolerance = options.hitTolerance !== undefined ? options.hitTolerance : 0;\n        var layerFilter = options.layerFilter || TRUE;\n        return this.renderer_.forEachLayerAtPixel(pixel, this.frameState_, hitTolerance, callback, layerFilter);\n    };\n    /**\n     * Detect if features intersect a pixel on the viewport. Layers included in the\n     * detection can be configured through `opt_layerFilter`.\n     * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n     * @param {AtPixelOptions} [opt_options] Optional options.\n     * @return {boolean} Is there a feature at the given pixel?\n     * @api\n     */\n    PluggableMap.prototype.hasFeatureAtPixel = function (pixel, opt_options) {\n        if (!this.frameState_ || !this.renderer_) {\n            return false;\n        }\n        var coordinate = this.getCoordinateFromPixelInternal(pixel);\n        opt_options = opt_options !== undefined ? opt_options : {};\n        var layerFilter = opt_options.layerFilter !== undefined ? opt_options.layerFilter : TRUE;\n        var hitTolerance = opt_options.hitTolerance !== undefined ? opt_options.hitTolerance : 0;\n        var checkWrapped = opt_options.checkWrapped !== false;\n        return this.renderer_.hasFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, checkWrapped, layerFilter, null);\n    };\n    /**\n     * Returns the coordinate in user projection for a browser event.\n     * @param {MouseEvent} event Event.\n     * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n     * @api\n     */\n    PluggableMap.prototype.getEventCoordinate = function (event) {\n        return this.getCoordinateFromPixel(this.getEventPixel(event));\n    };\n    /**\n     * Returns the coordinate in view projection for a browser event.\n     * @param {MouseEvent} event Event.\n     * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n     */\n    PluggableMap.prototype.getEventCoordinateInternal = function (event) {\n        return this.getCoordinateFromPixelInternal(this.getEventPixel(event));\n    };\n    /**\n     * Returns the map pixel position for a browser event relative to the viewport.\n     * @param {UIEvent} event Event.\n     * @return {import(\"./pixel.js\").Pixel} Pixel.\n     * @api\n     */\n    PluggableMap.prototype.getEventPixel = function (event) {\n        var viewportPosition = this.viewport_.getBoundingClientRect();\n        var eventPosition = \n        //FIXME Are we really calling this with a TouchEvent anywhere?\n        'changedTouches' in event\n            ? /** @type {TouchEvent} */ (event).changedTouches[0]\n            : /** @type {MouseEvent} */ (event);\n        return [\n            eventPosition.clientX - viewportPosition.left,\n            eventPosition.clientY - viewportPosition.top,\n        ];\n    };\n    /**\n     * Get the target in which this map is rendered.\n     * Note that this returns what is entered as an option or in setTarget:\n     * if that was an element, it returns an element; if a string, it returns that.\n     * @return {HTMLElement|string|undefined} The Element or id of the Element that the\n     *     map is rendered in.\n     * @observable\n     * @api\n     */\n    PluggableMap.prototype.getTarget = function () {\n        return /** @type {HTMLElement|string|undefined} */ (this.get(MapProperty.TARGET));\n    };\n    /**\n     * Get the DOM element into which this map is rendered. In contrast to\n     * `getTarget` this method always return an `Element`, or `null` if the\n     * map has no target.\n     * @return {HTMLElement} The element that the map is rendered in.\n     * @api\n     */\n    PluggableMap.prototype.getTargetElement = function () {\n        var target = this.getTarget();\n        if (target !== undefined) {\n            return typeof target === 'string'\n                ? document.getElementById(target)\n                : target;\n        }\n        else {\n            return null;\n        }\n    };\n    /**\n     * Get the coordinate for a given pixel.  This returns a coordinate in the\n     * user projection.\n     * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\n     * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\n     * @api\n     */\n    PluggableMap.prototype.getCoordinateFromPixel = function (pixel) {\n        return toUserCoordinate(this.getCoordinateFromPixelInternal(pixel), this.getView().getProjection());\n    };\n    /**\n     * Get the coordinate for a given pixel.  This returns a coordinate in the\n     * map view projection.\n     * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\n     * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\n     */\n    PluggableMap.prototype.getCoordinateFromPixelInternal = function (pixel) {\n        var frameState = this.frameState_;\n        if (!frameState) {\n            return null;\n        }\n        else {\n            return applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n        }\n    };\n    /**\n     * Get the map controls. Modifying this collection changes the controls\n     * associated with the map.\n     * @return {Collection<import(\"./control/Control.js\").default>} Controls.\n     * @api\n     */\n    PluggableMap.prototype.getControls = function () {\n        return this.controls;\n    };\n    /**\n     * Get the map overlays. Modifying this collection changes the overlays\n     * associated with the map.\n     * @return {Collection<import(\"./Overlay.js\").default>} Overlays.\n     * @api\n     */\n    PluggableMap.prototype.getOverlays = function () {\n        return this.overlays_;\n    };\n    /**\n     * Get an overlay by its identifier (the value returned by overlay.getId()).\n     * Note that the index treats string and numeric identifiers as the same. So\n     * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.\n     * @param {string|number} id Overlay identifier.\n     * @return {import(\"./Overlay.js\").default} Overlay.\n     * @api\n     */\n    PluggableMap.prototype.getOverlayById = function (id) {\n        var overlay = this.overlayIdIndex_[id.toString()];\n        return overlay !== undefined ? overlay : null;\n    };\n    /**\n     * Get the map interactions. Modifying this collection changes the interactions\n     * associated with the map.\n     *\n     * Interactions are used for e.g. pan, zoom and rotate.\n     * @return {Collection<import(\"./interaction/Interaction.js\").default>} Interactions.\n     * @api\n     */\n    PluggableMap.prototype.getInteractions = function () {\n        return this.interactions;\n    };\n    /**\n     * Get the layergroup associated with this map.\n     * @return {LayerGroup} A layer group containing the layers in this map.\n     * @observable\n     * @api\n     */\n    PluggableMap.prototype.getLayerGroup = function () {\n        return /** @type {LayerGroup} */ (this.get(MapProperty.LAYERGROUP));\n    };\n    /**\n     * Clear any existing layers and add layers to the map.\n     * @param {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>} layers The layers to be added to the map.\n     * @api\n     */\n    PluggableMap.prototype.setLayers = function (layers) {\n        var group = this.getLayerGroup();\n        if (layers instanceof Collection) {\n            group.setLayers(layers);\n            return;\n        }\n        var collection = group.getLayers();\n        collection.clear();\n        collection.extend(layers);\n    };\n    /**\n     * Get the collection of layers associated with this map.\n     * @return {!Collection<import(\"./layer/Base.js\").default>} Layers.\n     * @api\n     */\n    PluggableMap.prototype.getLayers = function () {\n        var layers = this.getLayerGroup().getLayers();\n        return layers;\n    };\n    /**\n     * @return {boolean} Layers have sources that are still loading.\n     */\n    PluggableMap.prototype.getLoadingOrNotReady = function () {\n        var layerStatesArray = this.getLayerGroup().getLayerStatesArray();\n        for (var i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n            var state = layerStatesArray[i];\n            if (!state.visible) {\n                continue;\n            }\n            var renderer = state.layer.getRenderer();\n            if (renderer && !renderer.ready) {\n                return true;\n            }\n            var source = /** @type {import(\"./layer/Layer.js\").default} */ (state.layer).getSource();\n            if (source && source.loading) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * Get the pixel for a coordinate.  This takes a coordinate in the user\n     * projection and returns the corresponding pixel.\n     * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\n     * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\n     * @api\n     */\n    PluggableMap.prototype.getPixelFromCoordinate = function (coordinate) {\n        var viewCoordinate = fromUserCoordinate(coordinate, this.getView().getProjection());\n        return this.getPixelFromCoordinateInternal(viewCoordinate);\n    };\n    /**\n     * Get the pixel for a coordinate.  This takes a coordinate in the map view\n     * projection and returns the corresponding pixel.\n     * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\n     * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\n     */\n    PluggableMap.prototype.getPixelFromCoordinateInternal = function (coordinate) {\n        var frameState = this.frameState_;\n        if (!frameState) {\n            return null;\n        }\n        else {\n            return applyTransform(frameState.coordinateToPixelTransform, coordinate.slice(0, 2));\n        }\n    };\n    /**\n     * Get the map renderer.\n     * @return {import(\"./renderer/Map.js\").default|null} Renderer\n     */\n    PluggableMap.prototype.getRenderer = function () {\n        return this.renderer_;\n    };\n    /**\n     * Get the size of this map.\n     * @return {import(\"./size.js\").Size|undefined} The size in pixels of the map in the DOM.\n     * @observable\n     * @api\n     */\n    PluggableMap.prototype.getSize = function () {\n        return /** @type {import(\"./size.js\").Size|undefined} */ (this.get(MapProperty.SIZE));\n    };\n    /**\n     * Get the view associated with this map. A view manages properties such as\n     * center and resolution.\n     * @return {View} The view that controls this map.\n     * @observable\n     * @api\n     */\n    PluggableMap.prototype.getView = function () {\n        return /** @type {View} */ (this.get(MapProperty.VIEW));\n    };\n    /**\n     * Get the element that serves as the map viewport.\n     * @return {HTMLElement} Viewport.\n     * @api\n     */\n    PluggableMap.prototype.getViewport = function () {\n        return this.viewport_;\n    };\n    /**\n     * Get the element that serves as the container for overlays.  Elements added to\n     * this container will let mousedown and touchstart events through to the map,\n     * so clicks and gestures on an overlay will trigger {@link module:ol/MapBrowserEvent~MapBrowserEvent}\n     * events.\n     * @return {!HTMLElement} The map's overlay container.\n     */\n    PluggableMap.prototype.getOverlayContainer = function () {\n        return this.overlayContainer_;\n    };\n    /**\n     * Get the element that serves as a container for overlays that don't allow\n     * event propagation. Elements added to this container won't let mousedown and\n     * touchstart events through to the map, so clicks and gestures on an overlay\n     * don't trigger any {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n     * @return {!HTMLElement} The map's overlay container that stops events.\n     */\n    PluggableMap.prototype.getOverlayContainerStopEvent = function () {\n        return this.overlayContainerStopEvent_;\n    };\n    /**\n     * @return {!Document} The document where the map is displayed.\n     */\n    PluggableMap.prototype.getOwnerDocument = function () {\n        var targetElement = this.getTargetElement();\n        return targetElement ? targetElement.ownerDocument : document;\n    };\n    /**\n     * @param {import(\"./Tile.js\").default} tile Tile.\n     * @param {string} tileSourceKey Tile source key.\n     * @param {import(\"./coordinate.js\").Coordinate} tileCenter Tile center.\n     * @param {number} tileResolution Tile resolution.\n     * @return {number} Tile priority.\n     */\n    PluggableMap.prototype.getTilePriority = function (tile, tileSourceKey, tileCenter, tileResolution) {\n        return getTilePriority(this.frameState_, tile, tileSourceKey, tileCenter, tileResolution);\n    };\n    /**\n     * @param {UIEvent} browserEvent Browser event.\n     * @param {string} [opt_type] Type.\n     */\n    PluggableMap.prototype.handleBrowserEvent = function (browserEvent, opt_type) {\n        var type = opt_type || browserEvent.type;\n        var mapBrowserEvent = new MapBrowserEvent(type, this, browserEvent);\n        this.handleMapBrowserEvent(mapBrowserEvent);\n    };\n    /**\n     * @param {MapBrowserEvent} mapBrowserEvent The event to handle.\n     */\n    PluggableMap.prototype.handleMapBrowserEvent = function (mapBrowserEvent) {\n        if (!this.frameState_) {\n            // With no view defined, we cannot translate pixels into geographical\n            // coordinates so interactions cannot be used.\n            return;\n        }\n        var originalEvent = /** @type {PointerEvent} */ (mapBrowserEvent.originalEvent);\n        var eventType = originalEvent.type;\n        if (eventType === PointerEventType.POINTERDOWN ||\n            eventType === EventType.WHEEL ||\n            eventType === EventType.KEYDOWN) {\n            var doc = this.getOwnerDocument();\n            var rootNode = this.viewport_.getRootNode\n                ? this.viewport_.getRootNode()\n                : doc;\n            var target = /** @type {Node} */ (originalEvent.target);\n            if (\n            // Abort if the target is a child of the container for elements whose events are not meant\n            // to be handled by map interactions.\n            this.overlayContainerStopEvent_.contains(target) ||\n                // Abort if the event target is a child of the container that is no longer in the page.\n                // It's possible for the target to no longer be in the page if it has been removed in an\n                // event listener, this might happen in a Control that recreates it's content based on\n                // user interaction either manually or via a render in something like https://reactjs.org/\n                !(rootNode === doc ? doc.documentElement : rootNode).contains(target)) {\n                return;\n            }\n        }\n        mapBrowserEvent.frameState = this.frameState_;\n        if (this.dispatchEvent(mapBrowserEvent) !== false) {\n            var interactionsArray = this.getInteractions().getArray().slice();\n            for (var i = interactionsArray.length - 1; i >= 0; i--) {\n                var interaction = interactionsArray[i];\n                if (interaction.getMap() !== this ||\n                    !interaction.getActive() ||\n                    !this.getTargetElement()) {\n                    continue;\n                }\n                var cont = interaction.handleEvent(mapBrowserEvent);\n                if (!cont || mapBrowserEvent.propagationStopped) {\n                    break;\n                }\n            }\n        }\n    };\n    /**\n     * @protected\n     */\n    PluggableMap.prototype.handlePostRender = function () {\n        var frameState = this.frameState_;\n        // Manage the tile queue\n        // Image loads are expensive and a limited resource, so try to use them\n        // efficiently:\n        // * When the view is static we allow a large number of parallel tile loads\n        //   to complete the frame as quickly as possible.\n        // * When animating or interacting, image loads can cause janks, so we reduce\n        //   the maximum number of loads per frame and limit the number of parallel\n        //   tile loads to remain reactive to view changes and to reduce the chance of\n        //   loading tiles that will quickly disappear from view.\n        var tileQueue = this.tileQueue_;\n        if (!tileQueue.isEmpty()) {\n            var maxTotalLoading = this.maxTilesLoading_;\n            var maxNewLoads = maxTotalLoading;\n            if (frameState) {\n                var hints = frameState.viewHints;\n                if (hints[ViewHint.ANIMATING] || hints[ViewHint.INTERACTING]) {\n                    var lowOnFrameBudget = Date.now() - frameState.time > 8;\n                    maxTotalLoading = lowOnFrameBudget ? 0 : 8;\n                    maxNewLoads = lowOnFrameBudget ? 0 : 2;\n                }\n            }\n            if (tileQueue.getTilesLoading() < maxTotalLoading) {\n                tileQueue.reprioritize(); // FIXME only call if view has changed\n                tileQueue.loadMoreTiles(maxTotalLoading, maxNewLoads);\n            }\n        }\n        if (frameState && this.renderer_ && !frameState.animate) {\n            if (this.renderComplete_ === true) {\n                if (this.hasListener(RenderEventType.RENDERCOMPLETE)) {\n                    this.renderer_.dispatchRenderEvent(RenderEventType.RENDERCOMPLETE, frameState);\n                }\n                if (this.loaded_ === false) {\n                    this.loaded_ = true;\n                    this.dispatchEvent(new MapEvent(MapEventType.LOADEND, this, frameState));\n                }\n            }\n            else if (this.loaded_ === true) {\n                this.loaded_ = false;\n                this.dispatchEvent(new MapEvent(MapEventType.LOADSTART, this, frameState));\n            }\n        }\n        var postRenderFunctions = this.postRenderFunctions_;\n        for (var i = 0, ii = postRenderFunctions.length; i < ii; ++i) {\n            postRenderFunctions[i](this, frameState);\n        }\n        postRenderFunctions.length = 0;\n    };\n    /**\n     * @private\n     */\n    PluggableMap.prototype.handleSizeChanged_ = function () {\n        if (this.getView() && !this.getView().getAnimating()) {\n            this.getView().resolveConstraints(0);\n        }\n        this.render();\n    };\n    /**\n     * @private\n     */\n    PluggableMap.prototype.handleTargetChanged_ = function () {\n        if (this.mapBrowserEventHandler_) {\n            for (var i = 0, ii = this.targetChangeHandlerKeys_.length; i < ii; ++i) {\n                unlistenByKey(this.targetChangeHandlerKeys_[i]);\n            }\n            this.targetChangeHandlerKeys_ = null;\n            this.viewport_.removeEventListener(EventType.CONTEXTMENU, this.boundHandleBrowserEvent_);\n            this.viewport_.removeEventListener(EventType.WHEEL, this.boundHandleBrowserEvent_);\n            this.mapBrowserEventHandler_.dispose();\n            this.mapBrowserEventHandler_ = null;\n            removeNode(this.viewport_);\n        }\n        // target may be undefined, null, a string or an Element.\n        // If it's a string we convert it to an Element before proceeding.\n        // If it's not now an Element we remove the viewport from the DOM.\n        // If it's an Element we append the viewport element to it.\n        var targetElement = this.getTargetElement();\n        if (!targetElement) {\n            if (this.renderer_) {\n                clearTimeout(this.postRenderTimeoutHandle_);\n                this.postRenderTimeoutHandle_ = undefined;\n                this.postRenderFunctions_.length = 0;\n                this.renderer_.dispose();\n                this.renderer_ = null;\n            }\n            if (this.animationDelayKey_) {\n                cancelAnimationFrame(this.animationDelayKey_);\n                this.animationDelayKey_ = undefined;\n            }\n        }\n        else {\n            targetElement.appendChild(this.viewport_);\n            if (!this.renderer_) {\n                this.renderer_ = this.createRenderer();\n            }\n            this.mapBrowserEventHandler_ = new MapBrowserEventHandler(this, this.moveTolerance_);\n            for (var key in MapBrowserEventType) {\n                this.mapBrowserEventHandler_.addEventListener(MapBrowserEventType[key], this.handleMapBrowserEvent.bind(this));\n            }\n            this.viewport_.addEventListener(EventType.CONTEXTMENU, this.boundHandleBrowserEvent_, false);\n            this.viewport_.addEventListener(EventType.WHEEL, this.boundHandleBrowserEvent_, PASSIVE_EVENT_LISTENERS ? { passive: false } : false);\n            var defaultView = this.getOwnerDocument().defaultView;\n            var keyboardEventTarget = !this.keyboardEventTarget_\n                ? targetElement\n                : this.keyboardEventTarget_;\n            this.targetChangeHandlerKeys_ = [\n                listen(keyboardEventTarget, EventType.KEYDOWN, this.handleBrowserEvent, this),\n                listen(keyboardEventTarget, EventType.KEYPRESS, this.handleBrowserEvent, this),\n                listen(defaultView, EventType.RESIZE, this.updateSize, this),\n            ];\n        }\n        this.updateSize();\n        // updateSize calls setSize, so no need to call this.render\n        // ourselves here.\n    };\n    /**\n     * @private\n     */\n    PluggableMap.prototype.handleTileChange_ = function () {\n        this.render();\n    };\n    /**\n     * @private\n     */\n    PluggableMap.prototype.handleViewPropertyChanged_ = function () {\n        this.render();\n    };\n    /**\n     * @private\n     */\n    PluggableMap.prototype.handleViewChanged_ = function () {\n        if (this.viewPropertyListenerKey_) {\n            unlistenByKey(this.viewPropertyListenerKey_);\n            this.viewPropertyListenerKey_ = null;\n        }\n        if (this.viewChangeListenerKey_) {\n            unlistenByKey(this.viewChangeListenerKey_);\n            this.viewChangeListenerKey_ = null;\n        }\n        var view = this.getView();\n        if (view) {\n            this.updateViewportSize_();\n            this.viewPropertyListenerKey_ = listen(view, ObjectEventType.PROPERTYCHANGE, this.handleViewPropertyChanged_, this);\n            this.viewChangeListenerKey_ = listen(view, EventType.CHANGE, this.handleViewPropertyChanged_, this);\n            view.resolveConstraints(0);\n        }\n        this.render();\n    };\n    /**\n     * @private\n     */\n    PluggableMap.prototype.handleLayerGroupChanged_ = function () {\n        if (this.layerGroupPropertyListenerKeys_) {\n            this.layerGroupPropertyListenerKeys_.forEach(unlistenByKey);\n            this.layerGroupPropertyListenerKeys_ = null;\n        }\n        var layerGroup = this.getLayerGroup();\n        if (layerGroup) {\n            this.handleLayerAdd_(new GroupEvent('addlayer', layerGroup));\n            this.layerGroupPropertyListenerKeys_ = [\n                listen(layerGroup, ObjectEventType.PROPERTYCHANGE, this.render, this),\n                listen(layerGroup, EventType.CHANGE, this.render, this),\n                listen(layerGroup, 'addlayer', this.handleLayerAdd_, this),\n                listen(layerGroup, 'removelayer', this.handleLayerRemove_, this),\n            ];\n        }\n        this.render();\n    };\n    /**\n     * @return {boolean} Is rendered.\n     */\n    PluggableMap.prototype.isRendered = function () {\n        return !!this.frameState_;\n    };\n    /**\n     * Requests an immediate render in a synchronous manner.\n     * @api\n     */\n    PluggableMap.prototype.renderSync = function () {\n        if (this.animationDelayKey_) {\n            cancelAnimationFrame(this.animationDelayKey_);\n        }\n        this.animationDelay_();\n    };\n    /**\n     * Redraws all text after new fonts have loaded\n     */\n    PluggableMap.prototype.redrawText = function () {\n        var layerStates = this.getLayerGroup().getLayerStatesArray();\n        for (var i = 0, ii = layerStates.length; i < ii; ++i) {\n            var layer = layerStates[i].layer;\n            if (layer.hasRenderer()) {\n                layer.getRenderer().handleFontsChanged();\n            }\n        }\n    };\n    /**\n     * Request a map rendering (at the next animation frame).\n     * @api\n     */\n    PluggableMap.prototype.render = function () {\n        if (this.renderer_ && this.animationDelayKey_ === undefined) {\n            this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_);\n        }\n    };\n    /**\n     * Remove the given control from the map.\n     * @param {import(\"./control/Control.js\").default} control Control.\n     * @return {import(\"./control/Control.js\").default|undefined} The removed control (or undefined\n     *     if the control was not found).\n     * @api\n     */\n    PluggableMap.prototype.removeControl = function (control) {\n        return this.getControls().remove(control);\n    };\n    /**\n     * Remove the given interaction from the map.\n     * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to remove.\n     * @return {import(\"./interaction/Interaction.js\").default|undefined} The removed interaction (or\n     *     undefined if the interaction was not found).\n     * @api\n     */\n    PluggableMap.prototype.removeInteraction = function (interaction) {\n        return this.getInteractions().remove(interaction);\n    };\n    /**\n     * Removes the given layer from the map.\n     * @param {import(\"./layer/Base.js\").default} layer Layer.\n     * @return {import(\"./layer/Base.js\").default|undefined} The removed layer (or undefined if the\n     *     layer was not found).\n     * @api\n     */\n    PluggableMap.prototype.removeLayer = function (layer) {\n        var layers = this.getLayerGroup().getLayers();\n        return layers.remove(layer);\n    };\n    /**\n     * @param {import(\"./layer/Group.js\").GroupEvent} event The layer remove event.\n     * @private\n     */\n    PluggableMap.prototype.handleLayerRemove_ = function (event) {\n        removeLayerMapProperty(event.layer);\n    };\n    /**\n     * Remove the given overlay from the map.\n     * @param {import(\"./Overlay.js\").default} overlay Overlay.\n     * @return {import(\"./Overlay.js\").default|undefined} The removed overlay (or undefined\n     *     if the overlay was not found).\n     * @api\n     */\n    PluggableMap.prototype.removeOverlay = function (overlay) {\n        return this.getOverlays().remove(overlay);\n    };\n    /**\n     * @param {number} time Time.\n     * @private\n     */\n    PluggableMap.prototype.renderFrame_ = function (time) {\n        var _this = this;\n        var size = this.getSize();\n        var view = this.getView();\n        var previousFrameState = this.frameState_;\n        /** @type {?FrameState} */\n        var frameState = null;\n        if (size !== undefined && hasArea(size) && view && view.isDef()) {\n            var viewHints = view.getHints(this.frameState_ ? this.frameState_.viewHints : undefined);\n            var viewState = view.getState();\n            frameState = {\n                animate: false,\n                coordinateToPixelTransform: this.coordinateToPixelTransform_,\n                declutterTree: null,\n                extent: getForViewAndSize(viewState.center, viewState.resolution, viewState.rotation, size),\n                index: this.frameIndex_++,\n                layerIndex: 0,\n                layerStatesArray: this.getLayerGroup().getLayerStatesArray(),\n                pixelRatio: this.pixelRatio_,\n                pixelToCoordinateTransform: this.pixelToCoordinateTransform_,\n                postRenderFunctions: [],\n                size: size,\n                tileQueue: this.tileQueue_,\n                time: time,\n                usedTiles: {},\n                viewState: viewState,\n                viewHints: viewHints,\n                wantedTiles: {},\n                mapId: getUid(this),\n                renderTargets: {},\n            };\n            if (viewState.nextCenter && viewState.nextResolution) {\n                var rotation = isNaN(viewState.nextRotation)\n                    ? viewState.rotation\n                    : viewState.nextRotation;\n                frameState.nextExtent = getForViewAndSize(viewState.nextCenter, viewState.nextResolution, rotation, size);\n            }\n        }\n        this.frameState_ = frameState;\n        /** @type {import(\"./renderer/Map.js\").default} */ (this.renderer_).renderFrame(frameState);\n        if (frameState) {\n            if (frameState.animate) {\n                this.render();\n            }\n            Array.prototype.push.apply(this.postRenderFunctions_, frameState.postRenderFunctions);\n            if (previousFrameState) {\n                var moveStart = !this.previousExtent_ ||\n                    (!isEmpty(this.previousExtent_) &&\n                        !equals(frameState.extent, this.previousExtent_));\n                if (moveStart) {\n                    this.dispatchEvent(new MapEvent(MapEventType.MOVESTART, this, previousFrameState));\n                    this.previousExtent_ = createOrUpdateEmpty(this.previousExtent_);\n                }\n            }\n            var idle = this.previousExtent_ &&\n                !frameState.viewHints[ViewHint.ANIMATING] &&\n                !frameState.viewHints[ViewHint.INTERACTING] &&\n                !equals(frameState.extent, this.previousExtent_);\n            if (idle) {\n                this.dispatchEvent(new MapEvent(MapEventType.MOVEEND, this, frameState));\n                clone(frameState.extent, this.previousExtent_);\n            }\n        }\n        this.dispatchEvent(new MapEvent(MapEventType.POSTRENDER, this, frameState));\n        this.renderComplete_ =\n            this.hasListener(MapEventType.LOADSTART) ||\n                this.hasListener(MapEventType.LOADEND) ||\n                this.hasListener(RenderEventType.RENDERCOMPLETE)\n                ? !this.tileQueue_.getTilesLoading() &&\n                    !this.tileQueue_.getCount() &&\n                    !this.getLoadingOrNotReady()\n                : undefined;\n        if (!this.postRenderTimeoutHandle_) {\n            this.postRenderTimeoutHandle_ = setTimeout(function () {\n                _this.postRenderTimeoutHandle_ = undefined;\n                _this.handlePostRender();\n            }, 0);\n        }\n    };\n    /**\n     * Sets the layergroup of this map.\n     * @param {LayerGroup} layerGroup A layer group containing the layers in this map.\n     * @observable\n     * @api\n     */\n    PluggableMap.prototype.setLayerGroup = function (layerGroup) {\n        var oldLayerGroup = this.getLayerGroup();\n        if (oldLayerGroup) {\n            this.handleLayerRemove_(new GroupEvent('removelayer', oldLayerGroup));\n        }\n        this.set(MapProperty.LAYERGROUP, layerGroup);\n    };\n    /**\n     * Set the size of this map.\n     * @param {import(\"./size.js\").Size|undefined} size The size in pixels of the map in the DOM.\n     * @observable\n     * @api\n     */\n    PluggableMap.prototype.setSize = function (size) {\n        this.set(MapProperty.SIZE, size);\n    };\n    /**\n     * Set the target element to render this map into.\n     * @param {HTMLElement|string} [target] The Element or id of the Element\n     *     that the map is rendered in.\n     * @observable\n     * @api\n     */\n    PluggableMap.prototype.setTarget = function (target) {\n        this.set(MapProperty.TARGET, target);\n    };\n    /**\n     * Set the view for this map.\n     * @param {View|Promise<import(\"./View.js\").ViewOptions>} view The view that controls this map.\n     * It is also possible to pass a promise that resolves to options for constructing a view.  This\n     * alternative allows view properties to be resolved by sources or other components that load\n     * view-related metadata.\n     * @observable\n     * @api\n     */\n    PluggableMap.prototype.setView = function (view) {\n        if (!view || view instanceof View) {\n            this.set(MapProperty.VIEW, view);\n            return;\n        }\n        this.set(MapProperty.VIEW, new View());\n        var map = this;\n        view.then(function (viewOptions) {\n            map.setView(new View(viewOptions));\n        });\n    };\n    /**\n     * Force a recalculation of the map viewport size.  This should be called when\n     * third-party code changes the size of the map viewport.\n     * @api\n     */\n    PluggableMap.prototype.updateSize = function () {\n        var targetElement = this.getTargetElement();\n        var size = undefined;\n        if (targetElement) {\n            var computedStyle = getComputedStyle(targetElement);\n            var width = targetElement.offsetWidth -\n                parseFloat(computedStyle['borderLeftWidth']) -\n                parseFloat(computedStyle['paddingLeft']) -\n                parseFloat(computedStyle['paddingRight']) -\n                parseFloat(computedStyle['borderRightWidth']);\n            var height = targetElement.offsetHeight -\n                parseFloat(computedStyle['borderTopWidth']) -\n                parseFloat(computedStyle['paddingTop']) -\n                parseFloat(computedStyle['paddingBottom']) -\n                parseFloat(computedStyle['borderBottomWidth']);\n            if (!isNaN(width) && !isNaN(height)) {\n                size = [width, height];\n                if (!hasArea(size) &&\n                    !!(targetElement.offsetWidth ||\n                        targetElement.offsetHeight ||\n                        targetElement.getClientRects().length)) {\n                    // eslint-disable-next-line\n                    console.warn(\"No map visible because the map container's width or height are 0.\");\n                }\n            }\n        }\n        this.setSize(size);\n        this.updateViewportSize_();\n    };\n    /**\n     * Recomputes the viewport size and save it on the view object (if any)\n     * @private\n     */\n    PluggableMap.prototype.updateViewportSize_ = function () {\n        var view = this.getView();\n        if (view) {\n            var size = undefined;\n            var computedStyle = getComputedStyle(this.viewport_);\n            if (computedStyle.width && computedStyle.height) {\n                size = [\n                    parseInt(computedStyle.width, 10),\n                    parseInt(computedStyle.height, 10),\n                ];\n            }\n            view.setViewportSize(size);\n        }\n    };\n    return PluggableMap;\n}(BaseObject));\n/**\n * @param {MapOptions} options Map options.\n * @return {MapOptionsInternal} Internal map options.\n */\nfunction createOptionsInternal(options) {\n    /**\n     * @type {HTMLElement|Document}\n     */\n    var keyboardEventTarget = null;\n    if (options.keyboardEventTarget !== undefined) {\n        keyboardEventTarget =\n            typeof options.keyboardEventTarget === 'string'\n                ? document.getElementById(options.keyboardEventTarget)\n                : options.keyboardEventTarget;\n    }\n    /**\n     * @type {Object<string, *>}\n     */\n    var values = {};\n    var layerGroup = options.layers &&\n        typeof ( /** @type {?} */(options.layers).getLayers) === 'function'\n        ? /** @type {LayerGroup} */ (options.layers)\n        : new LayerGroup({ layers: /** @type {Collection} */ (options.layers) });\n    values[MapProperty.LAYERGROUP] = layerGroup;\n    values[MapProperty.TARGET] = options.target;\n    values[MapProperty.VIEW] =\n        options.view instanceof View ? options.view : new View();\n    var controls;\n    if (options.controls !== undefined) {\n        if (Array.isArray(options.controls)) {\n            controls = new Collection(options.controls.slice());\n        }\n        else {\n            assert(typeof ( /** @type {?} */(options.controls).getArray) === 'function', 47); // Expected `controls` to be an array or an `import(\"./Collection.js\").Collection`\n            controls = /** @type {Collection} */ (options.controls);\n        }\n    }\n    var interactions;\n    if (options.interactions !== undefined) {\n        if (Array.isArray(options.interactions)) {\n            interactions = new Collection(options.interactions.slice());\n        }\n        else {\n            assert(typeof ( /** @type {?} */(options.interactions).getArray) ===\n                'function', 48); // Expected `interactions` to be an array or an `import(\"./Collection.js\").Collection`\n            interactions = /** @type {Collection} */ (options.interactions);\n        }\n    }\n    var overlays;\n    if (options.overlays !== undefined) {\n        if (Array.isArray(options.overlays)) {\n            overlays = new Collection(options.overlays.slice());\n        }\n        else {\n            assert(typeof ( /** @type {?} */(options.overlays).getArray) === 'function', 49); // Expected `overlays` to be an array or an `import(\"./Collection.js\").Collection`\n            overlays = options.overlays;\n        }\n    }\n    else {\n        overlays = new Collection();\n    }\n    return {\n        controls: controls,\n        interactions: interactions,\n        keyboardEventTarget: keyboardEventTarget,\n        overlays: overlays,\n        values: values,\n    };\n}\nexport default PluggableMap;\n"],"mappings":"AAAA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA6B,YAAY;EACrD,IAAIC,aAAa,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;IAChCF,aAAa,GAAGG,MAAM,CAACC,cAAP,IACX;MAAEC,SAAS,EAAE;IAAb,aAA6BC,KAA7B,IAAsC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;MAAED,CAAC,CAACI,SAAF,GAAcH,CAAd;IAAkB,CAD/D,IAEZ,UAAUD,CAAV,EAAaC,CAAb,EAAgB;MAAE,KAAK,IAAIK,CAAT,IAAcL,CAAd,EAAiB,IAAIC,MAAM,CAACK,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EAAgDN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;IAAc,CAFrG;;IAGA,OAAOP,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAApB;EACH,CALD;;EAMA,OAAO,UAAUD,CAAV,EAAaC,CAAb,EAAgB;IACnB,IAAI,OAAOA,CAAP,KAAa,UAAb,IAA2BA,CAAC,KAAK,IAArC,EACI,MAAM,IAAIS,SAAJ,CAAc,yBAAyBC,MAAM,CAACV,CAAD,CAA/B,GAAqC,+BAAnD,CAAN;IACJF,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAAb;;IACA,SAASW,EAAT,GAAc;MAAE,KAAKC,WAAL,GAAmBb,CAAnB;IAAuB;;IACvCA,CAAC,CAACO,SAAF,GAAcN,CAAC,KAAK,IAAN,GAAaC,MAAM,CAACY,MAAP,CAAcb,CAAd,CAAb,IAAiCW,EAAE,CAACL,SAAH,GAAeN,CAAC,CAACM,SAAjB,EAA4B,IAAIK,EAAJ,EAA7D,CAAd;EACH,CAND;AAOH,CAd2C,EAA5C;AAeA;AACA;AACA;;;AACA,OAAOG,UAAP,MAAuB,aAAvB;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,OAAOC,mBAAP,MAAgC,0BAAhC;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,UAAP,IAAqBC,UAArB,QAAuC,kBAAvC;AACA,OAAOC,eAAP,MAA4B,sBAA5B;AACA,OAAOC,sBAAP,MAAmC,6BAAnC;AACA,OAAOC,mBAAP,MAAgC,0BAAhC;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,OAAOC,eAAP,MAA4B,sBAA5B;AACA,OAAOC,gBAAP,MAA6B,wBAA7B;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AACA,OAAOC,SAAP,IAAoBC,eAApB,QAA2C,gBAA3C;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,SAASC,kBAAT,EAA6BC,uBAA7B,QAA4D,UAA5D;AACA,SAASC,IAAT,QAAqB,gBAArB;AACA,SAASC,KAAK,IAAIC,cAAlB,EAAkCzB,MAAM,IAAI0B,eAA5C,QAAoE,gBAApE;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,KAAT,EAAgBC,mBAAhB,EAAqCC,MAArC,EAA6CC,iBAA7C,EAAgEC,OAAhE,QAAgF,aAAhF;AACA,SAASC,kBAAT,EAA6BC,gBAA7B,QAAqD,WAArD;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,MAAT,EAAiBC,aAAjB,QAAsC,aAAtC;AACA,SAASC,UAAT,QAA2B,UAA3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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"},"metadata":{},"sourceType":"module"}